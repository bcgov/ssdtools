[{"path":[]},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement codeofconduct@posit.co. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://bcgov.github.io/ssdtools/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://bcgov.github.io/ssdtools/CONTRIBUTING.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute","title":"NA","text":"Government employees, public members private sector encouraged contribute repository forking submitting pull request. (new GitHub, might start basic tutorial check detailed guide pull requests.) Pull requests evaluated repository guardians schedule deemed beneficial committed master. contributors retain original copyright stuff, contributing project, grant world-wide, royalty-free, perpetual, irrevocable, non-exclusive, transferable license users terms license project distributed. track copyright, please use following: New code file: top file, please ensure copyright year attributed collaborator assign full Apache 2.0 license Major addition code file: ‘Copyright 2015-2023 Province British Columbia’ full Apache 2.0 remains header either second collaborator added changes throughout code copyright added specific function(s). read: Minor changes: small changes code throughout file may easiest leave copyright declaration unaltered. However, contribution tracked GitHub.","code":"# Copyright 2015-2023 Province of British Columbia # Copyright 2024 Collaborator # #    Licensed under the Apache License, Version 2.0 (the \"License\"); #    you may not use this file except in compliance with the License. #    You may obtain a copy of the License at # #       https://www.apache.org/licenses/LICENSE-2.0 # #    Unless required by applicable law or agreed to in writing, software #    distributed under the License is distributed on an \"AS IS\" BASIS, #    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #    See the License for the specific language governing permissions and #    limitations under the License. # Copyright 2024 Collaborator # Apache 2.0 License new_function <- function() {   # code }"},{"path":"https://bcgov.github.io/ssdtools/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with ssdtools","title":"Getting help with ssdtools","text":"Thanks using ssdtools! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"https://bcgov.github.io/ssdtools/SUPPORT.html","id":"make-sure-its-new","dir":"","previous_headings":"","what":"Make sure its new","title":"Getting help with ssdtools","text":"opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"https://bcgov.github.io/ssdtools/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with ssdtools","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"small-sample-bias","dir":"Articles","previous_headings":"","what":"Small sample bias","title":"Additional Technical Details","text":"ssdtools package uses method Maximum Likelihood (ML) estimate parameters distribution fit data. Statistical theory says maximum likelihood estimators asymptotically unbiased, guarantee performance small samples. detailed account issue small sample bias estimates can found small sample size vignette.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"investigations-into-setting-minimum-sample-sizes-for-uni-modal-and-bi-modal-distributions-in-ssdtools","dir":"Articles","previous_headings":"","what":"Investigations into setting minimum sample sizes for uni-modal and bi-modal distributions in ssdtools","title":"Additional Technical Details","text":"jurisdictions require minimum sample size fitting valid SSD. current Australian New Zealand minimum 5, order fit two-parameter log-normal distribution (Warne et al. 2018). ssdtools default minimum sample size 6 (Thorley Schwarz 2018), consistent current methodology British Columbia (BC Ministry Environment Climate Change Strategy 2019). report series simulation studies designed inform final decision default minimum sample size adopt uni-modal 2 parameter distributions, well bi-modal 5 parameter distributions.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"simulations-based-on-ssddata","dir":"Articles","previous_headings":"Investigations into setting minimum sample sizes for uni-modal and bi-modal distributions in ssdtools > Bias and CI coverage and interval width","what":"Simulations based on ssddata","title":"Additional Technical Details","text":"used example datasets ssddata package R (Fisher Thorley 2021) undertake simulation study examine bias, coverage confidence interval (CI) widths using recommended default set six distributions (lognormal, log-Gumbel, log-logistic, gamma, Weibull, lognormal-log-normal mixture), model averaged estimates obtained using multi-method, confidence intervals estimated using recommended weighted sample bootstrap method (see D. R. Fox et al. (2024)). total 20 unique datasets extracted ssddata used define parameters simulation study follows: dataset extracted ssddata fit using default distribution set recommended (D. Fox et al. 2022) (D. R. Fox et al. 2024). six default distributions, parameters distribution highest weight dataset used generate new random datasets varying values N, including (limited ): 5 (current ANZG minimum), 6 (current BC minimum), 8 (current ANZG preferred). randomly generated dataset, ssdtools used re-fit data, model averaged estimates obtained using multi-method, upper lower confidence limits (CLs) produced using recommended weighted sample method (see Confidence Intervals Hazard Concentrations vignette). individual ssdtools fits shown 20 simulation datasets ssddata, six recommended default distributions, well model averaged CDF (black line):  simulation process repeated minimum 1,000 times dataset, results collated across iterations. simulated dataset true HCx values obtained directly parameter estimates data generating distribution. , relative bias calculated scaled-difference estimated HCx values true HCx value, .e HĈx−HCxHCx\\frac{\\widehat {HC}x-HCx}{HCx} HĈx\\widehat {HC}x estimate true value, HCxHCx; coverage calculated proportion simulations true HCxHCx value fell within lower upper 95% confidence limits; scaled confidence interval width calculated UL−LLHCx\\frac{UL-LL}{HCx} ULUL LLLL upper lower limits respectively. Bias, confidence interval width coverage function sample size across ~1000 simulations 20 datasets using multi model averaging method weighted sample method estimating confidence intervals via ssdtools shown :  simulation results showed significant gains terms reduced bias N=5 N=6, well coverage, improved substantially N=5 N=6. also small additional gain coverage N=7, median simulations reaches expected 95% case HC1.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"simulations-based-on-envirotox","dir":"Articles","previous_headings":"Investigations into setting minimum sample sizes for uni-modal and bi-modal distributions in ssdtools > Bias and CI coverage and interval width","what":"Simulations based on EnviroTox","title":"Additional Technical Details","text":"addition analysis based 20 ssddata example datasets, also ran expanded simulation study based EnviroTox dataset analysed Yanagihara et al. (2024). Combined ssddata examples, includes total 353 example datasets use case studies. Using larger dataset basis simulations, followed procedure described examine relative bias, well changes AICc weights (see ) various sample sizes. Estimates coverage confidence interval widths obtained larger dataset due computationally intensive bootstrap method obtaining confidence intervals. Bias sample size across ~1000 simulations 353 datasets using multi model averaging method via ssdtools, HC5, 10 20 (0.05, 0.1, 0.2) shown :  Note simulation results shown separately derived six distributions underlying source data generating distribution. bias results larger combined dataset show level improvement N=5 N=6 based smaller ssddata simulation. However, gradual improvement bias increasing N. strong evidence preferring N=6 N=7 context bias either simulation studies. note bias highest small sample sizes data generated using gamma distribution, likely reflecting extreme left-tailed nature distribution.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"aicc-based-model-weights","dir":"Articles","previous_headings":"Investigations into setting minimum sample sizes for uni-modal and bi-modal distributions in ssdtools","what":"AICc based model weights","title":"Additional Technical Details","text":"Aside considerations bias, coverage confidence interval width, also prudent examine weights different distributions changed sample size, data generated using six different default distributions, fully investigate sample size issues associated use mixture distributions. examined using simulation study across larger combined ssddata EnviroTox datasets (353 datasets) ensure wide range potential representations six default distributions considered. plot mean AICc weights function sample size (N) obtained data simulated using best fit distribution 353 datasets. Results shown separately six different source distributions, upper plot () showing AICc weight source (data generating) distributions, fit using default set six distributions using ssdtools; lower plot (B) showing AICc weight lognormal-lognormal mixture distribution source (data generating) distributions.  found AICc weights five unimodal distributions relatively similar (~0.2) low N. small N difficult discern differences distributions candidate list. weights increase 0.5 N increases (.e. converge true underlying generating distribution high N, upper plot). low sample sizes (N=5, 6 7) source (data-generating) distribution preferentially weighted AICc (upper plot, ). lnorm_lnorm mixture, AICc weights can >0.5 relatively N (>8, lower plot, B). also looked specifically AICc weight lognormal-lognormal mixture one six distributions default candidate set, across simulation based six source generating distributions. done examine potential erroneously highly weighting lognormal-lognormal mixture distribution chance, data generated instead using one five unimodal distributions. unimodal source distributions lognormal-lognormal mixture never high AICc weight, even high sample sizes (N=256, lower plot, B). AICc weights particularly low lnorm_lnorm mixture low sample sizes uni-modal source distributions (desirable property) (lower plot, B).","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"conclusions","dir":"Articles","previous_headings":"Investigations into setting minimum sample sizes for uni-modal and bi-modal distributions in ssdtools","what":"Conclusions","title":"Additional Technical Details","text":"Overall, results suggest (relative) bias function N behaves expected. N=6 recommendation appears well-supported coverage particularly low N=5, acceptable N=6. lognormal-lognormal mixture AICc weights suggest distribution preferred (.e. high AICc weight) () clear evidence bimodality source data; (ii) large N. Based results, recommendation single minimum sample size N=6 adopted (unimodal bimodal), since results suggest gains increasing 7 minimal.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"burr-iii-distribution","dir":"Articles","previous_headings":"The inverse Pareto and inverse Weibull as limiting distributions of the Burr Type-III distribution","what":"Burr III distribution","title":"Additional Technical Details","text":"probability density function, fX(x;b,c,k){f_X}(x;b,c,k) cumulative distribution function, FX(x;b,c,k){F_X}(x;b,c,k) Burr III distribution (also known Dagum distribution) used ssdtools Burr III Distribution fX(x;b,c,k)=bkcx2(bx)c−1[1+(bx)c]k+1,b,c,k,x>0f_X(x; b, c, k) = \\frac{b \\, k \\, c}{x^2} \\frac{\\left( \\frac{b}{x} \\right)^{c - 1}}{\\left[ 1 + \\left( \\frac{b}{x} \\right)^c \\right]^{k + 1}}, \\quad b, c, k, x > 0 FX(x;b,c,k)=1[1+(bx)c]k,b,c,k,x>0F_X(x; b, c, k) = \\frac{1}{\\left[ 1 + \\left( \\frac{b}{x} \\right)^c \\right]^k}, \\quad b, c, k, x > 0","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"inverse-pareto-distribution","dir":"Articles","previous_headings":"The inverse Pareto and inverse Weibull as limiting distributions of the Burr Type-III distribution","what":"Inverse Pareto distribution","title":"Additional Technical Details","text":"Let X∼Burr(b,c,k)X \\sim Burr(b,c,k) pdf given box . well known distribution Y=1XY = \\frac{1}{X} inverse Burr distribution (also known SinghMaddala distribution) $$ \\begin{array}{*{20}{c}} {{f_Y}(y;b,c,k) = \\frac{{c{\\kern 1pt} {\\kern 1pt} k{{\\left( {\\frac{y}{b}} \\right)}^c}}}{{y{\\kern 1pt} {{\\left[ {1 + {{\\left( {\\frac{y}{b}} \\right)}^c}} \\right]}^{k + 1}}}}}, & {b,c,k,y > 0} \\end{array} $$ FY(y;b,c,k)=1−1[1+(yb)c]k,b,c,k,y>0 \\begin{array}{*{20}{c}} {{F_Y}(y;b,c,k) = 1 - \\frac{1}{{{{\\left[ {1 + {{\\left( {\\frac{y}{b}} \\right)}^c}} \\right]}^k}}}}, & {b,c,k,y > 0} \\end{array} now consider limiting distribution c→∞c \\\\infty k→0k \\0 way product ckck remains constant, .e. ck=λck = \\lambda. Now, ck=λ{FY(y;b,c,k)}=1−ck=λ1[1+(yb)c]kandck=λ[1+(yb)c]k=ck=λ{(yb)ck[1+()c]k}andck=λ{(yb)ck[1+()c]k}=ck=λ{(yb)ck}ck=λ{[1+()c]k}=ck=λ{(yb)ck}⋅1=(yb)λ \\begin{array}{l} \\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\left\\{ {{F_Y}(y;b,c,k)} \\right\\} = 1 - \\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\frac{1}{{{{\\left[ {1 + {{\\left( {\\frac{y}{b}} \\right)}^c}} \\right]}^k}}} \\\\ \\\\ \\text{} \\\\ \\\\ \\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } {\\left[ {1 + {{\\left( {\\frac{y}{b}} \\right)}^c}} \\right]^k} = \\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\left\\{ {{{\\left( {\\frac{y}{b}} \\right)}^{ck}}{{\\left[ {1 + {{\\left( {\\frac{b}{y}} \\right)}^c}} \\right]}^k}} \\right\\} \\\\ \\\\ \\text{} \\\\ \\\\ \\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\left\\{ {{{\\left( {\\frac{y}{b}} \\right)}^{ck}}{{\\left[ {1 + {{\\left( {\\frac{b}{y}} \\right)}^c}} \\right]}^k}} \\right\\} = \\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\left\\{ {{{\\left( {\\frac{y}{b}} \\right)}^{ck}}} \\right\\}\\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\left\\{ {{{\\left[ {1 + {{\\left( {\\frac{b}{y}} \\right)}^c}} \\right]}^k}} \\right\\} \\\\ = \\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\left\\{ {{{\\left( {\\frac{y}{b}} \\right)}^{ck}}} \\right\\}\\; \\cdot \\,1 \\\\ = {\\left( {\\frac{y}{b}} \\right)^\\lambda } \\end{array} Therefore, ck=λ{FY(y;b,c,k)}=1−()λy≥b \\begin{array}{*{20}{c}} {\\mathop {\\mathop {\\lim }\\limits_{(c,k) \\(\\infty ,0)} }\\limits_{ck = \\lambda } \\left\\{ {{F_Y}(y;b,c,k)} \\right\\} = 1 - {{\\left( {\\frac{b}{y}} \\right)}^\\lambda }} & {y \\ge b} \\end{array} recognise (American) Pareto distribution. , limiting distribution Y=1XY = \\frac{1}{X} Pareto distribution, limiting distribution X=1YX = \\frac{1}{Y} (American) inverse Pareto distribution $$ \\begin{array}{l} {f_X}\\left( {x;\\alpha ,\\beta } \\right) = \\lambda {b^\\lambda }{x^{\\lambda  - 1}};{\\rm{  }}0 \\le x \\le {\\textstyle{1 \\b}};{\\rm{  }}\\lambda {\\rm{,}}b > 0 \\\\ {F_X}\\left( {x;\\alpha ,\\beta } \\right) = {\\left( {xb} \\right)^\\lambda };{\\rm{  }}0 \\le x \\le {\\textstyle{1 \\b}};{\\rm{  }}\\lambda {\\rm{,}}b > 0 \\end{array} $$ completeness, MLEs distribution closed-form expressions given λ̂=[ln(gXb̂)]−1b̂=1max{Xi} \\begin{array}{l} \\hat \\lambda  = \\left[ \\ln \\left( \\frac{{g_X}}{{\\hat b}} \\right) \\right]^{-1} \\\\ \\hat b = \\frac{1}{{\\max \\{ X_i \\}}} \\end{array} $\\rm{g_X}$ geometric mean data.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"inverse-weibull-distribution","dir":"Articles","previous_headings":"The inverse Pareto and inverse Weibull as limiting distributions of the Burr Type-III distribution","what":"Inverse Weibull distribution","title":"Additional Technical Details","text":"Let X∼Burr(b,c,k)X \\sim \\text{Burr}(b,c,k) pdf given box . make transformation Y=bk1cθXY = \\frac{b k^{\\frac{1}{c}} \\theta}{X}, θ\\theta parameter (constant). distribution YY also Burr distribution cdf GY(y)=1−1[1+(yk1cθ)c]k. G_Y(y) = 1 - \\frac{1}{\\left[ 1 + \\left( \\frac{y}{k^{\\frac{1}{c}} \\theta} \\right)^c \\right]^k}. interested limiting behavior Burr distribution k→∞k \\\\infty. Now, limk→∞GY(y)=1−limk→∞[1+(yk1cθ)c]−k. \\lim_{k \\\\infty} G_Y(y) = 1 - \\lim_{k \\\\infty} \\left[ 1 + \\left( \\frac{y}{k^{\\frac{1}{c}} \\theta} \\right)^c \\right]^{-k}. =1−limk→∞[1+(yθ)ck]−k. = 1 - \\lim_{k \\\\infty} \\left[ 1 + \\frac{\\left( \\frac{y}{\\theta} \\right)^c}{k} \\right]^{-k}. =1−exp[−(yθ)c], = 1 - \\exp \\left[ -\\left( \\frac{y}{\\theta} \\right)^c \\right], {using fact limn→∞(1+zn)−n=e−z}. \\left\\{ \\text{using fact } \\lim_{n \\\\infty} \\left( 1 + \\frac{z}{n} \\right)^{-n} = e^{-z} \\right\\}. recognize last expression cdf Weibull distribution parameters cc θ\\theta.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/additional-technical-details.html","id":"licensing","dir":"Articles","previous_headings":"","what":"Licensing","title":"Additional Technical Details","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2025 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"bootstrap-confidence-intervals","dir":"Articles","previous_headings":"","what":"Bootstrap confidence intervals","title":"Confidence Intervals for Hazard Concentrations","text":"Bootstrapping resampling technique used obtain confidence intervals (CIs) summary statistics. team explored use alternative methods obtaining CIs HCxHC_x estimates. included using closed-form expression variance-covariance matrix parameters Burr III distribution, coupled delta-method, well alternative bootstrap method inverse Pareto distribution based statistical properties parameters (D. Fox et al. 2022). cases, appeared methods can give results similar traditional bootstrapping approaches much less time, therefore potentially worth investigation. However, implementation methods across distributions ssdtools substantial undertaking. revised version ssdtools retains computationally intensive bootstrapping method obtain CIs. recommend minimum bootstrap sample 1,000 (current default - see argument nboot = 1000 ssd_hc()). However, reliable results can obtained using samples 5,000 10,000. recommend 10,000 bootstrap samples final reporting.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"parametric-versus-non-parametric-bootstrapping","dir":"Articles","previous_headings":"","what":"Parametric versus non-parametric bootstrapping","title":"Confidence Intervals for Hazard Concentrations","text":"Burrlioz uses non-parametric bootstrap method obtain CIs HCxHC_x estimate. Non-parametric bootstrapping carried repeatedly resampling raw data replacement, refitting distribution many times. 95% confidence limits (CLs) obtained calculating lower 0.025th upper 0.975th quantiles resulting HCxHC_x estimates across bootstrap samples (typically > 1,000). type bootstrap takes account uncertainty distribution fit based uncertainty data. ssdtools package default uses parametric bootstrap (although non-parametric bootstrapping also available). Instead resampling data, parametric bootstrapping draws random set new data (sample size original) fitted distribution repeatedly refit distribution. Upper lower 95% bounds calculated lower 0.025th upper 0.975th quantiles resulting HCxHC_x estimates across bootstrap samples (, typically > 1,000). approach attempts capture uncertainty data sample size given distribution, assumes uncertainty original fit. Using simulation studies ssdtools team examined bias compared resulting coverage parametric non-parametric bootstrapping methods (D. Fox et al. 2022). found coverage better using parametric bootstrapping method, retained default bootstrapping method update ssdtools although non-parametric bootstrapping currently method available censored data.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"bootstrapping-model-averaged-ssds","dir":"Articles","previous_headings":"","what":"Bootstrapping model-averaged SSDs","title":"Confidence Intervals for Hazard Concentrations","text":"Bootstrapping obtain CIs individual distributions relatively straightforward. However, obtaining bootstrap CIs model-averaged SSDs requires careful consideration, procedure subject problems evident obtaining model-averaged HCxHC_x estimates (see Model Averaging SSDs vignette). Model-averaged estimates /CIs can calculated treating distributions constituting single mixture distribution versus ‘taking (weighted) mean’. calculating model-averaged estimates treating distributions constituting single mixture distribution ensures ssd_hc() inverse ssd_hp(). Version 2.0 ssdtools supports three main methods obtaining bootstrap CIs, discussed detail .","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"weighted-arithmetic-mean","dir":"Articles","previous_headings":"Bootstrapping model-averaged SSDs","what":"Weighted arithmetic mean","title":"Confidence Intervals for Hazard Concentrations","text":"Prior version 2.0, ssdtools calculated model-averaged estimates CLs weighted (AICc values) arithmetic means estimates upper lower CLs obtained via bootstrapping candidate distributions independently. method computationally inefficient may lead incorrect results (described Model Averaging SSDs vignette) shown via simulations studies result CIs low coverage. current version ssdtools retains functionality setting ci_method = \"MACL\". Use method recommended technically incorrect computationally inefficient retained allow users reproduce previous results.","code":"library(ssdtools)  fit <- ssd_fit_dists(data = ssddata::ccme_silver) withr::with_seed(99, {   ssd_hc(fit, ci = TRUE, est_method = \"arithmetic\", ci_method = \"MACL\") }) #> # A tibble: 1 × 15 #>   dist    proportion   est    se    lcl   ucl    wt level est_method ci_method #>   <chr>        <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <chr>      <chr>     #> 1 average       0.05 0.192 0.216 0.0679 0.861     1  0.95 arithmetic MACL      #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"weighted-mixture-distribution","dir":"Articles","previous_headings":"Bootstrapping model-averaged SSDs","what":"Weighted mixture distribution","title":"Confidence Intervals for Hazard Concentrations","text":"theoretically correct way obtaining model averaged estimates (see Model Averaging SSDs vignette) CLs values consider set distributions mixture distribution individual distributions weighted AICc values. consider model set mixture distribution, bootstrapping achieved sampling mixture distribution. method sampling mixture distributions implemented ssdtools, via function ssd_rmulti(), generate random samples weighted combination distributions currently implemented ssdtools mixture distribution. bootstrapping mixture distribution, question arises whether model weights re-estimated every bootstrap sample, fixed values estimated models fitted original data? interesting question may warrant investigation, however current view fixed nominal values way component distributions used bootstrapping informed fit original data. Using simulation studies explored coverage bias CI values obtained without without fixing distribution weights, results indicate little difference. following code can used obtain CIs HCxHC_x estimates via bootstrapping weighted mixture distribution (using ssd_rmulti()), without fixed weight values respectively. Use method (without without fixed weights) theoretically correct, computationally inefficient.","code":"# Using the multi boostrapping method with fixed weights ssd_hc(fit, ci = TRUE, ci_method = \"multi_fixed\") #> # A tibble: 1 × 15 #>   dist    proportion   est    se    lcl   ucl    wt level est_method ci_method   #>   <chr>        <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <chr>      <chr>       #> 1 average       0.05 0.190 0.221 0.0223 0.828     1  0.95 multi      multi_fixed #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list> # Using the multi boostrapping method without fixed weights ssd_hc(fit, ci = TRUE, ci_method = \"multi_free\") #> # A tibble: 1 × 15 #>   dist    proportion   est    se    lcl   ucl    wt level est_method ci_method  #>   <chr>        <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <chr>      <chr>      #> 1 average       0.05 0.190 0.224 0.0252 0.861     1  0.95 multi      multi_free #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"weighted-bootstrap-sample","dir":"Articles","previous_headings":"Bootstrapping model-averaged SSDs","what":"Weighted bootstrap sample","title":"Confidence Intervals for Hazard Concentrations","text":"developers ssdtools investigated third method obtaining CIs model-averaged SSD. method bootstraps distributions individually proportional distributions AICc weight combines pooled bootstrap sample calculating 95% CLs lower 0.025th upper 0.975th quantiles. Pseudo-code method follows: distribution fitdists object, proportional number bootstrap samples draw (nboot_vals) found using round(nboot * weight), nboot total number bootstrap samples weight AICc based model weights distribution based original ssd_fitdist() fit. nboot_vals distribution, random sample size N drawn (total number original data points included original SSD fit) based estimated parameters original data distribution. random sample re-fit using distribution. HCxHC_x estimated re-fitted bootstrap fit. HCxHC_x estimates nboot_vals distribution pooled across distributions, quantile() used determine lower upper confidence bounds pooled weighted bootstrap sample HCxHC_x values. method draw random samples mixture distribution using ssd_rmulti. mathematically method shares properties obtaining HCxHC_x estimates via summing weighted values (weighted arithmetic mean), simulation studies shown , method obtaining CIs, pooled weighted sample method yields similar CIs coverage ssd_rmulti() method computationally much faster method recommended currently default method ssdtools can implemented simply calling ssd_hc().","code":"# Using a weighted pooled bootstrap sample ssd_hc(fit, ci = TRUE) #> # A tibble: 1 × 15 #>   dist    proportion   est    se    lcl   ucl    wt level est_method ci_method   #>   <chr>        <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <chr>      <chr>       #> 1 average       0.05 0.190 0.232 0.0193 0.907     1  0.95 multi      weighted_s… #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"comparing-bootstrapping-methods","dir":"Articles","previous_headings":"","what":"Comparing bootstrapping methods","title":"Confidence Intervals for Hazard Concentrations","text":"undertaken extensive simulation studies comparing implemented methods, results reported D. R. Fox et al. (2024). illustrative purposes, compare upper lower CLs using single example data set, silver data set Canadian Council Ministers Environment (CCME) ssddata package. Using default settings ssdtools, compare upper lower CLs four bootstrapping methods described . upper CLs relatively similar among four methods.  However, lower CL obtained using weighted arithmetic mean (default method implemented earlier versions ssdtools) much higher three methods, potentially accounting relatively poor coverage method simulation studies.  Given similarity upper lower CLs weighted bootstrap sample method compared potentially theoretically correct, computationally intensive weighted mixture method (via ssd_rmulti()), also compared time taken undertake bootstrapping across methods. Using default 1,000 bootstrap samples, elapsed time undertake bootstrapping mixture method 29.07 seconds, compared 2.66 seconds weighted bootstrap sample. means weighted bootstrap method ~ 11 times faster, representing considerable computational saving across many SSDs. reason, method currently set default method confidence interval estimation ssdtools.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/confidence-intervals.html","id":"licensing","dir":"Articles","previous_headings":"","what":"Licensing","title":"Confidence Intervals for Hazard Concentrations","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2025 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"plotting-the-cumulative-distributions","dir":"Articles","previous_headings":"","what":"Plotting the cumulative distributions","title":"Customising Plots","text":"ssdtools package plots cumulative distribution functions using ssd_plot_cdf(). example, consider CCME boron data ssddata package. can fit, plot cdfs follows.  graphic ggplot object can customized usual way. example, can add model-averaged cdf setting average = NA, change string used separate thousands using big.mark, customize color scale scale_color_manual() change theme.","code":"library(ssdtools) library(ggplot2)  fits <- ssd_fit_dists(ssddata::ccme_boron) ssd_plot_cdf(fits) ssd_plot_cdf(fits, average = NA, big.mark = \" \") +   scale_color_manual(name = \"Distribution\", breaks = c(\"average\", names(fits)), values = 1:7) +   theme_bw()"},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"ggplot-geoms","dir":"Articles","previous_headings":"","what":"ggplot Geoms","title":"Customising Plots","text":"ssdtools package provides four ggplot geoms allow construct plots.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"geom_ssdpoint","dir":"Articles","previous_headings":"ggplot Geoms","what":"geom_ssdpoint()","title":"Customising Plots","text":"first geom_ssdpoint() plots species sensitivity data","code":"ggplot(ssddata::ccme_boron) +   geom_ssdpoint(aes(x = Conc)) +   ylab(\"Probability density\") +   xlab(\"Concentration\")"},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"geom_ssdsegments","dir":"Articles","previous_headings":"ggplot Geoms","what":"geom_ssdsegments()","title":"Customising Plots","text":"second geom_ssdsegments() plots ranges censored species sensitivity data","code":"ggplot(ssddata::ccme_boron) +   geom_ssdsegment(aes(x = Conc, xend = Conc * 4)) +   ylab(\"Probability density\") +   xlab(\"Concenration\")"},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"geom_xribbon","dir":"Articles","previous_headings":"ggplot Geoms","what":"geom_xribbon()","title":"Customising Plots","text":"third geom_xribbon() plots species sensitivity confidence intervals","code":"ggplot(boron_pred) +   geom_xribbon(aes(xmin = lcl, xmax = ucl, y = proportion)) +   ylab(\"Probability density\") +   xlab(\"Concenration\")"},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"geom_hcintersect","dir":"Articles","previous_headings":"ggplot Geoms","what":"geom_hcintersect()","title":"Customising Plots","text":"fourth geom_hcintersect() plots hazard concentrations","code":"ggplot() +   geom_hcintersect(xintercept = c(1, 2, 3), yintercept = c(0.05, 0.1, 0.2)) +   ylab(\"Probability density\") +   xlab(\"Concenration\")"},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"putting-it-together","dir":"Articles","previous_headings":"ggplot Geoms","what":"Putting it together","title":"Customising Plots","text":"Geoms can combined follows  log x-axis include mathematical notation add HC5 value use following code.","code":"gp <- ggplot(boron_pred, aes(x = est)) +   geom_xribbon(aes(xmin = lcl, xmax = ucl, y = proportion), alpha = 0.2) +   geom_line(aes(y = proportion)) +   geom_ssdsegment(data = ssddata::ccme_boron, aes(x = Conc / 2, xend = Conc * 2)) +   geom_ssdpoint(data = ssddata::ccme_boron, aes(x = Conc / 2)) +   geom_ssdpoint(data = ssddata::ccme_boron, aes(x = Conc * 2)) +   scale_y_continuous(\"Species Affected (%)\", labels = scales::percent) +   xlab(\"Concentration (mg/L)\") +   expand_limits(y = c(0, 1))  gp gp +   scale_x_log10(     latex2exp::TeX(\"Boron $(\\\\mu g$/L)$\")   ) +   geom_hcintersect(xintercept = ssd_hc(fits)$est, yintercept = 0.05)"},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"saving-plots","dir":"Articles","previous_headings":"","what":"Saving plots","title":"Customising Plots","text":"recent plot can saved file using ggsave(), also allows user set resolution.","code":"ggsave(\"file_name.png\", dpi = 300)"},{"path":"https://bcgov.github.io/ssdtools/articles/customising-plots.html","id":"licensing","dir":"Articles","previous_headings":"","what":"Licensing","title":"Customising Plots","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2025 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"distributions-for-ssd-modelling","dir":"Articles","previous_headings":"","what":"Distributions for SSD modelling","title":"Distributions in ssdtools","text":"Many authors noted guiding theory ecotoxicology justify particular distributional form SSD domain restricted positive real line (Newman et al. 2000; Zajdlik 2005; David R. Fox 2016). Distributions selected use model averaging SSDs must bounded zero given effect concentrations negative. must also continuous, generally unbounded right. Furthermore, selected distributions within candidate model set provide variety shapes capture diversity shapes empirical species sensitivity distributions. date 9 distributions implemented ssdtools, although 6 appear default set. provide detailed account 9 distributions available ssdtools, guidance use.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"original-ssdtools-distributions","dir":"Articles","previous_headings":"Distributions for SSD modelling","what":"Original ssdtools distributions","title":"Distributions in ssdtools","text":"log-normal, log-logistic Gamma distributions widely used SSD modelling, part original distribution set early releases ssdtools developed Thorley Schwarz (2018). adopted default set three distributions early updates ssdtools associated ShinyApp (Dalgarno 2021). three distributions show good convergence properties retained part default model set version 2.0 ssdtools. addition log-normal, log-logistic Gamma distributions, original version ssdtools developed Thorley Schwarz (2018) also included three additional distributions candidate model set, including log-gumbel, Gompertz Weibull distributions. , log-Gumbel (otherwise known inverse Weibull, see ) shows relatively good convergence (see Figure 32, D. Fox et al. 2022), also one limiting distributions Burr Type 3 distribution implemented ssdtools, retained default model set. Gompertz Weibull distributions, however can exhibit unstable behaviour, sometimes showing poor convergence, therefore excluded default set (see Figure 32, D. Fox et al. 2022)","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"burr-iii-distribution","dir":"Articles","previous_headings":"Distributions for SSD modelling","what":"Burr III distribution","title":"Distributions in ssdtools","text":"history Burrlioz primary distributions used recently summmarized D. R. Fox et al. (2021). 2000, Australia New Zealand (Australian New Zealand Environment Conservation Council/Agriculture Resource Management Council Australia New Zealand 2000) adopted SSD‐based method deriving WQBs, following critical review multiple WQB derivation methods (Warne 1998). distinct feature method use 3‐parameter Burr distribution model empirical SSD, implemented Burrlioz software tool (Campbell et al. 2000). represented generalization methods previously employed Aldenberg Slob (1993) log–logistic distribution shown specific case Burr family (Tadikamalla 1980). Recent revision derivation method recognized using 3‐parameter Burr distributions small sample sizes (<8 species) created additional uncertainty estimating parameters justified, essentially overfitting data (Batley et al. 2018). Consequently, method, updated software (Burrlioz Ver 2.0), now uses 2‐parameter log–logistic distribution small data sets, whereas Burr type III distribution used data sets 8 species (Batley et al. 2018; Australian New Zealand Guidelines 2018). (D. R. Fox et al. 2021) probability density function, fX(x;b,c,k){f_X}(x;b,c,k) cumulative distribution function, FX(x;b,c,k){F_X}(x;b,c,k) Burr III distribution : Burr III Distribution fX(x;b,c,k)=bkcx2(bx)c−1[1+(bx)c]k+1;b,c,k,x>0f_X(x;b,c,k) = \\frac{{b\\,k\\,c}}{{x^2}} \\frac{{\\left( \\frac{b}{x} \\right)}^{c - 1}}{{\\left[ 1 + \\left( \\frac{b}{x} \\right)^c \\right]}^{k + 1}}; \\quad b, c, k, x > 0  FX(x;b,c,k)=1[1+(bx)c]k;b,c,k,x>0F_X(x;b,c,k) = \\frac{1}{{\\left[ 1 + \\left( \\frac{b}{x} \\right)^c \\right]}^k}; \\quad b, c, k, x > 0  Sample Burr probability density () cumulative probability (B) functions. Burr type III distribution adopted default distribution Burrlioz, well known (e.g., Tadikamalla (1980)) Burr III distribution related several theoretical distributions, exist limiting cases Burr III, .e., one Burr III parameters approaches either zero infinity. Burrlioz software incorporates logic aims identify situations parameter estimates tending towards either large small values. cases, fitting Burr III distribution abandoned one limiting distributions fitted instead. Specifically: c tends infinity Burr III distribution tends inverse (North American) Pareto distribution (see technical details) k tends infinity Burr III distribution tends inverse Weibull (log-Gumbel) distribution (see technical details) practical terms, Burr III distribution fitted k estimated greater 100, estimation procedure carried using inverse Weibull distribution. Similarly, c greater 80 (American) Pareto distribution fitted. necessary ensure numerical stability. Since Burr type III, inverse Pareto inverse Weibull (log Gumbel) distributions used Burrlioz software, implemented ssdtools. However, found stability issues Burr type III, well inverse Pareto distributions, currently precludes inclusion default model set (see D. Fox et al. (2022), details).","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"bimodal-distributions","dir":"Articles","previous_headings":"Distributions for SSD modelling","what":"Bimodal distributions","title":"Distributions in ssdtools","text":"use statistical mixture-models promoted Fox convenient realistic way modelling bimodal toxicity data (Fisher et al. 2019). Although parameter heavy, statistical mixture models provide better conceptual match inherent underlying data generating process since directly model bimodality mixture 2 underlying univariate distributions represent, example, different modes action (D. R. Fox et al. 2021). postulated mixture-model selected model-averaging context fit afforded mixture demonstrably better fit afforded single distribution. consequence high penalty AICc associated increased number parameters (p Equation 7 (D. R. Fox et al. 2021)) pronounced relatively small sample sizes. TMB version ssdtools now includes option fitting two mixture distributions, individually part model average set. can fitted using ssdtools supplying strings “llogis_llogis” /“lnorm_lnorm” dists argument ssd_fit_dists call. underlying code mixtures three components: likelihood function required TMB; exported R functions allow usual methods distribution called (p, q r); set supporting R functions (see D. Fox et al. (2022) Appendix D details). mixtures five parameters - two parameters component distributions mixing parameter (pmix) defines weighting two distributions ‘mixture.’ Sample lognormal lognormal mixture probability density () cumulative probability (B) functions. can see plot , mixture distributions provide highly flexible means modelling bimodality emprical SSD. happens, example, toxicity data toxicant include animal plant species, different modes action operating. Unfortunately, increased flexibility comes high penalty model-averaging process. combination small sample sizes high parameter count (typically 5 ) means mixture distributions -weighted - even good job describing data. reason, attempting model bimodal data, suggest looking fit using default set distributions examining fit just one either log-normal mixture log-logistic mixture. Keep mind done sample size pathologically small. guide, Prof. David Fox recommends absolute minimum n≥3k+1n \\ge 3k + 1 preferably n≥5k+1n \\ge 5k + 1 kk number model parameters.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"default-distributions","dir":"Articles","previous_headings":"","what":"Default Distributions","title":"Distributions in ssdtools","text":"variety distributions available ssdtools, inclusion estimating model-averaged SSD recommended. default, ssdtools uses (corrected) Akaike Information Criterion small sample size (AICc) measure relative quality fit different distributions basis calculating model-averaged weights. However, choice distributions used fit model-averaged SSD can profound effect estimated HCx values. Deciding final default set distributions adopt using model averaging approach non-trivial, acknowledge probably definitive ‘solution’ issue. However, default set underpinned guiding principle parsimony, .e., set large necessary cover wide variety distributional shapes contingencies bigger. , default set result model-averaged estimates HCx values : 1) minimise bias; 2) actual coverages confidence intervals close nominal level confidence; 3) estimated HCx confidence intervals HCx robust small changes data; 4) represent positively continuous distribution right left tails. ssdtools development team undertaken extensive simulation studies, well detailed technical examinations various candidate distributions examine issues bias, coverage numerical stability. detailed account findings can found report (D. Fox et al. 2022) repeated detail , although issues associated individual distributions outlined .","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"currently-recommended-default-distributions","dir":"Articles","previous_headings":"Default Distributions","what":"Currently recommended default distributions","title":"Distributions in ssdtools","text":"default list candidate distributions ssdtools comprised following: log-normal; log-logistic; gamma; inverse Weibull (log-Gumbel); Weibull; mixture two log-normal distributions default distributions plotted mean 2 standard deviation 2 (natural) log concentration scale around 7.4 concentration scale. Currently recommended default distributions.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"burr-type-iii-distribution","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Burr Type III distribution","title":"Distributions in ssdtools","text":"Burr Type 3 flexible three parameter distribution can fitted using ssdtools supplying string burrIII3 dists argument ssd_fit_dists call. Burr III distribution See details  Burr family distributions central derivation guideline values Australia New Zealand 20 yr (D. R. Fox et al. 2021). offering high degree flexibility, experience distributions time repeatedly highlighted numerical stability convergence issues parameters estimated using maximum likelihood (D. R. Fox et al. 2021). thought due high degree collinearity parameter estimates /relatively flat likelihood profiles (D. R. Fox et al. 2021), one motivations behind logic coded Burrlioz revert either two limiting distributions. Burr Type 3 distribution currently one recommended distributions default model set. 1) convergence issues associated Burr Type 3 distribution, 2) fact reverting limiting two parameter distribution fit easily within model averaging framework, 3) one two limiting distributions (inverse Pareto, see ) also estimation convergence issues.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"log-normal","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Log-normal","title":"Distributions in ssdtools","text":"log-normal distribution commonly used distribution natural sciences - particularly probability model describe right (positive)-skewed phenomena concentration data. random variable, XX lognormally distributed logarithm XX normally distributed. pdf XX given Log-normal Distribution fX(x;μ,σ)=12πσxexp[−(lnx−μ)22σ2];x,σ>0;−∞<μ<∞{f_X}\\left( x; \\mu, \\sigma \\right) = \\frac{1}{\\sqrt{2\\pi}\\ \\sigma x}\\exp \\left[ - \\frac{\\left( {\\ln x - \\mu } \\right)^2}{2\\sigma^2} \\right] ;\\ x,\\sigma  > 0;\\ - \\infty  < \\mu  < \\infty  log-normal distribution selected starting distribution given data effect concentrations. log-normal distribution can fitted using ssdtools supplying string lnorm dists argument ssd_fit_dists call. Sample lognormal probability density () cumulative probability (B) functions.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"log-logistic-distribution","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Log-logistic distribution","title":"Distributions in ssdtools","text":"Like lognormal distribution, log-logistic similarly defined, : XX log-logistic distribution, Y=ln(X)Y = \\ln (X) logistic distribution. Log-logistic Distribution fY(y;α,β)=(βα)(yα)β−1[1+(yα)β]2;y,α,β>0{f_Y}\\left( {y;\\alpha ,\\beta } \\right) = \\frac{\\left( \\frac{\\beta}{\\alpha} \\right) \\left( \\frac{y}{\\alpha} \\right)^{\\beta - 1}}{\\left[ 1 + \\left( \\frac{y}{\\alpha} \\right)^\\beta \\right]^2}; \\quad y, \\alpha, \\beta > 0 FY(y;α,β)=(yα)β1+(yα)β;y,α,β>0{F_Y}\\left( {y;\\alpha ,\\beta } \\right) = \\frac{\\left( \\frac{y}{\\alpha} \\right)^\\beta}{1 + \\left( \\frac{y}{\\alpha} \\right)^\\beta}; \\quad y, \\alpha, \\beta > 0  letting μ=ln(α)\\mu  = \\ln \\left( \\alpha  \\right) s=1βs = \\frac{1}{\\beta } : Logistic Distribution fX(x;μ,s)=e−x(1+e−x)2;x,s>0,−∞<μ<∞{f_X}\\left( {x;\\mu ,s} \\right) = \\frac{e^{-x}}{\\left( 1 + e^{-x} \\right)^2}; \\quad x, s > 0, \\; -\\infty < \\mu < \\infty FX(x;μ,s)=11+e−x−μs;x,s>0,−∞<μ<∞{F_X}\\left( {x;\\mu ,s} \\right) = \\frac{1}{1 + e^{-\\frac{x - \\mu}{s}}}; \\quad x, s > 0, \\; -\\infty < \\mu < \\infty  log-logistic distribution often used candidate SSD primarily analytic tractability (Aldenberg Slob 1993). included wider tails log-normal specific case general Burr family distributions Burr (1942). log-logistic distribution can fitted using ssdtools supplying string lnorm dists argument ssd_fit_dists call. Sample Log logistic probability density () cumulative probability (B) functions.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"gamma-distribution","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Gamma distribution","title":"Distributions in ssdtools","text":"two-parameter gamma distribution following pdf cdf. Gamma Distribution fX(x;b,c)=xc−1e−xbbcΓ(c),0≤x<∞,b,c>0{f_X}\\left( {x;b,c} \\right) = \\frac{x^{c - 1} e^{-\\frac{x}{b}}}{b^c \\, \\Gamma(c)}, \\quad 0 \\leq x < \\infty,b,c > 0 FX(x;b,c)=1Γ(c)γ(c,xb),0≤x<∞,b,c>0{F_X}\\left( {x;b,c} \\right) = \\frac{1}{\\Gamma(c)} \\, \\gamma\\left(c, \\frac{x}{b}\\right), \\quad 0 \\leq x < \\infty,b,c > 0  Γ(⋅)\\Gamma \\left(  \\cdot  \\right) gamma function (R simply gamma(x)) γ(⋅)\\gamma \\left(  \\cdot  \\right) (lower) incomplete gamma function γ(x,)=∫0xta−1e−tdt\\gamma \\left( {x,} \\right) = \\int\\limits_0^x {{t^{- 1}}} \\,{e^{ - t}}\\,dt (can computed using gammainc function pracma package R). use modeling species sensitivity data, gamma distribution two key features provide additional flexibility relative log-normal distribution: 1) asymmetrical logarithmic scale; 2) wider tails. gamma distribution can fitted using ssdtools supplying string “gamma” dists argument ssd_fit_dists call. Sample gamma probability density () cumulative probability (B) functions.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"log-gumbel-inverse-weibull-distribution","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Log-gumbel (inverse Weibull) distribution","title":"Distributions in ssdtools","text":"log-gumbel distribution two-parameter distribution commonly used model extreme values. log-gumbel distribution can fitted using ssdtools supplying string lgumbel dists argument ssd_fit_dists call. two-parameter log-gumbel distribution following pdf cdf: Log-Gumbel Distribution fX(x;α,β)=βe−(αx)−βαβxβ+1,x,α,β>0{f_X}\\left( {x;\\alpha ,\\beta } \\right) = \\frac{\\beta \\, e^{-(\\alpha x)^{-\\beta}}}{\\alpha^\\beta \\, x^{\\beta + 1}}, \\quad x, \\alpha, \\beta > 0 FX(x;α,β)=e−(αx)−β,x,α,β>0{F_X}\\left( {x;\\alpha ,\\beta } \\right) = e^{-(\\alpha x)^{-\\beta}}, \\quad x, \\alpha, \\beta > 0  Sample Log-Gumbel probability density () cumulative probability (B) functions.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"gompertz-distribution","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Gompertz distribution","title":"Distributions in ssdtools","text":"Gompertz distribution flexible distribution exhibits positive negative skewness. Gompertz distribution can fitted using ssdtools supplying string gompertz dists argument ssd_fit_dists call. consider two parameterisations Gompertz distribution. first, given Wikipedia also used ssdtools [Gompertz] following pdf cdf: Gompertz Distribution: Parameterisation fX(x;η,b)=bηexp(η+bx−ηebx),0≤x<∞,η,b>0{f_X}\\left( {x;\\eta ,b} \\right) = b \\eta \\exp\\left(\\eta + bx - \\eta e^{bx}\\right), \\quad 0 \\leq x < \\infty, \\eta, b > 0 FX(x;η,b)=1−exp[−η(ebx−1)],0≤x<∞,η,b>0{F_X}\\left( {x;\\eta ,b} \\right) = 1 - \\exp\\left[ -\\eta \\left(e^{bx} - 1\\right) \\right], \\quad 0 \\leq x < \\infty, \\eta, b > 0  second parameterisation product bηb\\eta formulae replaced parameter aa giving: Gompertz Distribution: Parameterisation II fX(x;,b)=abexbexp[−(exb−1)],0≤x<∞,,b>0{f_X}(x;,b) = \\frac{}{b} e^{\\frac{x}{b}} \\exp\\left[ -\\left(e^{\\frac{x}{b}} - 1\\right) \\right], \\quad 0 \\leq x < \\infty, , b > 0 FX(x;,b)=1−exp[−(exb−1)],0≤x<∞,,b>0{F_X}(x;,b) = 1 - \\exp\\left[ -\\left(e^{\\frac{x}{b}} - 1\\right) \\right], \\quad 0 \\leq x < \\infty, , b > 0  Sample Gompertz probability density () cumulative probability (B) functions. Gompertz distribution available ssdtools, however parameter estimation can somewhat unstable (D. Fox et al. 2022), reason currently included default set.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"weibull-distribution","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Weibull distribution","title":"Distributions in ssdtools","text":"inclusion Weibull distribution inverse Pareto distribution (see next) ssdtools primarily necessitated need maintain consistency calculations undertaken Burrlioz. mentioned earlier, Weibull inverse Pareto distributions arise limiting distributions Burr parameters cc kk tend either zero /infinity specific ways. two-parameter Weibull distribution following pdf cdf: Weibull Distribution fX(x;c,θ)=cθ(xθ)c−1e−(xθ)c,0≤x<∞,c,θ>0{f_X}(x;c,\\theta) = \\frac{c}{\\theta} \\left( \\frac{x}{\\theta} \\right)^{c - 1} e^{-\\left( \\frac{x}{\\theta} \\right)^c}, \\quad 0 \\leq x < \\infty, c, \\theta > 0 FX(x;c,θ)=1−e−(xθ)c,0≤x<∞,c,θ>0{F_X}(x;c,\\theta) = 1 - e^{-\\left( \\frac{x}{\\theta} \\right)^c}, \\quad 0 \\leq x < \\infty, c, \\theta > 0  Weibull distribution can fitted ssdtools supplying string weibull dists argument ssd_fit_dists call. Sample Weibull probability density () cumulative probability (B) functions.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"inverse-pareto-distribution","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Inverse Pareto distribution","title":"Distributions in ssdtools","text":"inverse Pareto distribution can fitted using ssdtools supplying string invpareto dists argument ssd_fit_dists call. inverse Pareto distribution implemented Burrlioz 2.0 software, important understand done one limiting Burr distributions (see technical details). inverse Pareto offered stand-alone option Burrlioz 2.0 software. spent considerable time effort exploring properties inverse Pareto distribution, including deriving bias correction equations alternative methods deriving confidence intervals (D. Fox et al. 2022). work substantial value improving current Burrlioz 2.0 method, bias corrections adopted deriving HCx estimates inverse Pareto parameters estimated using maximum likelihood. case Burrlioz 2.0 software, decided include inverse Pareto distribution default candidate set ssdtools although offered ass user-selectable distribution use model-fitting process. many statistical distributions, different ‘variants’ exist. ‘variants’ much different distributions simple re-parameterisations. example, many distributions scale parameter, β\\beta authors texts use β\\beta others use 1β\\frac{1}{\\beta }. example re-parameterisation given Gompertz distribution. choice mathematical representation may purely preferential, sometimes done mathematical convenience. example, Parameterisation Gompertz distribution obtained letting =bηa = b\\eta Parameterisation II. re-expression involving parameters bb η\\eta particularly useful trying fit distribution one {b,η}\\left\\{ {b,\\,\\eta } \\right\\} small large. already noted particular parameterisation (Inverse)Pareto distribution used Burrlioz 2.0 ssdtools matter preference, rather dictated mathematical considerations demonstrated convergence Burr distribution one specific version (Inverse)Pareto distribution. mathematics provides elegant solution otherwise problematic situation, version (Inverse)Pareto distribution particularly use stand-alone distribution fitting SSD (special, limiting case Burr distribution). two versions (Inverse)Pareto distribution known European North American versions. pdfs cdfs given .                     (Inverse) Pareto Distribution - North American Version Pareto Distribution fX(x;α,β)=αβαx−(α+1),x>β,α,β>0{f_X}\\left( {x;\\alpha ,\\beta } \\right) = \\alpha \\beta^\\alpha x^{-(\\alpha + 1)}, \\quad x > \\beta, \\; \\alpha, \\beta > 0 FX(x;α,β)=1−(βx)α,x>β,α,β>0{F_X}\\left( {x;\\alpha ,\\beta } \\right) = 1 - \\left( \\frac{\\beta}{x} \\right)^\\alpha, \\quad x > \\beta, \\; \\alpha, \\beta > 0 Now, XX Pareto distribution , Y=1X Y = \\frac{1}{X}  inverse Pareto distribution.Inverse Pareto Distribution gY(y;α,β)=αβαyα−1,y≤1β,α,β>0{g_Y}\\left( {y;\\alpha ,\\beta } \\right) = \\alpha \\beta^\\alpha y^{\\alpha - 1}, \\quad y \\le \\frac{1}{\\beta}, \\; \\alpha, \\beta > 0 GY(y;α,β)=(βy)α,0<y≤1β,α,β>0{G_Y}\\left( {y;\\alpha ,\\beta } \\right) = \\left( \\beta y \\right)^\\alpha, \\quad 0 < y \\le \\frac{1}{\\beta}, \\; \\alpha, \\beta > 0  Importantly, see North American versions distributions bounded Pareto distribution bounded β\\beta inverse Pareto distribution bounded 1β\\frac{1}{\\beta }.aside, mle β\\beta Pareto distribution β̂=min{X1,…,Xn}\\hat \\beta  = \\min \\left\\{ {{X_1}, \\ldots ,{X_n}} \\right\\} mle 1β\\frac{1}{\\beta } inverse Pareto β̃=max{Y1,…,Yn}=max{1X1,…,1Xn}=1min{X1,…,Xn}=1β̂\\begin{array}{*{20}{l}} {\\tilde \\beta  = \\max \\left\\{ {{Y_1}, \\ldots ,{Y_n}} \\right\\}}\\\\ {\\quad  = \\max \\left\\{ {\\frac{1}{{{X_1}}}, \\ldots ,\\frac{1}{{{X_n}}}} \\right\\} = \\frac{1}{{\\min \\left\\{ {{X_1}, \\ldots ,{X_n}} \\right\\}}}}\\\\ {\\quad  = \\frac{1}{{\\hat \\beta }}} \\end{array}. mle α\\alpha : α̂=[ln(gβ̂)]−1\\hat \\alpha  = {\\left[ {\\ln \\left( {\\frac{g}{{\\hat \\beta }}} \\right)} \\right]^{ - 1}} gg geometric mean: g=[∏=1nXi]1ng = {\\left[ {\\prod\\limits_{= 1}^n {{X_i}} } \\right]^{\\frac{1}{n}}} Thus, doesn’t matter whether ’re fitting Pareto inverse Pareto distribution data - parameter estimates . bounded, North American version (Inverse)Pareto distribution useful stand-alone SSD - inverse Pareto distribution since bounded . Sample North American Pareto probability density () cumulative probability (B) functions. Sample North American inverse Pareto probability density () cumulative probability (B) functions. see pdf plots alternative, European version inverse Pareto distribution realistic candidate.                     (Inverse) Pareto Distribution - European Version Pareto Distribution fX(x;α,β)=αβxα−1(x+β)α+1,x,α,β>0{f_X}\\left( {x;\\alpha ,\\beta } \\right) = \\frac{\\alpha \\beta x^{\\alpha - 1}}{\\left( x + \\beta \\right)^{\\alpha + 1}}, \\quad x, \\alpha, \\beta > 0 FX(x;α,β)=1−(βx+β)α,x,α,β>0{F_X}\\left( {x;\\alpha ,\\beta } \\right) = 1 - \\left( \\frac{\\beta}{x + \\beta} \\right)^\\alpha, \\quad x, \\alpha, \\beta > 0 Now, XX Pareto distribution , Y=1X Y = \\frac{1}{X}  inverse Pareto distribution.Inverse Pareto Distribution gY(y;α,β)=αβαyα−1(1+βy)α+1,y,α,β>0{g_Y}\\left( {y;\\alpha ,\\beta } \\right) = \\frac{\\alpha \\beta^\\alpha y^{\\alpha - 1}}{\\left( 1 + \\beta y \\right)^{\\alpha + 1}}, \\quad y, \\alpha, \\beta > 0 GY(y;α,β)=(βy1+βy)α,y,α,β>0{G_Y}\\left( {y;\\alpha ,\\beta } \\right) = \\left( \\frac{\\beta y}{1 + \\beta y} \\right)^\\alpha, \\quad y, \\alpha, \\beta > 0  note passing versions Pareto inverse Pareto distrbutions available R. example, Rpackage extraDistr North American versions, actuar package European versions. Sample European Pareto probability density () cumulative probability (B) functions. Sample European inverse Pareto probability density () cumulative probability (B) functions.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"inverse-weibull-distribution-see-log-gumbel-above","dir":"Articles","previous_headings":"Distributions currently implemented in ssdtools","what":"Inverse Weibull distribution (see log-Gumbel, above)","title":"Distributions in ssdtools","text":"inverse Weibull mathematically equivalent log-Gumbel distribution described . also limiting distribution Burr Type 3, distribution show instability issues, unbounded right. therefore represents valid SSD distribution included default model set distribution right. inverse Weibull (log-Gumbel) distribution can fitted ssdtools supplying string lgumbel dists argument ssd_fit_dists call.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"notes","dir":"Articles","previous_headings":"Relationships among distributions in ssdtools","what":"NOTES","title":"Distributions in ssdtools","text":"diagram , XX denotes random variable box beginning arrow expression beside arrow indicates mathematical transformation XX resultant transformed data distribution identified box end arrow. Reciprocal transformations (1X\\frac{1}{X}) bi-directional (↔\\leftrightarrow). Although negative exponential distribution explicitly included ssdtools, special case gamma distribution c=1c=1. included figure related distributions included ssdtools. European versions Pareto inverse Pareto distributions unbounded; North American versions bounded.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/distributions.html","id":"licensing","dir":"Articles","previous_headings":"","what":"Licensing","title":"Distributions in ssdtools","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2025 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/faqs.html","id":"how-can-i-plot-the-model-averaged-fit-and-the-individual-fits","dir":"Articles","previous_headings":"","what":"How can I plot the model averaged fit and the individual fits?","title":"Frequently Asked Questions","text":"","code":"library(ssdtools)  dist <- ssd_fit_dists(ssddata::ccme_boron) ssd_plot_cdf(dist, average = NA)"},{"path":"https://bcgov.github.io/ssdtools/articles/faqs.html","id":"how-can-i-include-mathematical-expressions-in-the-x-axis-label-when-using-ssd_plot","dir":"Articles","previous_headings":"","what":"How can I include mathematical expressions in the x-axis label when using ssd_plot()?","title":"Frequently Asked Questions","text":"","code":"library(ssdtools)  ssd_plot(ssddata::ccme_boron, ssdtools::boron_pred, label = \"Species\", shape = \"Group\") +   ggplot2::scale_x_continuous(latex2exp::TeX(\"Boron $(\\\\mu g$/L)$\"), breaks = c(1, 10, 100, 1000, 10000))"},{"path":"https://bcgov.github.io/ssdtools/articles/faqs.html","id":"licensing","dir":"Articles","previous_headings":"","what":"Licensing","title":"Frequently Asked Questions","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2025 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/faqs.html","id":"what-is-censored-data","dir":"Articles","previous_headings":"Censoring","what":"What is censored data?","title":"Frequently Asked Questions","text":"Data censored exact value uncertain. three primary types censoring. Right censoring lower bound known (>), left censoring upper bound known (<) interval censored lower upper bound known (><). Uncensored data can thought interval censored data upper lower bound identical (=). Likewise, missing data can considered censored data upper lower bound unknown (?).","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/faqs.html","id":"how-is-censored-data-coded-in-ssdtools","dir":"Articles","previous_headings":"Censoring","what":"How is censored data coded in ssdtools?","title":"Frequently Asked Questions","text":"Censored data coded specifying lower bound values one column (>) upper bound values second column (<). Unknown lower bounds coded using NA 0 unknown upper bounds coded using NA Inf. name columns lower upper bound values passed left (>) right (<) arguments ssd_fit_dists() function, respectively.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/faqs.html","id":"what-are-the-current-limitations-on-analyzing-censored-data","dir":"Articles","previous_headings":"Censoring","what":"What are the current limitations on analyzing censored data?","title":"Frequently Asked Questions","text":"Currently ssdtools following limitations analysis censored data: model averaging distributions number parameters ; estimation confidence interval using non-parametric bootstrapping .","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Model Averaging SSDs","text":"Many authors noted guiding theory ecotoxicology justify particular distributional form SSD domain restricted positive real line (Newman et al. 2000), (Zajdlik 2005), (Chapman et al. 2007), (David R. Fox 2016). Indeed, (Chapman et al. 2007) described identification suitable probability model one important difficult choices use SSDs. Compounding lack clarity functional form SSD omnipresent, equally vexatious issue small sample size, meaning plausible candidate model unlikely rejected (D. R. Fox et al. 2021). ssdtools R package uses model averaging procedure avoid need -priori select candidate distribution instead uses measure ‘fit’ model compute weights applied initial set candidate distributions. method, applied SSD context described detail (D. R. Fox et al. 2021), potentially provides level flexibility parsimony difficult achieve single SSD distribution. (D. Fox et al. 2022)","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"preliminaries","dir":"Articles","previous_headings":"","what":"Preliminaries","title":"Model Averaging SSDs","text":"jump model averaging particular, SSD Model Averaging, let’s backup little consider average advantages disadvantages averaging.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"the-pros-and-cons-of-averaging","dir":"Articles","previous_headings":"Preliminaries","what":"The pros and cons of averaging","title":"Model Averaging SSDs","text":"’re familiar process averaging. Indeed, averages pervasive everyday life - talk average income; mean sea level; average global temperature; average height, weight, age etc. etc. ’s obsession averaging? ’s simple really - ’s statisticians call data reduction just fancy name describe process summarising lot raw data using small number (hopefully) representative summary statistics mean standard deviation. Clearly, ’s lot easier work just single mean individual data values. ’s upside. downside process data reduction decimates original data - lose information process. Nevertheless, benefits tend outweigh information loss. Indeed, much ‘conventional’ statistical theory practice focused mean. Examples include T-tests, ANOVA, regression, clustering. talk ‘average’ usually referring simple, arithmetic mean:X‾=1n∑=1nXi\\bar{X}=\\frac{1}{n}\\sum\\limits_{=1}^{n}{{{X}_{}}} although recognize types mean including geometric mean, harmonic mean weighted mean. last particularly pertinent model averaging.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"weighted-averages","dir":"Articles","previous_headings":"Preliminaries","what":"Weighted Averages","title":"Model Averaging SSDs","text":"simple arithmetic mean, individual values receive weighting - contribute 1n\\frac{1}{n} summation. appropriate many cases, ’s useful components contribute varying degrees. example familiar ecotoxicologists time-varying concentration shown figure .  figure see 5 concentrations going left right: {0.25,0.95,0.25,0.12,0.5}\\left\\{ 0.25,0.95,0.25,0.12,0.5 \\right\\}. take simple arithmetic mean concentrations get X‾=0.414\\bar{X}=0.414. ignores different durations 5 concentrations. 170 hours, 63 concentration 0.25, 25 concentration 0.95, 23 concentration 0.25, 23 concentration 0.12, 36 concentration 0.50. weight concentrations time :X‾TW=(63⋅0.25+25⋅0.95+23⋅0.25+23⋅0.12+36⋅0.50)(63+25+23+23+36)=56.01170=0.33{{{\\bar{X}}}_{TW}}=\\frac{\\left( 63\\cdot 0.25+25\\cdot 0.95+23\\cdot 0.25+23\\cdot 0.12+36\\cdot 0.50 \\right)}{\\left( 63+25+23+23+36 \\right)}=\\frac{56.01}{170}=0.33So, formula weighted average :X‾=∑=1nwiXi\\bar{X}=\\sum\\limits_{=1}^{n}{{{w}_{}}{{X}_{}}} 0≤wi≤10\\le {{w}_{}}\\le 1 ∑=1nwi=1\\sum\\limits_{=1}^{n}{{{w}_{}}=1}. Note, simple arithmetic mean just special case weighted mean ∑=1nwi=1n\\sum\\limits_{=1}^{n}{{{w}_{}}=\\frac{1}{n}} ; ∀=1,…,n\\forall =1,\\ldots ,n","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"model-averaging","dir":"Articles","previous_headings":"","what":"Model Averaging","title":"Model Averaging SSDs","text":"weighted average acknowledges elements computation equal ‘importance’. example , importance based proportion time concentration particular level. Bayesians well-versed concept - elicitation prior distributions model parameters provides mechanism weighting degree analysis informed existing knowledge versus using purely data-driven approach. Model averaging usually used context estimating model parameters quantities derived fitted model - example EC50 derived C-R model. Let’s motivate discussion using following small dataset toxicity estimates chemical. Now, suppose two possibilities fitting SSD - lognormal distributions. Model 1 LN(-1.067,0.414) distribution Model 2 LN(-0.387,0.617) distribution. plot empirical cdf Models 1 2 shown . Emprirical cdf (black); Model 1(green); Model 2 (blue) see Model 1 fits well lower, left region poorly upper region, reverse true Model 2. using either Model 1 Model 2 going result poor fit overall. However, obvious thing combine models. just try using 50% Model 1 50% Model 2, may sub-optimal. turns best fit obtained using 44% Model 1 56% Model 2. Redrawing plot adding weighted average Models 1 2 shown . Empirical cdf (black); Model 1(green); Model 2 (blue); averaged Model (red) Clearly strategy worked - now excellent fitting SSD. estimation HC20? ’s simple matter work individual HC20 values Models 1&2 using appropriate qlnorm() function R. Thus : averaged distribution? intuitively appealing approach apply weights individual HC20 values applied respective models. 0.44*0.2428209 + 0.56*0.4040243 = 0.33. model-averaged HC20 estimate 0.33. check, can determine fraction affected concentration = 0.33 - course 20%. Let’s take look plot.  Something’s wrong - fraction affected concentration 0.33 30% - required 20%. issue taken next section","code":"#>  [1] 1.73 0.57 0.33 0.28 0.30 0.29 2.15 0.80 0.76 0.54 0.42 0.83 0.21 0.18 0.59 # Model 1 HC20 cat(\"Model 1 HC20 =\", qlnorm(0.2, -1.067, 0.414)) #> Model 1 HC20 = 0.2428209  # Model 2 HC20 cat(\"Model 2 HC20 =\", qlnorm(0.2, -0.387, 0.617)) #> Model 2 HC20 = 0.4040243"},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"model-averaged-ssds","dir":"Articles","previous_headings":"","what":"Model Averaged SSDs","title":"Model Averaging SSDs","text":"’ve just seen, applying model weights component HCx values summing produce correct result. reason can explained mathematically follows (interested mathematical explanation - skip ahead next section). correct expression model-averaged SSD : G(x)=∑=1kwiFi(x)G\\left( x \\right) = \\sum\\limits_{= 1}^k {{w_i}} {F_i}\\left( x \\right) Fi(⋅){F_i}\\left(  \\cdot  \\right) ith component SSD (.e. cdf) wi weight assigned Fi(⋅){F_i}\\left(  \\cdot  \\right). Notice function G(x)G\\left( x \\right) proper cumulative distribution function (cdf) means given quantile, x, G(x)G\\left( x \\right) returns cumulative probability: P[X≤x]P\\left[ {X \\leqslant x} \\right] Now, incorrect approach takes weighted sum component inverse cdfs, : Now, correct method determining HCx work proper model-averaged cdf G(x)G\\left( x \\right). means finding inverse function G−1(p){G^{ - 1}}\\left( p \\right). ’ll address moment. example, consider two complex numbers = (5−)2 b=−1.683−1.915i{\\text{= }}\\frac{{\\left( {5 - } \\right)}}{2}{\\text{       }}b =  - 1.683 - 1.915i can shown 1a+b=1a+1b=0.126+0.372i\\frac{1}{{+ b}} = \\frac{1}{} + \\frac{1}{b} = 0.126 + 0.372i Back issue hand, since ’re dealing complex numbers, ’s safe say:G−1(p)≠H(p){G^{ - 1}}\\left( p \\right) \\ne H\\left( p \\right) need visual demonstration, can plot G(x)G\\left( x \\right) inverse H(p)H\\left( p \\right) functions x (quantile) two-component lognormal distribution .   next discuss use model-averaged SSD obtain correct model-averaged HCx.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"computing-a-model-averaged-hcx","dir":"Articles","previous_headings":"","what":"Computing a model-averaged HCx","title":"Model Averaging SSDs","text":"formally, inversion principle states HCx (denoted φx{\\varphi _x}) must satisfy following: df(φx)=xandqf(x)=φxdf\\left( {{\\varphi _x}} \\right) = x\\quad \\quad \\quad \\quad qf\\left( x \\right) = {\\varphi _x} df(⋅)df\\left(  \\cdot  \\right) model-averaged distribution function (.e. SSD) qf(⋅)qf\\left(  \\cdot  \\right) model-averaged quantile function. equality hold, necessary qf(p)=df−1(p)qf\\left( p \\right) = d{f^{ - 1}}\\left( p \\right). ssdtools following check inversion principle holds:  Note: multi_est argument set FALSE test fail.  inversion principle ensures use single distribution function compute HCx fraction affected. Referring figure , HCx obtained MA-SSD (red curve) following → arrows fraction affected obtained following ← arrows.  Finally, ’ll briefly discuss HCx computed R using method implemented ssdtools.","code":"# Obtain a model-averaged HCx using the ssd_hc() function hcp<-ssd_hc(x, p = p) # Check that the inversion principle holds ssd_hp(x, hcp, est_method = \"multi\") == p   # this should result in logical `TRUE`"},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"computing-the-hcx-in-rssdtools","dir":"Articles","previous_headings":"Computing a model-averaged HCx","what":"Computing the HCx in R/ssdtools","title":"Model Averaging SSDs","text":"Obviously, need able ‘codify’ process R (computer language).Mathematically equivalent seeking solution following equation:x:G(x)=p{x:G\\left( x \\right) = p} , equivalently:x:G(x)−p=0x:G\\left( x \\right) - p = 0 fraction affected, pp.  Finding solution last equation referred finding root(s) function G(x)G\\left( x \\right) , made clear figure , finding zero-crossing function G(x)G\\left( x \\right) case p=0.2p=0.2.  R finding roots x:G(x)−p=0x:G\\left( x \\right) - p = 0 achieved using uniroot() function. Help uniroot function can found ","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"where-do-the-model-averaged-weights-come-from","dir":"Articles","previous_headings":"","what":"Where do the model-averaged weights come from?","title":"Model Averaging SSDs","text":"little complex, although ’ll try provide non-mathematical explanation. interested going deeper, comprehensive treatment can found (Burnham Anderson 2002) (Fletcher 2018).  time, ’ll look fitting gamma, lognormal, pareto distribution sample data: adequacy (otherwise) fitted model can assessed using variety numerical measures known goodness--fit GoF statistics. invariably based measure discrepancy emprical data hypothesized model. Common GoF statistics used test whether hypothesis specified theoretical probability distribution plausible given data set include: Kolmogorov-Smirnov test; Anderson-Darling test; Shapiro-Wilk test;Cramer-von Mises test. Cramer-von Mises test good choice readily performed using cvm.test() function goftest package R follows: output using level significance p=0.05p = 0.05, see none distributions implausible. However, forced choose just one distribution, choose Pareto distribution (smaller values omega2max statistic better). However, mean gamma lognormal distributions value describing data. can see plot , fact gamma lognormal distributions reasonable job range toxicity values. use Pareto may questionable choice given truncated 0.18 (minimum value toxicity data). Empirical cdf (black); lognormal (green); gamma (blue); Pareto (red) earlier example, might expect find better fitting distribution combining three distributions using weighted SSD. issue face now choose weights reflect relative fits three distributions? Like tests statistical significance, p-value computed value relevant test statistic - case, value omega2max test statistic. particular test, ’s case smaller better. output see omega2max values 0.3440.344 gamma distribution, 0.3280.328 lognormal distribution, 0.3140.314 Pareto distribution. might somewhat naively compute relative weights :w1=0.344−1(0.344−1+0.328−1+0.314−1)=0.318{w_1} = \\frac{{{{0.344}^{ - 1}}}}{{\\left( {{{0.344}^{ - 1}} + {{0.328}^{ - 1}} + {{0.314}^{ - 1}}} \\right)}} = 0.318         w2=0.328−1(0.344−1+0.328−1+0.314−1)=0.333{w_2} = \\frac{{{{0.328}^{ - 1}}}}{{\\left( {{{0.344}^{ - 1}} + {{0.328}^{ - 1}} + {{0.314}^{ - 1}}} \\right)}} = 0.333     w3=0.314−1(0.344−1+0.328−1+0.314−1)=0.349{w_3} = \\frac{{{{0.314}^{ - 1}}}}{{\\left( {{{0.344}^{ - 1}} + {{0.328}^{ - 1}} + {{0.314}^{ - 1}}} \\right)}} = 0.349    (use reciprocals since smaller values omega2max represent better fits). seen shortly - incorrect. However, based simplistic measure discrepancy observed hypothesized distributions, omega2max statistic fairly ‘blunt instrument’ grounding information theory basis determining weights seek.  likelihood three distributions can computed R follows: AIC values readily follow:  omega2max statistic, smaller values AIC better. Thus, comparison AIC values gives ranking distributional fits (best worst) : Pareto > lognormal > gamma","code":"#>  [1] 1.73 0.57 0.33 0.28 0.30 0.29 2.15 0.80 0.76 0.54 0.42 0.83 0.21 0.18 0.59 dat <- data.frame(Conc = c(1.73, 0.57, 0.33, 0.28, 0.3, 0.29, 2.15, 0.8, 0.76, 0.54, 0.42, 0.83, 0.21, 0.18, 0.59)) library(goftest) library(EnvStats) # this is required for the Pareto cdf (ppareto)  # Examine the fit for the gamma distribution (NB: parameters estimated from the data) cvm.test(dat$Conc, null = \"pgamma\", shape = 2.0591977, scale = 0.3231032, estimated = TRUE)  # Examine the fit for the lognormal distribution (NB: parameters estimated from the data) cvm.test(dat$Conc, null = \"plnorm\", meanlog = -0.6695120, sd = 0.7199573, estimated = TRUE)  # Examine the fit for the Pareto distribution (NB: parameters estimated from the data) cvm.test(dat$Conc, null = \"ppareto\", location = 0.1800000, shape = 0.9566756, estimated = TRUE) Cramer-von Mises test of goodness-of-fit     Braun's adjustment using 4 groups     Null hypothesis: Gamma distribution     with parameters shape = 2.0591977, scale = 0.3231032     Parameters assumed to have been estimated from data  data:  dat$Conc omega2max = 0.34389, p-value = 0.3404       Cramer-von Mises test of goodness-of-fit     Braun's adjustment using 4 groups     Null hypothesis: log-normal distribution     with parameter meanlog = -0.669512     Parameters assumed to have been estimated from data  data:  dat$Conc omega2max = 0.32845, p-value = 0.3719       Cramer-von Mises test of goodness-of-fit     Braun's adjustment using 4 groups     Null hypothesis: distribution ‘ppareto’     with parameters location = 0.18, shape = 0.9566756     Parameters assumed to have been estimated from data  data:  dat$Conc omega2max = 0.31391, p-value = 0.4015 sum(log(dgamma(dat$Conc, shape = 2.0591977, scale = 0.3231032))) #> [1] -7.020597 sum(log(dlnorm(dat$Conc, meanlog = -0.6695120, sdlog = 0.7199573))) #> [1] -5.812947 sum(log(EnvStats::dpareto(dat$Conc, location = 0.1800000, shape = 0.9566756))) #> [1] -5.621683 #> AIC for gamma distribution = 18.04119 #> AIC for lognormal distribution = 15.62589 #> AIC for Pareto distribution = 15.24337"},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"computing-model-weights-from-the-aic","dir":"Articles","previous_headings":"Where do the model-averaged weights come from?","what":"Computing model weights from the AIC","title":"Model Averaging SSDs","text":"simply provide formula computing model weights AIC values. detailed information can found . AIC ith distribution fitted data AICi=2ki−2ln(Li)AI{C_i} = 2{k_i} - 2\\ln \\left( {{L_i}} \\right) Li{L_i} ith likelihood ki{k_i} number parameters ith distribution. Next, form differences: Δi=AICi−AIC0{\\Delta _i} = AI{C_i} - AI{C_0} AIC0AI{C_0} AIC best-fitting model (.e.AIC0=mini{AICi}AI{C_0} = \\mathop {\\min }\\limits_i \\left\\{ {AI{C_i}} \\right\\} ). model-averaged weights wi{w_i} computed AIC Model Averaging Weights wi=exp{−12Δi}∑exp{−12Δi}{w}_{} = \\frac{\\exp \\left\\{ -\\frac{1}{2}{{\\Delta }_{}} \\right\\}}{\\sum{\\exp \\left\\{ -\\frac{1}{2}{{\\Delta }_{}} \\right\\}}}   model-averaged weights gamma, lognormal, Pareto distributions used previous example can computed ‘manually’ R follows: Finally, let’s look fitted model-averaged SSD: Empirical cdf (black) model-averaged fit (magenta) can seen figure , model-averaged fit provides good fit empirical data.","code":"dat <- c(1.73, 0.57, 0.33, 0.28, 0.3, 0.29, 2.15, 0.8, 0.76, 0.54, 0.42, 0.83, 0.21, 0.18, 0.59) aic <- NULL k <- 2 # number of parameters for each of the distributions   aic[1] <- 2 * k - 2 * sum(log(dgamma(dat, shape = 2.0591977, scale = 0.3231032))) # Gamma distribution  aic[2] <- 2 * k - 2 * sum(log(dlnorm(dat, meanlog = -0.6695120, sdlog = 0.7199573))) # lognormal distribution  aic[3] <- 2 * k - 2 * sum(log(EnvStats::dpareto(dat, location = 0.1800000, shape = 0.9566756))) # Pareto distribution  delta <- aic - min(aic) #  compute the delta values  aic.w <- exp(-0.5 * delta) aic.w <- round(aic.w / sum(aic.w), 4)  cat(   \" AIC weight for gamma distribution =\", aic.w[1], \"\\n\",   \"AIC weight for lognormal distribution =\", aic.w[2], \"\\n\",   \"AIC weight for pareto distribution =\", aic.w[3], \"\\n\" ) AIC weight for gamma distribution = 0.1191   AIC weight for lognormal distribution = 0.3985   AIC weight for pareto distribution = 0.4824"},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"correcting-for-distributions-having-differing-numbers-of-parameters","dir":"Articles","previous_headings":"Where do the model-averaged weights come from?","what":"Correcting for distributions having differing numbers of parameters","title":"Model Averaging SSDs","text":"deriving AIC, Akaike make certain, strong assumptions. addition, bias factor (2k2k term) derived theoretical considerations (mathematical expectation) relate infinite sample sizes. small sample sizes, AIC likely select models many parameters (.e models -fit). 1978, Sugiura proposed modification AIC address problem, although relied number assumptions. ‘correction’ AIC small samples (referred AICcAI{{C}_{c}}) Corrected Akaike Information Criterion (AICc) AICc=AIC+2k2+2kn−k−1{AIC}_{c} = AIC + \\frac{2k^2 + 2k}{n - k - 1} n sample size k number parameters.  clear formula AICcAI{{C}_{c}}   n≫kn\\gg k,    AICc≃AICAI{{C}_{c}}\\simeq AIC. issue sample size ubiquitous statistics, even ecotoxicology logistical practical limitations invariably mean dealing (pathologically) small sample sizes. hard fast rules constitutes appropriate sample size SSD modelling. However, Professor David Fox’s personal rule thumb works quite well : Sample Size Rule--Thumb SSD Modelling n≥5k+1{n \\geq 5k + 1} n sample size k number parameters.  Since common SSD models 2-parameter, aiming sample size least 11. 3-parameter models (like Burr III), minimum sample size 16 wanted fit mixture two, 2-parameter models (eg. logNormal-logNormal logLogistic-logLogistic) sample size least 26. Sadly, rarely case practice! Jurisdictional guidance material may specify minimum sample size requirements, adhered available relevant.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"model-averaging-in-ssdtools","dir":"Articles","previous_headings":"Where do the model-averaged weights come from?","what":"Model-Averaging in ssdtools","title":"Model Averaging SSDs","text":"Please see Getting started ssdtools vignette examples obtaining model-averaged HCx values predictions using ssdtools.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/model-averaging.html","id":"licensing","dir":"Articles","previous_headings":"","what":"Licensing","title":"Model Averaging SSDs","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2025 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with ssdtools","text":"ssdtools R package fit Species Sensitivity Distributions (SSDs) using Maximum Likelihood model averaging. SSDs cumulative probability distributions used estimate percent species affected /protected given concentration chemical. concentration affects 5% species referred 5% Hazard Concentration (HC5). equivalent 95% protection value (PC95). information SSDs reader referred Posthuma, Suter II, Traas (2001). ssdtools can handle left, right interval censored data two limitations. currently possible model average distributions number parameters confidence intervals can estimated using non-parametric (opposed parametric) bootstrapping. order use ssdtools need install R (see ) use Shiny app. shiny app includes user guide. vignette user manual R package.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"philosophy","dir":"Articles","previous_headings":"","what":"Philosophy","title":"Getting Started with ssdtools","text":"ssdtools provides key functionality required fit SSDs using Maximum Likelihood model averaging R. intended used conjunction tidyverse packages readr input data, tidyr dplyr group manipulate data ggplot2 (Wickham 2016) plot data. endeavors fulfill tidyverse manifesto.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"installing","dir":"Articles","previous_headings":"","what":"Installing","title":"Getting Started with ssdtools","text":"order install R (R Core Team 2024) appropriate binary users operating system downloaded CRAN installed. R installed, ssdtools package can installed (together tidyverse) executing following code R console ssdtools package (ggplot2 package) can loaded current session using","code":"install.packages(c(\"ssdtools\", \"tidyverse\")) library(ssdtools) library(ggplot2)"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"getting-help","dir":"Articles","previous_headings":"","what":"Getting Help","title":"Getting Started with ssdtools","text":"get additional information particular function just type ? followed name function R console. example ?ssd_gof brings R documentation ssdtools goodness fit function. information using R reader referred R Data Science (Wickham Grolemund 2016). discover bug ssdtools please file issue reprex (repeatable example) https://github.com/bcgov/ssdtools/issues.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"inputting-data","dir":"Articles","previous_headings":"","what":"Inputting Data","title":"Getting Started with ssdtools","text":"ssdtools package loaded next task input data. easy way save concentration data single chemical column called Conc comma separated file (.csv). row sensitivity concentration separate species. species /group information available can saved Species Group columns. .csv file can read R using following purposes manual use CCME dataset boron ssddata package.","code":"data <- read_csv(file = \"path/to/file.csv\") ssddata::ccme_boron #> # A tibble: 28 × 5 #>    Chemical Species                  Conc Group        Units #>    <chr>    <chr>                   <dbl> <fct>        <chr> #>  1 Boron    Oncorhynchus mykiss       2.1 Fish         mg/L  #>  2 Boron    Ictalurus punctatus       2.4 Fish         mg/L  #>  3 Boron    Micropterus salmoides     4.1 Fish         mg/L  #>  4 Boron    Brachydanio rerio        10   Fish         mg/L  #>  5 Boron    Carassius auratus        15.6 Fish         mg/L  #>  6 Boron    Pimephales promelas      18.3 Fish         mg/L  #>  7 Boron    Daphnia magna             6   Invertebrate mg/L  #>  8 Boron    Opercularia bimarginata  10   Invertebrate mg/L  #>  9 Boron    Ceriodaphnia dubia       13.4 Invertebrate mg/L  #> 10 Boron    Entosiphon sulcatum      15   Invertebrate mg/L  #> # ℹ 18 more rows"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"fitting-distributions","dir":"Articles","previous_headings":"","what":"Fitting Distributions","title":"Getting Started with ssdtools","text":"function ssd_fit_dists() inputs data frame fits one distributions. user can specify subset following 9 distributions. Please see distributions model averaging vignettes information regarding appropriate use distributions use model-averaged SSDs. using dists argument.","code":"ssd_dists_all() #> [1] \"burrIII3\"      \"gamma\"         \"gompertz\"      \"lgumbel\"       #> [5] \"llogis\"        \"llogis_llogis\" \"lnorm\"         \"lnorm_lnorm\"   #> [9] \"weibull\" fits <- ssd_fit_dists(ssddata::ccme_boron, dists = c(\"llogis\", \"lnorm\", \"gamma\"))"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"coefficients","dir":"Articles","previous_headings":"","what":"Coefficients","title":"Getting Started with ssdtools","text":"estimates various terms can extracted using tidyverse generic tidy function (base R generic coef function).","code":"tidy(fits) #> # A tibble: 6 × 4 #>   dist   term           est    se #>   <chr>  <chr>        <dbl> <dbl> #> 1 llogis locationlog  2.63  0.248 #> 2 llogis scalelog     0.740 0.114 #> 3 lnorm  meanlog      2.56  0.235 #> 4 lnorm  sdlog        1.24  0.166 #> 5 gamma  scale       25.1   7.64  #> 6 gamma  shape        0.950 0.223"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"plots","dir":"Articles","previous_headings":"","what":"Plots","title":"Getting Started with ssdtools","text":"generally informative plot fits using autoplot generic function (wrapper ssd_plot_cdf()). autoplot returns ggplot object can modified prior plotting. information see customising plots vignette.","code":"theme_set(theme_bw()) # set plot theme  autoplot(fits) +   ggtitle(\"Species Sensitivity Distributions for Boron\") +   scale_colour_ssd()"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"selecting-one-distribution","dir":"Articles","previous_headings":"","what":"Selecting One Distribution","title":"Getting Started with ssdtools","text":"Given multiple distributions user faced choosing “best” distribution (discussed averaging results weighted fit). ssd_gof() function returns three test statistics can used evaluate fit various distributions data. Anderson-Darling (ad) statistic, Kolmogorov-Smirnov (ks) statistic Cramer-von Mises (cvm) statistic three information criteria Akaike’s Information Criterion (AIC), Akaike’s Information Criterion corrected sample size (AICc) Bayesian Information Criterion (BIC) Note ssd_gof() called pvalue = TRUE p-values rather statistics returned ad, ks cvm tests. Following Burnham Anderson (2002) recommend AICc model selection. best predictive model lowest AICc (indicated model delta value 0 goodness fit table). current example best predictive model gamma distribution lnorm llogis distributions support. information advantages information theoretic approach context selecting SSDs reader referred Fox et al. (2021).","code":"ssd_gof(fits) #> Warning: ssd_gof(wt = FALSE) was deprecated in ssdtools 2.3.1. #> ℹ Please use ssd_gof(wt = TRUE) instead. #> ℹ Please set the `wt` argument to `ssd_gof()` to be TRUE which will rename the #>   'weight' column to 'wt' and then update your downstream code accordingly. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> # A tibble: 3 × 14 #>   dist   npars  nobs log_lik   aic  aicc delta weight   bic    ad     ks    cvm #>   <chr>  <int> <int>   <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl> #> 1 llogis     2    28   -119.  241.  241.  3.38  0.11   244. 0.487 0.0994 0.0595 #> 2 lnorm      2    28   -118.  239.  240.  1.40  0.296  242. 0.507 0.107  0.0703 #> 3 gamma      2    28   -117.  238.  238.  0     0.595  240. 0.440 0.117  0.0554 #> # ℹ 2 more variables: at_bound <lgl>, computable <lgl>"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"averaging-multiple-distributions","dir":"Articles","previous_headings":"","what":"Averaging Multiple Distributions","title":"Getting Started with ssdtools","text":"Often distributions fit data almost well best distribution evidenced delta values < 2 (Burnham Anderson 2002). general, recommended approach estimate average fit based relative weights distributions (Burnham Anderson 2002). AICc based weights indicated weight column goodness fit table. detailed introduction model averaging can found Model averaging vignette. discussion recommended set default distributions can found Distributions vignette.","code":""},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"estimating-the-fit","dir":"Articles","previous_headings":"","what":"Estimating the Fit","title":"Getting Started with ssdtools","text":"predict function can used generate model-averaged estimates (average = FALSE estimates distribution individual) bootstrapping. Model averaging based AICc unless data censored case AICc undefined. situation model averaging possible distributions number parameters (AIC can used compare models). resultant object data frame estimated concentration (est) standard error (se) lower (lcl) upper (ucl) 95% confidence limits (CLs) percent species affected (percent). object includes number bootstraps (nboot) data sets generated well proportion data sets successfully fitted (pboot). data frame estimates can plotted together original data using ssd_plot() function summarize analysis. returned object ggplot object can customized prior plotting.  plot model-averaged 95% confidence interval indicated shaded band model-averaged 5%/95% Hazard/Protection Concentration (HC5/ PC95) dotted line. Hazard/Protection concentrations discussed .","code":"withr::with_seed(99, {   boron_pred <- predict(fits, ci = TRUE) }) boron_pred #> # A tibble: 99 × 11 #>    dist    proportion   est    se    lcl   ucl    wt method  nboot pboot samples #>    <chr>        <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <chr>   <dbl> <dbl> <I<lis> #>  1 average       0.01 0.267 0.402 0.0419  1.53     1 parame…  1000     1 <dbl>   #>  2 average       0.02 0.531 0.518 0.110   2.03     1 parame…  1000     1 <dbl>   #>  3 average       0.03 0.783 0.615 0.198   2.50     1 parame…  1000     1 <dbl>   #>  4 average       0.04 1.02  0.701 0.300   2.89     1 parame…  1000     1 <dbl>   #>  5 average       0.05 1.26  0.782 0.407   3.29     1 parame…  1000     1 <dbl>   #>  6 average       0.06 1.48  0.859 0.520   3.72     1 parame…  1000     1 <dbl>   #>  7 average       0.07 1.71  0.934 0.645   4.16     1 parame…  1000     1 <dbl>   #>  8 average       0.08 1.93  1.01  0.769   4.58     1 parame…  1000     1 <dbl>   #>  9 average       0.09 2.16  1.08  0.896   4.95     1 parame…  1000     1 <dbl>   #> 10 average       0.1  2.38  1.15  1.03    5.33     1 parame…  1000     1 <dbl>   #> # ℹ 89 more rows ssd_plot(ssddata::ccme_boron, boron_pred,   color = \"Group\", label = \"Species\",   xlab = \"Concentration (mg/L)\", ribbon = TRUE ) +   expand_limits(x = 5000) + # to ensure the species labels fit   ggtitle(\"Species Sensitivity for Boron\") +   scale_colour_ssd()"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"hazardprotection-concentrations","dir":"Articles","previous_headings":"","what":"Hazard/Protection Concentrations","title":"Getting Started with ssdtools","text":"5% hazard concentration (HC5) concentration affects 5% species tested. equivalent 95% protection concentration protects 95% species (PC95). hazard protection concentrations directly interchangeable, terminology depends simply user preference. hazard/protection concentrations can obtained using ssd_hc() function, can used obtain desired percentage value. fitted SSD can also used determine percentage species protected given concentration using ssd_hp().","code":"withr::with_seed(99, {   boron_hc5 <- ssd_hc(fits, proportion = 0.05, ci = TRUE)   print(boron_hc5)   boron_pc <- ssd_hp(fits, conc = boron_hc5$est, ci = TRUE)   print(boron_pc) }) #> # A tibble: 1 × 15 #>   dist    proportion   est    se   lcl   ucl    wt level est_method ci_method    #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>        #> 1 average       0.05  1.32 0.850 0.370  3.67     1  0.95 multi      weighted_sa… #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list> #> Warning: ssd_hp(proportion = FALSE) was deprecated in ssdtools 2.3.1. #> ℹ Please use ssd_hp(proportion = TRUE) instead. #> ℹ Please set the `proportion` argument to `ssd_hp()` to be TRUE which will #>   cause it to return hazard proportions instead of percentages then update your #>   downstream code accordingly. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. #> # A tibble: 1 × 15 #>   dist     conc   est    se   lcl   ucl    wt level est_method ci_method        #>   <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>            #> 1 average  1.32     5  3.23 0.587  12.8     1  0.95 multi      weighted_samples #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"censored-data","dir":"Articles","previous_headings":"Hazard/Protection Concentrations","what":"Censored Data","title":"Getting Started with ssdtools","text":"Censored data lower /upper limit known particular species. right argument ssd_fit_dists() different left argument data considered censored. Let’s produce left censored data. sample size n undefined censored data, AICc calculated. However, models number parameters, AIC delta values identical AICc. reason, ssdtools permits model averaging censored data distributions number parameters. can call default two parameter models using ssd_dists_bcanz(n = 2). less goodness--fit statistics available fits censored data (currently just AIC BIC). model-averaged predictions calculated using AIC confidence intervals can currently generated censored data using non-parametric bootstrapping. horizontal lines plot indicate censoring (range possible values).","code":"boron_censored <- ssddata::ccme_boron |>   dplyr::mutate(left = Conc, right = Conc)  boron_censored$left[c(3, 6, 8)] <- NA dists <- ssd_fit_dists(boron_censored,   dists = ssd_dists_bcanz(n = 2),   left = \"left\", right = \"right\" ) ssd_gof(dists) #> # A tibble: 5 × 14 #>   dist    npars  nobs log_lik   aic  aicc delta weight   bic    ad    ks   cvm #>   <chr>   <int> <int>   <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 gamma       2    NA   -109.  222.    NA 0      0.376    NA    NA    NA    NA #> 2 lgumbel     2    NA   -112.  228.    NA 5.67   0.022    NA    NA    NA    NA #> 3 llogis      2    NA   -111.  226.    NA 3.70   0.059    NA    NA    NA    NA #> 4 lnorm       2    NA   -110.  224.    NA 1.52   0.176    NA    NA    NA    NA #> 5 weibull     2    NA   -109.  222.    NA 0.046  0.367    NA    NA    NA    NA #> # ℹ 2 more variables: at_bound <lgl>, computable <lgl> ssd_hc(dists, average = FALSE) #> # A tibble: 5 × 15 #>   dist    proportion   est    se   lcl   ucl     wt level est_method ci_method  #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <chr>      <chr>      #> 1 gamma         0.05 0.674    NA    NA    NA 0.376   0.95 cdf        percentile #> 2 lgumbel       0.05 1.51     NA    NA    NA 0.0221  0.95 cdf        percentile #> 3 llogis        0.05 1.15     NA    NA    NA 0.0590  0.95 cdf        percentile #> 4 lnorm         0.05 1.32     NA    NA    NA 0.176   0.95 cdf        percentile #> 5 weibull       0.05 0.752    NA    NA    NA 0.367   0.95 cdf        percentile #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list> ssd_hc(dists) #> # A tibble: 1 × 15 #>   dist    proportion   est    se   lcl   ucl    wt level est_method ci_method    #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>        #> 1 average       0.05 0.859    NA    NA    NA     1  0.95 multi      weighted_sa… #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list> withr::with_seed(99, {   pred <- predict(dists, ci = TRUE, parametric = FALSE) })  ssd_plot(boron_censored, pred,   left = \"left\", right = \"right\",   xlab = \"Concentration (mg/L)\" )"},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/articles/ssdtools.html","id":"licensing","dir":"Articles","previous_headings":"","what":"Licensing","title":"Getting Started with ssdtools","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2025 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":"https://bcgov.github.io/ssdtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joe Thorley. Author, maintainer. Rebecca Fisher. Author. David Fox. Author. Carl Schwarz. Author. Angeline Tillmanns. Contributor. Seb Dalgarno. Contributor. Kathleen McTavish. Contributor. Heather Thompson. Contributor. Doug Spry. Contributor. Rick van Dam. Contributor. Graham Batley. Contributor. Ali Azizishirazi. Contributor. Nadine Hussein. Contributor. Sarah Lyons. Contributor. Duncan Kennedy. Contributor. Stephanie Hazlitt. Contributor. Hadley Wickham. Contributor. Sergio Ibarra Espinosa. Contributor. Andy Teucher. Contributor. Emilie Doussantousse. Contributor. Nan-Hung Hsieh. Contributor. Florencia D'Andrea. Contributor. Eduard Szöcs. Contributor. Province British Columbia. Funder, copyright holder. Environment Climate Change Canada. Funder, copyright holder. Australian Government Department Climate Change, Energy, Environment Water. Funder, copyright holder.","code":""},{"path":"https://bcgov.github.io/ssdtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thorley J, Fisher R, Fox D, Schwarz C (2025). “ssdtools v2: R package fit Species Sensitivity Distributions.” Journal Open Source Software, 10(105), 7492. doi:10.21105/joss.07492.","code":"@Article{,   title = {ssdtools v2: An R package to fit Species Sensitivity Distributions},   author = {Joe Thorley and Rebecca Fisher and David Fox and Carl Schwarz},   year = {2025},   journal = {Journal of Open Source Software},   volume = {10},   number = {105},   pages = {7492},   doi = {10.21105/joss.07492}, }"},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"ssdtools-","dir":"","previous_headings":"","what":"Species Sensitivity Distributions","title":"Species Sensitivity Distributions","text":"ssdtools R package fit plot Species Sensitivity Distributions (SSD). SSDs cumulative probability distributions fitted toxicity concentrations different species described Posthuma et al. (2001). ssdtools package uses Maximum Likelihood fit distributions log-normal, log-logistic, log-Gumbel (also known inverse Weibull), gamma, Weibull log-normal log-normal mixture. Multiple distributions can averaged using Akaike Information Criteria. Confidence intervals hazard concentrations proportions produced bootstrapping. ssdtools can handle censored data two limitations. currently possible model average distributions number parameters confidence intervals can estimated using non-parametric (opposed parametric) bootstrapping.","code":""},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Species Sensitivity Distributions","text":"dependency ssddata provides example data sets several chemicals including Boron. ECOTOX Knowledgebase another source toxicity concentrations 12,000 chemicals. six default distributions fit using ssd_fit_dists() can quickly plotted using autoplot  goodness fit can assessed using ssd_gof model-averaged 5% hazard concentration estimated (bootstrapping get confidence intervals) using ssd_hc. Model-averaged predictions complete confidence intervals can also estimated parametric bootstrapping using stats generic predict. predictions can plotted together original data using ssd_plot.","code":"library(ssdtools) ssddata::ccme_boron #> # A tibble: 28 × 5 #>    Chemical Species                  Conc Group        Units #>    <chr>    <chr>                   <dbl> <fct>        <chr> #>  1 Boron    Oncorhynchus mykiss       2.1 Fish         mg/L  #>  2 Boron    Ictalurus punctatus       2.4 Fish         mg/L  #>  3 Boron    Micropterus salmoides     4.1 Fish         mg/L  #>  4 Boron    Brachydanio rerio        10   Fish         mg/L  #>  5 Boron    Carassius auratus        15.6 Fish         mg/L  #>  6 Boron    Pimephales promelas      18.3 Fish         mg/L  #>  7 Boron    Daphnia magna             6   Invertebrate mg/L  #>  8 Boron    Opercularia bimarginata  10   Invertebrate mg/L  #>  9 Boron    Ceriodaphnia dubia       13.4 Invertebrate mg/L  #> 10 Boron    Entosiphon sulcatum      15   Invertebrate mg/L  #> # ℹ 18 more rows fits <- ssd_fit_dists(ssddata::ccme_boron) autoplot(fits) ssd_gof(fits) #> # A tibble: 6 × 14 #>   dist    npars  nobs log_lik   aic  aicc delta weight   bic    ad     ks    cvm #>   <chr>   <int> <int>   <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl> #> 1 gamma       2    28   -117.  238.  238. 0.005  0.357  240. 0.440 0.117  0.0554 #> 2 lgumbel     2    28   -120.  244.  245. 6.56   0.013  247. 0.829 0.158  0.134  #> 3 llogis      2    28   -119.  241.  241. 3.39   0.066  244. 0.487 0.0994 0.0595 #> 4 lnorm       2    28   -118.  239.  240. 1.40   0.177  242. 0.507 0.107  0.0703 #> 5 lnorm_…     5    28   -115.  240.  243. 4.98   0.03   247. 0.320 0.116  0.0414 #> 6 weibull     2    28   -117.  238.  238. 0      0.357  240. 0.434 0.117  0.0542 #> # ℹ 2 more variables: at_bound <lgl>, computable <lgl> withr::with_seed(99, {   hc5 <- ssd_hc(fits, ci = TRUE) }) print(hc5) #> # A tibble: 1 × 13 #>   dist    proportion   est    se   lcl   ucl    wt est_method ci_method   method #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>       <chr>  #> 1 average       0.05  1.26 0.782 0.407  3.29     1 multi      weighted_s… param… #> # ℹ 3 more variables: nboot <dbl>, pboot <dbl>, samples <I<list>> boron_pred <- predict(fits, ci = TRUE) library(ggplot2)  theme_set(theme_bw())  ssd_plot(ssddata::ccme_boron, boron_pred,   shape = \"Group\", color = \"Group\", label = \"Species\",   xlab = \"Concentration (mg/L)\", ribbon = TRUE ) +   expand_limits(x = 3000) +   scale_colour_ssd()"},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Species Sensitivity Distributions","text":"Get started ssdtools https://bcgov.github.io/ssdtools/articles/ssdtools.html. shiny app allow non-R users interface ssdtools available https://github.com/bcgov/shinyssdtools. latest changes development version see NEWS file. recent developments SSD modeling including review existing software see: Fox, D.R., et al. 2021. Recent Developments Species Sensitivity Distribution Modeling. Environ Toxicol Chem 40(2): 293–308. https://doi.org/10.1002/etc.4925.","code":""},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Species Sensitivity Distributions","text":"","code":"To cite package 'ssdtools' in publications use:    Thorley J, Fisher R, Fox D, Schwarz C (2025). \"ssdtools v2: An R   package to fit Species Sensitivity Distributions.\" _Journal of Open   Source Software_, *10*(105), 7492. doi:10.21105/joss.07492   <https://doi.org/10.21105/joss.07492>.  A BibTeX entry for LaTeX users is    @Article{,     title = {ssdtools v2: An R package to fit Species Sensitivity Distributions},     author = {Joe Thorley and Rebecca Fisher and David Fox and Carl Schwarz},     year = {2025},     journal = {Journal of Open Source Software},     volume = {10},     number = {105},     pages = {7492},     doi = {10.21105/joss.07492},   }"},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"release","dir":"","previous_headings":"Installation","what":"Release","title":"Species Sensitivity Distributions","text":"install latest release version CRAN. website release version https://bcgov.github.io/ssdtools/.","code":"install.packages(\"ssdtools\")"},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"development","dir":"","previous_headings":"Installation","what":"Development","title":"Species Sensitivity Distributions","text":"install development version GitHub r-universe. website development version https://bcgov.github.io/ssdtools/dev/.","code":"# install.packages(\"remotes\") remotes::install_github(\"bcgov/ssdtools\") install.packages(\"ssdtools\", repos = c(\"https://bcgov.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"getting-help-or-reporting-an-issue","dir":"","previous_headings":"Installation","what":"Getting Help or Reporting an Issue","title":"Species Sensitivity Distributions","text":"report bugs/issues/feature requests, please file issue.","code":""},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"contribution","dir":"","previous_headings":"Installation","what":"Contribution","title":"Species Sensitivity Distributions","text":"like contribute package, please see CONTRIBUTING guidelines.","code":""},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"code-of-conduct","dir":"","previous_headings":"Installation","what":"Code of Conduct","title":"Species Sensitivity Distributions","text":"Please note ssdtools project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Species Sensitivity Distributions","text":"Posthuma, L., Suter II, G.W., Traas, T.P. 2001. Species Sensitivity Distributions Ecotoxicology. CRC Press.","code":""},{"path":"https://bcgov.github.io/ssdtools/index.html","id":"licensing","dir":"","previous_headings":"","what":"Licensing","title":"Species Sensitivity Distributions","text":"Copyright 2015-2023 Province British Columbia Copyright 2021 Environment Climate Change Canada Copyright 2023-2024 Australian Government Department Climate Change, Energy, Environment Water documentation released CC 4.0 License code released Apache License 2.0","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/augment.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Augmented Data from fitdists Object — augment.fitdists","title":"Augmented Data from fitdists Object — augment.fitdists","text":"Get tibble original data augmentation.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/augment.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augmented Data from fitdists Object — augment.fitdists","text":"","code":"# S3 method for class 'fitdists' augment(x, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/augment.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augmented Data from fitdists Object — augment.fitdists","text":"x object. ... Unused.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/augment.fitdists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augmented Data from fitdists Object — augment.fitdists","text":"tibble agumented data.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/augment.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Augmented Data from fitdists Object — augment.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) augment(fits) #> # A tibble: 28 × 5 #>    Chemical Species                  Conc Group        Units #>    <chr>    <chr>                   <dbl> <fct>        <chr> #>  1 Boron    Oncorhynchus mykiss       2.1 Fish         mg/L  #>  2 Boron    Ictalurus punctatus       2.4 Fish         mg/L  #>  3 Boron    Micropterus salmoides     4.1 Fish         mg/L  #>  4 Boron    Brachydanio rerio        10   Fish         mg/L  #>  5 Boron    Carassius auratus        15.6 Fish         mg/L  #>  6 Boron    Pimephales promelas      18.3 Fish         mg/L  #>  7 Boron    Daphnia magna             6   Invertebrate mg/L  #>  8 Boron    Opercularia bimarginata  10   Invertebrate mg/L  #>  9 Boron    Ceriodaphnia dubia       13.4 Invertebrate mg/L  #> 10 Boron    Entosiphon sulcatum      15   Invertebrate mg/L  #> # ℹ 18 more rows"},{"path":"https://bcgov.github.io/ssdtools/reference/autoplot.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a fitdists Object — autoplot.fitdists","title":"Plot a fitdists Object — autoplot.fitdists","text":"wrapper ssd_plot_cdf().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/autoplot.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a fitdists Object — autoplot.fitdists","text":"","code":"# S3 method for class 'fitdists' autoplot(object, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/autoplot.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a fitdists Object — autoplot.fitdists","text":"object object. ... Unused.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/autoplot.fitdists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a fitdists Object — autoplot.fitdists","text":"ggplot object.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/autoplot.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a fitdists Object — autoplot.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) autoplot(fits)"},{"path":"https://bcgov.github.io/ssdtools/reference/boron_pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Averaged Predictions for CCME Boron Data — boron_pred","title":"Model Averaged Predictions for CCME Boron Data — boron_pred","text":"data frame predictions based 1,000 bootstrap iterations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/boron_pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Averaged Predictions for CCME Boron Data — boron_pred","text":"","code":"boron_pred"},{"path":"https://bcgov.github.io/ssdtools/reference/boron_pred.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Model Averaged Predictions for CCME Boron Data — boron_pred","text":"object class tbl_df (inherits tbl, data.frame) 99 rows 11 columns.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/boron_pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model Averaged Predictions for CCME Boron Data — boron_pred","text":"proportion proportion species affected (int). est estimated concentration (dbl). se standard error estimate (dbl). lcl lower confidence limit (dbl). se upper confidence limit (dbl). dist distribution (chr).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/boron_pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Averaged Predictions for CCME Boron Data — boron_pred","text":"","code":"if (FALSE) { # \\dontrun{ fits <- ssd_fit_dists(ssddata::ccme_boron) withr::with_seed(50, {   boron_pred <- predict(fits, ci = TRUE) }) head(boron_pred) } # }"},{"path":"https://bcgov.github.io/ssdtools/reference/coef.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a fitdists Object into a Tidy Tibble — coef.fitdists","title":"Turn a fitdists Object into a Tidy Tibble — coef.fitdists","text":"wrapper tidy.fitdists().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/coef.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a fitdists Object into a Tidy Tibble — coef.fitdists","text":"","code":"# S3 method for class 'fitdists' coef(object, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/coef.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a fitdists Object into a Tidy Tibble — coef.fitdists","text":"object object. ... Unused.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/coef.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a fitdists Object into a Tidy Tibble — coef.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) coef(fits) #> # A tibble: 15 × 4 #>    dist        term           est    se #>    <chr>       <chr>        <dbl> <dbl> #>  1 gamma       scale       25.1   7.64  #>  2 gamma       shape        0.950 0.223 #>  3 lgumbel     locationlog  1.92  0.247 #>  4 lgumbel     scalelog     1.23  0.173 #>  5 llogis      locationlog  2.63  0.248 #>  6 llogis      scalelog     0.740 0.114 #>  7 lnorm       meanlog      2.56  0.235 #>  8 lnorm       sdlog        1.24  0.166 #>  9 lnorm_lnorm meanlog1     0.949 0.318 #> 10 lnorm_lnorm meanlog2     3.20  0.253 #> 11 lnorm_lnorm pmix         0.284 0.123 #> 12 lnorm_lnorm sdlog1       0.554 0.212 #> 13 lnorm_lnorm sdlog2       0.769 0.194 #> 14 weibull     scale       23.5   4.86  #> 15 weibull     shape        0.966 0.145"},{"path":"https://bcgov.github.io/ssdtools/reference/comma_signif.html","id":null,"dir":"Reference","previous_headings":"","what":"Comma and Significance Formatter  — comma_signif","title":"Comma and Significance Formatter  — comma_signif","text":"Deprecated ssd_label_comma()","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/comma_signif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Comma and Significance Formatter  — comma_signif","text":"","code":"comma_signif(x, digits = 3, ..., big.mark = \",\")"},{"path":"https://bcgov.github.io/ssdtools/reference/comma_signif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Comma and Significance Formatter  — comma_signif","text":"x numeric vector format. digits whole number specifying number significant figures. ... Unused. big.mark string specifying used every 3 digits separate thousands x-axis.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/comma_signif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Comma and Significance Formatter  — comma_signif","text":"character vector.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/comma_signif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Comma and Significance Formatter  — comma_signif","text":"","code":"if (FALSE) { # \\dontrun{ comma_signif(c(0.1, 1, 10, 1000, 10000)) } # }"},{"path":"https://bcgov.github.io/ssdtools/reference/dgompertz.html","id":null,"dir":"Reference","previous_headings":"","what":"Gompertz Probability Density  — dgompertz","title":"Gompertz Probability Density  — dgompertz","text":"Gompertz Probability Density","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/dgompertz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gompertz Probability Density  — dgompertz","text":"","code":"dgompertz(x, llocation = 0, lshape = 0, log = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/dgompertz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gompertz Probability Density  — dgompertz","text":"x numeric vector values. llocation location parameter log scale. lshape shape parameter log scale. log logical; TRUE, probabilities p given log(p).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/dgompertz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gompertz Probability Density  — dgompertz","text":"numeric vector.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/dist_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Distribution Data — dist_data","title":"Distribution Data — dist_data","text":"data frame information implemented distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/dist_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Distribution Data — dist_data","text":"","code":"dist_data"},{"path":"https://bcgov.github.io/ssdtools/reference/dist_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Distribution Data — dist_data","text":"object class tbl_df (inherits tbl, data.frame) 10 rows 6 columns.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/dist_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distribution Data — dist_data","text":"dist distribution (chr). bcanz Whether distribution belongs set distributions approved BC, Canada, Australia New Zealand official guidelines (flag). tails Whether distribution tails (flag). npars number parameters (int). valid Whether distribution valid likelihood allows fit distributions modeling averaging (flag). bound Whether one parameters boundaries (flag).","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/dist_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distribution Data — dist_data","text":"","code":"dist_data #> # A tibble: 10 × 6 #>    dist          bcanz tails npars valid bound #>    <chr>         <lgl> <lgl> <int> <lgl> <lgl> #>  1 burrIII3      FALSE TRUE      3 TRUE  TRUE  #>  2 gamma         TRUE  TRUE      2 TRUE  FALSE #>  3 gompertz      FALSE TRUE      2 TRUE  FALSE #>  4 invpareto     FALSE FALSE     2 FALSE FALSE #>  5 lgumbel       TRUE  TRUE      2 TRUE  FALSE #>  6 llogis        TRUE  TRUE      2 TRUE  FALSE #>  7 llogis_llogis FALSE TRUE      5 TRUE  TRUE  #>  8 lnorm         TRUE  TRUE      2 TRUE  FALSE #>  9 lnorm_lnorm   TRUE  TRUE      5 TRUE  TRUE  #> 10 weibull       TRUE  TRUE      2 TRUE  FALSE"},{"path":"https://bcgov.github.io/ssdtools/reference/dlgumbel.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-Gumbel (Inverse Weibull) Probability Density  — dlgumbel","title":"Log-Gumbel (Inverse Weibull) Probability Density  — dlgumbel","text":"Log-Gumbel (Inverse Weibull) Probability Density","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/dlgumbel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-Gumbel (Inverse Weibull) Probability Density  — dlgumbel","text":"","code":"dlgumbel(x, locationlog = 0, scalelog = 1, log = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/dlgumbel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-Gumbel (Inverse Weibull) Probability Density  — dlgumbel","text":"x numeric vector values. locationlog location log scale parameter. scalelog scale log scale parameter. log logical; TRUE, probabilities p given log(p).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/dlgumbel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-Gumbel (Inverse Weibull) Probability Density  — dlgumbel","text":"numeric vector.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/estimates.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates for fitdists Object — estimates.fitdists","title":"Estimates for fitdists Object — estimates.fitdists","text":"Gets named list estimated weights parameters.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/estimates.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates for fitdists Object — estimates.fitdists","text":"","code":"# S3 method for class 'fitdists' estimates(x, all_estimates = FALSE, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/estimates.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates for fitdists Object — estimates.fitdists","text":"x object. all_estimates flag specifying whether calculate estimates implemented distributions. ... Unused.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/estimates.fitdists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates for fitdists Object — estimates.fitdists","text":"named list estimates.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/estimates.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimates for fitdists Object — estimates.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) estimates(fits) #> $gamma.weight #> [1] 0.3565737 #>  #> $gamma.scale #> [1] 25.12683 #>  #> $gamma.shape #> [1] 0.9501795 #>  #> $lgumbel.weight #> [1] 0.01344657 #>  #> $lgumbel.locationlog #> [1] 1.922631 #>  #> $lgumbel.scalelog #> [1] 1.232239 #>  #> $llogis.weight #> [1] 0.06564519 #>  #> $llogis.locationlog #> [1] 2.626276 #>  #> $llogis.scalelog #> [1] 0.7404264 #>  #> $lnorm.weight #> [1] 0.1772362 #>  #> $lnorm.meanlog #> [1] 2.561646 #>  #> $lnorm.sdlog #> [1] 1.241541 #>  #> $lnorm_lnorm.weight #> [1] 0.02962678 #>  #> $lnorm_lnorm.meanlog1 #> [1] 0.9494834 #>  #> $lnorm_lnorm.meanlog2 #> [1] 3.201021 #>  #> $lnorm_lnorm.pmix #> [1] 0.2839679 #>  #> $lnorm_lnorm.sdlog1 #> [1] 0.5544649 #>  #> $lnorm_lnorm.sdlog2 #> [1] 0.7688617 #>  #> $weibull.weight #> [1] 0.3574716 #>  #> $weibull.scale #> [1] 23.51397 #>  #> $weibull.shape #> [1] 0.9660997 #>"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_hcintersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Sensitivity Hazard Concentration Intersection — geom_hcintersect","title":"Species Sensitivity Hazard Concentration Intersection — geom_hcintersect","text":"Plots intersection xintercept yintercept value.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/geom_hcintersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Sensitivity Hazard Concentration Intersection — geom_hcintersect","text":"","code":"geom_hcintersect(   mapping = NULL,   data = NULL,   ...,   xintercept,   yintercept,   na.rm = FALSE,   show.legend = NA )"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_hcintersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species Sensitivity Hazard Concentration Intersection — geom_hcintersect","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. xintercept x-value intersect. yintercept y-value intersect. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/geom_hcintersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Sensitivity Hazard Concentration Intersection — geom_hcintersect","text":"","code":"ggplot2::ggplot(ssddata::ccme_boron, ggplot2::aes(x = Conc)) +   geom_ssdpoint() +   geom_hcintersect(xintercept = 1.5, yintercept = 0.05)"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssd.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Sensitivity Data Points  — geom_ssd","title":"Species Sensitivity Data Points  — geom_ssd","text":"Deprecated geom_ssdpoint().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Sensitivity Data Points  — geom_ssd","text":"","code":"geom_ssd(   mapping = NULL,   data = NULL,   stat = \"ssdpoint\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species Sensitivity Data Points  — geom_ssd","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Sensitivity Data Points — geom_ssdpoint","title":"Species Sensitivity Data Points — geom_ssdpoint","text":"Uses empirical cumulative distribution create scatterplot points x.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Sensitivity Data Points — geom_ssdpoint","text":"","code":"geom_ssdpoint(   mapping = NULL,   data = NULL,   stat = \"ssdpoint\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species Sensitivity Data Points — geom_ssdpoint","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdpoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Sensitivity Data Points — geom_ssdpoint","text":"","code":"ggplot2::ggplot(ssddata::ccme_boron, ggplot2::aes(x = Conc)) +   geom_ssdpoint()"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdsegment.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Sensitivity Censored Segments — geom_ssdsegment","title":"Species Sensitivity Censored Segments — geom_ssdsegment","text":"Uses empirical cumulative distribution draw lines points x xend.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdsegment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Sensitivity Censored Segments — geom_ssdsegment","text":"","code":"geom_ssdsegment(   mapping = NULL,   data = NULL,   stat = \"ssdsegment\",   position = \"identity\",   ...,   arrow = NULL,   arrow.fill = NULL,   lineend = \"butt\",   linejoin = \"round\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdsegment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species Sensitivity Censored Segments — geom_ssdsegment","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. arrow specification arrow heads, created grid::arrow(). arrow.fill fill colour use arrow head (closed). NULL means use colour aesthetic. lineend Line end style (round, butt, square). linejoin Line join style (round, mitre, bevel). na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/geom_ssdsegment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Sensitivity Censored Segments — geom_ssdsegment","text":"","code":"ggplot2::ggplot(ssddata::ccme_boron, ggplot2::aes(x = Conc, xend = Conc * 2)) +   geom_ssdsegment()"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_xribbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Ribbon on X-Axis — geom_xribbon","title":"Ribbon on X-Axis — geom_xribbon","text":"Plots x interval defined xmin xmax.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/geom_xribbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ribbon on X-Axis — geom_xribbon","text":"","code":"geom_xribbon(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://bcgov.github.io/ssdtools/reference/geom_xribbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ribbon on X-Axis — geom_xribbon","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer. using geom_*() function construct layer, stat argument can used override default coupling geoms stats. stat argument accepts following: Stat ggproto subclass, example StatCount. string naming stat. give stat string, strip function name stat_ prefix. example, use stat_count(), give stat \"count\". information ways specify stat, see layer stat documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/geom_xribbon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ribbon on X-Axis — geom_xribbon","text":"","code":"gp <- ggplot2::ggplot(boron_pred) +   geom_xribbon(ggplot2::aes(xmin = lcl, xmax = ucl, y = proportion))"},{"path":"https://bcgov.github.io/ssdtools/reference/glance.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a tibble summarizing each distribution — glance.fitdists","title":"Get a tibble summarizing each distribution — glance.fitdists","text":"Gets tibble single row distribution.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/glance.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a tibble summarizing each distribution — glance.fitdists","text":"","code":"# S3 method for class 'fitdists' glance(x, ..., wt = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/glance.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a tibble summarizing each distribution — glance.fitdists","text":"x object. ... Unused. wt flag specifying whether return Akaike weight \"wt\" instead \"weight\".","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/glance.fitdists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a tibble summarizing each distribution — glance.fitdists","text":"tidy tibble distributions.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/glance.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get a tibble summarizing each distribution — glance.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) glance(fits, wt = TRUE) #> # A tibble: 6 × 8 #>   dist        npars  nobs log_lik   aic  aicc   delta     wt #>   <chr>       <int> <int>   <dbl> <dbl> <dbl>   <dbl>  <dbl> #> 1 gamma           2    28   -117.  238.  238. 0.00503 0.357  #> 2 lgumbel         2    28   -120.  244.  245. 6.56    0.0134 #> 3 llogis          2    28   -119.  241.  241. 3.39    0.0656 #> 4 lnorm           2    28   -118.  239.  240. 1.40    0.177  #> 5 lnorm_lnorm     5    28   -115.  240.  243. 4.98    0.0296 #> 6 weibull         2    28   -117.  238.  238. 0       0.357"},{"path":"https://bcgov.github.io/ssdtools/reference/is.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Is fitdists Object — is.fitdists","title":"Is fitdists Object — is.fitdists","text":"Tests whether x fitdists Object.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/is.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is fitdists Object — is.fitdists","text":"","code":"is.fitdists(x)"},{"path":"https://bcgov.github.io/ssdtools/reference/is.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is fitdists Object — is.fitdists","text":"x object.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/is.fitdists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is fitdists Object — is.fitdists","text":"flag specifying whether x fitdists Object.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/is.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is fitdists Object — is.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) is.fitdists(fits) #> [1] TRUE"},{"path":"https://bcgov.github.io/ssdtools/reference/is_censored.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Censored  — is_censored","title":"Is Censored  — is_censored","text":"Deprecated ssd_is_censored().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/is_censored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Censored  — is_censored","text":"","code":"is_censored(x)"},{"path":"https://bcgov.github.io/ssdtools/reference/is_censored.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Censored  — is_censored","text":"x fitdists object.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/is_censored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Censored  — is_censored","text":"flag indicating data censored.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/params.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter Descriptions for ssdtools Functions — params","title":"Parameter Descriptions for ssdtools Functions — params","text":"Parameter Descriptions ssdtools Functions","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter Descriptions for ssdtools Functions — params","text":"... Unused. add_x value add label x values (multiplying shift_x). flag specifying whether also return transformed parameters. all_dists flag specifying whether named distributions must fit successfully. all_estimates flag specifying whether calculate estimates implemented distributions. at_boundary_ok flag specifying whether model one parameters boundary considered converged (default = FALSE). average flag specifying whether provide model averaged values opposed value distribution. bcanz flag NULL specifying whether include distributions set approved BC, Canada, Australia New Zealand official guidelines. big.mark string specifying used every 3 digits separate thousands x-axis. breaks character vector bounds named non-negative numeric vector left right bounds uncensored missing (0 Inf) data terms orders magnitude relative extremes non-missing values. chk flag specifying whether check arguments. ci flag specifying whether estimate confidence intervals (bootstrapping). ci_method string specifying method use estimating standard error confidence limits bootstrap samples. Possible values include ci_method = \"multi_fixed\"  ci_method = \"multi_free\" generate bootstrap samples using model-averaged cumulative distribution function differ whether model weights fixed values original dataset re-estimated bootstrap sample dataset. value ci_method = \"weighted_samples\" takes bootstrap samples distribution proportional AICc based weights calculates confidence limits (SE) single set. value ci_method = \"weighted_arithmetic\" (ci_method = \"MACL\" soft-deprecated) included historical reasons takes weighted arithmetic mean confidence limits ci_method = MGCL included research paper takes weighted geometric mean confidence limits. values ci_method = \"MAW1\" ci_method = \"MAW2\" use two alternative equations Burnham Anderson model average weighted standard errors calculate confidence limits using Wald approach. Finally ci_method = \"arithmetic\" ci_method = \"geometric\" take weighted arithmetic geometric mean values bootstrap iteration across distributions calculate confidence limits (SE) single set samples. censoring numeric vector left right censoring values. color string column data color aesthetic. computable flag specifying whether return fits numerically computable standard errors. conc numeric vector concentrations calculate hazard proportions . control list control parameters passed stats::optim(). data data frame. delta non-negative number specifying maximum absolute AIC difference cutoff. Distributions absolute AIC difference greater delta excluded calculations. digits whole number specifying number significant figures. dists character vector distribution names. est_method string specifying whether estimate directly model-averaged cumulative distribution function (est_method = 'multi') take arithmetic mean estimates individual cumulative distribution functions weighted AICc derived weights  (est_method = 'arithmetic') use geometric mean instead (est_method = 'geometric'). fitdists object class fitdists. hc value 0 1 indicating proportion hazard concentration (NULL). hc_value number hazard concentration value offset. label string column data labels. label_size number size labels. left string column data concentrations. level number 0 1 confidence level interval. linecolor string column pred use line color. linetype string column pred use linetype. llocation location parameter log scale. location location parameter. locationlog location log scale parameter. locationlog1 locationlog1 parameter. locationlog2 locationlog2 parameter. log logical; TRUE, probabilities p given log(p). log.p logical; TRUE, probabilities p given log(p). lscale scale parameter log scale. lshape shape parameter log scale. lshape1 shape1 parameter log scale. lshape2 shape2 parameter log scale. lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. meanlog mean log scale parameter. meanlog1 mean log scale parameter. meanlog2 mean log scale parameter. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals. min_pmix number 0 0.5 specifying minimum proportion mixture models. npars whole numeric vector specifying distributions include based number parameters. multi_est flag specifying whether estimate directly model-averaged cumulative distribution function (multi_est = TRUE) take arithmetic mean estimates individual cumulative distribution functions weighted AICc derived weights  (multi_est = FALSE). na.rm flag specifying whether silently remove missing values remove warning. n positive number observations. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. nrow positive whole number minimum number non-missing rows. nsim positive whole number number simulations generate. object object. parametric flag specifying whether perform parametric bootstrapping opposed non-parametrically resampling original data replacement. p vector probabilities. percent numeric vector percent values estimate hazard concentrations . Deprecated proportion = 0.05. pmix Proportion mixture parameter. proportion numeric vector proportion values estimate hazard concentrations . pvalue flag specifying whether return p-values statistics (default) various tests. pred data frame predictions. q vector quantiles. range_shape1 numeric vector length two lower upper bounds shape1 parameter. range_shape2 shape2 parameter. reweight flag specifying whether reweight weights dividing largest weight. rescale string specifying whether leave values unchanged (\"\") rescale concentration values dividing geometric mean minimum maximum positive finite values (\"geomean\") logistically transform (\"odds\"). ribbon flag indicating whether plot confidence interval grey ribbon opposed green solid lines. right string column data right concentration values. save_to NULL string specifying directory save bootstrap datasets parameter estimates (successfully converged) . samples flag specfying whether include numeric vector bootstrap samples list column output. scale scale parameter. scalelog1 scalelog1 parameter. scalelog2 scalelog2 parameter. scalelog scale log scale parameter. sdlog standard deviation log scale parameter. sdlog1 standard deviation log scale parameter. sdlog2 standard deviation log scale parameter. select character vector distributions select. shape shape parameter. shape1 shape1 parameter. shape2 shape2 parameter. shift_x value multiply label x values (adding add_x). silent flag indicating whether fits fail silently. size number size labels. Deprecated label_size. #' strict flag indicating whether elements select must present. suffix Additional text display number y-axis. tails flag NULL specifying whether include distributions tails. text_size number text size. theme_classic flag specifying whether use classic theme default. trans string transformation use. Accepted values include \"log10\", \"log\", \"identity\" (\"log10\" default). valid flag NULL specifying whether include distributions valid likelihoods allows fit distributions modeling averaging. weight string numeric column data positive weights less equal 1,000 NULL. odds_max number specifying upper left value rescale = \"odds\". default left values exceed 0.999. wt flag specifying whether return Akaike weight \"wt\" instead \"weight\". x object. xbreaks x-axis breaks one : NULL breaks waiver() default breaks numeric vector positions xlimits x-axis limits one : NULL use default scale range numeric vector length two providing limits. Use NA refer existing minimum maximum limits. xintercept x-value intersect. xlab string x-axis label. yintercept y-value intersect. ylab string x-axis label. burrIII3.weight weight parameter Burr III distribution. burrIII3.shape1 shape1 parameter Burr III distribution. burrIII3.shape2 shape2 parameter Burr III distribution. burrIII3.scale scale parameter Burr III distribution. gamma.weight weight parameter gamma distribution. gamma.shape shape parameter gamma distribution. gamma.scale scale parameter gamma distribution. gompertz.weight weight parameter Gompertz distribution. gompertz.location location parameter Gompertz distribution. gompertz.shape shape parameter Gompertz distribution. invpareto.weight weight parameter inverse Pareto distribution. invpareto.shape shape parameter inverse Pareto distribution. invpareto.scale scale parameter inverse Pareto distribution. lgumbel.weight weight parameter log-Gumbel distribution. lgumbel.locationlog location parameter log-Gumbel distribution. lgumbel.scalelog scale parameter log-Gumbel distribution. llogis.weight weight parameter log-logistic distribution. llogis.locationlog location parameter log-logistic distribution. llogis.scalelog scale parameter log-logistic distribution. llogis_llogis.weight weight parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog1 locationlog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog1 scalelog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog2 locationlog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog2 scalelog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.pmix pmix parameter log-logistic log-logistic mixture distribution. lnorm.weight weight parameter log-normal distribution. lnorm.meanlog meanlog parameter log-normal distribution. lnorm.sdlog sdlog parameter log-normal distribution. lnorm_lnorm.weight weight parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog1 meanlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog1 sdlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog2 meanlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog2 sdlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.pmix pmix parameter log-normal log-normal mixture distribution. weibull.weight weight parameter Weibull distribution. weibull.shape shape parameter Weibull distribution. weibull.scale scale parameter Weibull distribution.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/pgompertz.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Distribution Function for Gompertz Distribution  — pgompertz","title":"Cumulative Distribution Function for Gompertz Distribution  — pgompertz","text":"Deprecated ssd_pgompertz().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/pgompertz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Distribution Function for Gompertz Distribution  — pgompertz","text":"","code":"pgompertz(q, llocation = 0, lshape = 0, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/pgompertz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Distribution Function for Gompertz Distribution  — pgompertz","text":"q vector quantiles. llocation location parameter log scale. lshape shape parameter log scale. lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. log.p logical; TRUE, probabilities p given log(p).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/plgumbel.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Distribution Function for Log-Gumbel Distribution  — plgumbel","title":"Cumulative Distribution Function for Log-Gumbel Distribution  — plgumbel","text":"Deprecated ssd_plgumbel().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/plgumbel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Distribution Function for Log-Gumbel Distribution  — plgumbel","text":"","code":"plgumbel(q, locationlog = 0, scalelog = 1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/plgumbel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Distribution Function for Log-Gumbel Distribution  — plgumbel","text":"q vector quantiles. locationlog location log scale parameter. scalelog scale log scale parameter. lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. log.p logical; TRUE, probabilities p given log(p).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitburrlioz.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Hazard Concentrations of fitburrlioz Object — predict.fitburrlioz","title":"Predict Hazard Concentrations of fitburrlioz Object — predict.fitburrlioz","text":"wrapper ssd_hc() default calculates hazard concentrations 1 99%.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitburrlioz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Hazard Concentrations of fitburrlioz Object — predict.fitburrlioz","text":"","code":"# S3 method for class 'fitburrlioz' predict(   object,   percent,   proportion = 1:99/100,   ...,   ci = FALSE,   level = 0.95,   nboot = 1000,   min_pboot = 0.95,   parametric = TRUE )"},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitburrlioz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Hazard Concentrations of fitburrlioz Object — predict.fitburrlioz","text":"object object. percent numeric vector percent values estimate hazard concentrations . Deprecated proportion = 0.05. proportion numeric vector proportion values estimate hazard concentrations . ... Unused. ci flag specifying whether estimate confidence intervals (bootstrapping). level number 0 1 confidence level interval. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals. parametric flag specifying whether perform parametric bootstrapping opposed non-parametrically resampling original data replacement.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitburrlioz.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Hazard Concentrations of fitburrlioz Object — predict.fitburrlioz","text":"useful plotting purposes.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitburrlioz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Hazard Concentrations of fitburrlioz Object — predict.fitburrlioz","text":"","code":"fits <- ssd_fit_burrlioz(ssddata::ccme_boron) predict(fits) #> # A tibble: 99 × 15 #>    dist     proportion    est    se   lcl   ucl    wt level est_method ci_method #>    <chr>         <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>     #>  1 invpare…       0.01 0.0228    NA    NA    NA     1  0.95 cdf        percenti… #>  2 invpare…       0.02 0.0772    NA    NA    NA     1  0.95 cdf        percenti… #>  3 invpare…       0.03 0.158     NA    NA    NA     1  0.95 cdf        percenti… #>  4 invpare…       0.04 0.261     NA    NA    NA     1  0.95 cdf        percenti… #>  5 invpare…       0.05 0.387     NA    NA    NA     1  0.95 cdf        percenti… #>  6 invpare…       0.06 0.533     NA    NA    NA     1  0.95 cdf        percenti… #>  7 invpare…       0.07 0.699     NA    NA    NA     1  0.95 cdf        percenti… #>  8 invpare…       0.08 0.885     NA    NA    NA     1  0.95 cdf        percenti… #>  9 invpare…       0.09 1.09      NA    NA    NA     1  0.95 cdf        percenti… #> 10 invpare…       0.1  1.31      NA    NA    NA     1  0.95 cdf        percenti… #> # ℹ 89 more rows #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Hazard Concentrations of fitdists Object — predict.fitdists","title":"Predict Hazard Concentrations of fitdists Object — predict.fitdists","text":"wrapper ssd_hc() default calculates hazard concentrations 1 99%.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Hazard Concentrations of fitdists Object — predict.fitdists","text":"","code":"# S3 method for class 'fitdists' predict(   object,   percent,   proportion = 1:99/100,   ...,   average = TRUE,   ci = FALSE,   level = 0.95,   nboot = 1000,   min_pboot = 0.95,   est_method = \"multi\",   ci_method = \"weighted_samples\",   parametric = TRUE,   delta = 9.21,   control = NULL )"},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Hazard Concentrations of fitdists Object — predict.fitdists","text":"object object. percent numeric vector percent values estimate hazard concentrations . Deprecated proportion = 0.05. proportion numeric vector proportion values estimate hazard concentrations . ... Unused. average flag specifying whether provide model averaged values opposed value distribution. ci flag specifying whether estimate confidence intervals (bootstrapping). level number 0 1 confidence level interval. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals. est_method string specifying whether estimate directly model-averaged cumulative distribution function (est_method = 'multi') take arithmetic mean estimates individual cumulative distribution functions weighted AICc derived weights  (est_method = 'arithmetic') use geometric mean instead (est_method = 'geometric'). ci_method string specifying method use estimating standard error confidence limits bootstrap samples. Possible values include ci_method = \"multi_fixed\"  ci_method = \"multi_free\" generate bootstrap samples using model-averaged cumulative distribution function differ whether model weights fixed values original dataset re-estimated bootstrap sample dataset. value ci_method = \"weighted_samples\" takes bootstrap samples distribution proportional AICc based weights calculates confidence limits (SE) single set. value ci_method = \"weighted_arithmetic\" (ci_method = \"MACL\" soft-deprecated) included historical reasons takes weighted arithmetic mean confidence limits ci_method = MGCL included research paper takes weighted geometric mean confidence limits. values ci_method = \"MAW1\" ci_method = \"MAW2\" use two alternative equations Burnham Anderson model average weighted standard errors calculate confidence limits using Wald approach. Finally ci_method = \"arithmetic\" ci_method = \"geometric\" take weighted arithmetic geometric mean values bootstrap iteration across distributions calculate confidence limits (SE) single set samples. parametric flag specifying whether perform parametric bootstrapping opposed non-parametrically resampling original data replacement. delta non-negative number specifying maximum absolute AIC difference cutoff. Distributions absolute AIC difference greater delta excluded calculations. control list control parameters passed stats::optim().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitdists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Hazard Concentrations of fitdists Object — predict.fitdists","text":"useful plotting purposes.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/predict.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Hazard Concentrations of fitdists Object — predict.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) predict(fits) #> # A tibble: 99 × 15 #>    dist    proportion   est    se   lcl   ucl    wt level est_method ci_method   #>    <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>       #>  1 average       0.01 0.267    NA    NA    NA     1  0.95 multi      weighted_s… #>  2 average       0.02 0.531    NA    NA    NA     1  0.95 multi      weighted_s… #>  3 average       0.03 0.783    NA    NA    NA     1  0.95 multi      weighted_s… #>  4 average       0.04 1.02     NA    NA    NA     1  0.95 multi      weighted_s… #>  5 average       0.05 1.26     NA    NA    NA     1  0.95 multi      weighted_s… #>  6 average       0.06 1.48     NA    NA    NA     1  0.95 multi      weighted_s… #>  7 average       0.07 1.71     NA    NA    NA     1  0.95 multi      weighted_s… #>  8 average       0.08 1.93     NA    NA    NA     1  0.95 multi      weighted_s… #>  9 average       0.09 2.16     NA    NA    NA     1  0.95 multi      weighted_s… #> 10 average       0.1  2.38     NA    NA    NA     1  0.95 multi      weighted_s… #> # ℹ 89 more rows #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/reference/qgompertz.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile Function for Gompertz Distribution  — qgompertz","title":"Quantile Function for Gompertz Distribution  — qgompertz","text":"Deprecated ssd_qgompertz().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/qgompertz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile Function for Gompertz Distribution  — qgompertz","text":"","code":"qgompertz(p, llocation = 0, lshape = 0, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/qgompertz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile Function for Gompertz Distribution  — qgompertz","text":"p vector probabilities. llocation location parameter log scale. lshape shape parameter log scale. lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. log.p logical; TRUE, probabilities p given log(p).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/qlgumbel.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile Function for Log-Gumbel Distribution  — qlgumbel","title":"Quantile Function for Log-Gumbel Distribution  — qlgumbel","text":"Deprecated ssd_qlgumbel().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/qlgumbel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile Function for Log-Gumbel Distribution  — qlgumbel","text":"","code":"qlgumbel(p, locationlog = 0, scalelog = 1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/qlgumbel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile Function for Log-Gumbel Distribution  — qlgumbel","text":"p vector probabilities. locationlog location log scale parameter. scalelog scale log scale parameter. lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. log.p logical; TRUE, probabilities p given log(p).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. generics augment, glance, tidy ggplot2 autoplot, waiver graphics plot stats coef, logLik, nobs, predict universals estimates, npars","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/rgompertz.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Generation for Gompertz Distribution  — rgompertz","title":"Random Generation for Gompertz Distribution  — rgompertz","text":"Deprecated ssd_rgompertz().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/rgompertz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Generation for Gompertz Distribution  — rgompertz","text":"","code":"rgompertz(n, llocation = 0, lshape = 0)"},{"path":"https://bcgov.github.io/ssdtools/reference/rgompertz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Generation for Gompertz Distribution  — rgompertz","text":"n positive number observations. llocation location parameter log scale. lshape shape parameter log scale.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/rlgumbel.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Generation for log-Gumbel Distribution — rlgumbel","title":"Random Generation for log-Gumbel Distribution — rlgumbel","text":"Deprecated ssd_rlgumbel().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/rlgumbel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Generation for log-Gumbel Distribution — rlgumbel","text":"","code":"rlgumbel(n, locationlog = 0, scalelog = 1)"},{"path":"https://bcgov.github.io/ssdtools/reference/rlgumbel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Generation for log-Gumbel Distribution — rlgumbel","text":"n positive number observations. locationlog location log scale parameter. scalelog scale log scale parameter.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/scale_colour_ssd.html","id":null,"dir":"Reference","previous_headings":"","what":"Discrete color-blind scale for SSD Plots — scale_colour_ssd","title":"Discrete color-blind scale for SSD Plots — scale_colour_ssd","text":"functions designed coloring different groups plot SSD data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/scale_colour_ssd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discrete color-blind scale for SSD Plots — scale_colour_ssd","text":"","code":"scale_colour_ssd(...)  scale_color_ssd(...)  scale_fill_ssd(...)"},{"path":"https://bcgov.github.io/ssdtools/reference/scale_colour_ssd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discrete color-blind scale for SSD Plots — scale_colour_ssd","text":"... Arguments passed ggplot2::discrete_scale().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/scale_colour_ssd.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Discrete color-blind scale for SSD Plots — scale_colour_ssd","text":"scale_color_ssd(): Discrete color-blind scale SSD Plots scale_fill_ssd(): Discrete color-blind scale SSD Plots","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/scale_colour_ssd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discrete color-blind scale for SSD Plots — scale_colour_ssd","text":"","code":"# Use the color-blind palette for a SSD plot ssd_plot(ssddata::ccme_boron, boron_pred, shape = \"Group\", color = \"Group\") +   scale_colour_ssd()  # Use the color-blind palette for a histogram of concentrations ggplot2::ggplot(ssddata::ccme_boron, ggplot2::aes(x = Species, y = Conc, fill = Group)) +   ggplot2::geom_col() +   scale_fill_ssd() +   ggplot2::theme(axis.text.x = ggplot2::element_text(angle = 90, vjust = 0.5, hjust = 1))"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_at_boundary.html","id":null,"dir":"Reference","previous_headings":"","what":"Is At Boundary — ssd_at_boundary","title":"Is At Boundary — ssd_at_boundary","text":"Generic function test one parameters boundary.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_at_boundary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is At Boundary — ssd_at_boundary","text":"","code":"ssd_at_boundary(x, ...)  # S3 method for class 'tmbfit' ssd_at_boundary(x, ...)  # S3 method for class 'fitdists' ssd_at_boundary(x, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_at_boundary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is At Boundary — ssd_at_boundary","text":"x object. ... Unused.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_at_boundary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is At Boundary — ssd_at_boundary","text":"flag distribution indicating one parameters boundary. flag indicating one parameters boundary. logical vector distribution indicating one parameters boundary.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_at_boundary.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Is At Boundary — ssd_at_boundary","text":"ssd_at_boundary(tmbfit): Boundary tmbfit Object ssd_at_boundary(fitdists): Boundary fitdists Object","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_at_boundary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is At Boundary — ssd_at_boundary","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron,    dists = c(\"lnorm\", \"lnorm_lnorm\", \"burrIII3\") ) ssd_at_boundary(fits$lnorm) #> [1] FALSE ssd_at_boundary(fits$lnorm_lnorm) #> [1] FALSE ssd_at_boundary(fits$burrIII3) #> [1] TRUE  fits <- ssd_fit_dists(ssddata::ccme_boron,    dists = c(\"lnorm\", \"lnorm_lnorm\", \"burrIII3\") ) ssd_at_boundary(fits) #>       lnorm lnorm_lnorm    burrIII3  #>       FALSE       FALSE        TRUE"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_censor_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Censor Data — ssd_censor_data","title":"Censor Data — ssd_censor_data","text":"Censors data specified range based censoring argument. function useful creating test data sets.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_censor_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Censor Data — ssd_censor_data","text":"","code":"ssd_censor_data(data, left = \"Conc\", ..., right = left, censoring = c(0, Inf))"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_censor_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Censor Data — ssd_censor_data","text":"data data frame. left string column data concentrations. ... Unused. right string column data right concentration values. censoring numeric vector left right censoring values.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_censor_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Censor Data — ssd_censor_data","text":"tibble censored data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_censor_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Censor Data — ssd_censor_data","text":"","code":"ssd_censor_data(ssddata::ccme_boron, censoring = c(2.5, Inf)) #> # A tibble: 28 × 6 #>    Chemical Species                  Conc Group        Units right #>    <chr>    <chr>                   <dbl> <fct>        <chr> <dbl> #>  1 Boron    Oncorhynchus mykiss       0   Fish         mg/L    2.5 #>  2 Boron    Ictalurus punctatus       0   Fish         mg/L    2.5 #>  3 Boron    Micropterus salmoides     4.1 Fish         mg/L    4.1 #>  4 Boron    Brachydanio rerio        10   Fish         mg/L   10   #>  5 Boron    Carassius auratus        15.6 Fish         mg/L   15.6 #>  6 Boron    Pimephales promelas      18.3 Fish         mg/L   18.3 #>  7 Boron    Daphnia magna             6   Invertebrate mg/L    6   #>  8 Boron    Opercularia bimarginata  10   Invertebrate mg/L   10   #>  9 Boron    Ceriodaphnia dubia       13.4 Invertebrate mg/L   13.4 #> 10 Boron    Entosiphon sulcatum      15   Invertebrate mg/L   15   #> # ℹ 18 more rows"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ci_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Interval Methods for SSDs — ssd_ci_methods","title":"Confidence Interval Methods for SSDs — ssd_ci_methods","text":"Returns character vector available non-deprecated methods getting model averaged confidence limits two distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ci_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Interval Methods for SSDs — ssd_ci_methods","text":"","code":"ssd_ci_methods()"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ci_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Interval Methods for SSDs — ssd_ci_methods","text":"character vector available methods.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ci_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Interval Methods for SSDs — ssd_ci_methods","text":"","code":"ssd_ci_methods() #>  [1] \"GMACL\"              \"GMAW1\"              \"GMAW2\"              #>  [4] \"MACL\"               \"MAW1\"               \"MAW2\"               #>  [7] \"arithmetic_samples\" \"geometric_samples\"  \"multi_fixed\"        #> [10] \"multi_free\"         \"weighted_samples\""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_computable.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Computable Standard Errors — ssd_computable","title":"Is Computable Standard Errors — ssd_computable","text":"Generic function test parameters numerically computable standard errors.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_computable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Computable Standard Errors — ssd_computable","text":"","code":"ssd_computable(x, ...)  # S3 method for class 'tmbfit' ssd_computable(x, ...)  # S3 method for class 'fitdists' ssd_computable(x, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_computable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Computable Standard Errors — ssd_computable","text":"x object. ... Unused.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_computable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Computable Standard Errors — ssd_computable","text":"flag distribution indicating parameters numerically computable standard errors. flag indicating parameters numerically computable standard errors. logical vector distribution indicating parameters numerically computable standard errors.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_computable.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Is Computable Standard Errors — ssd_computable","text":"ssd_computable(tmbfit): Computable Standard tmbfit Object ssd_computable(fitdists): Boundary fitdists Object","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_computable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is Computable Standard Errors — ssd_computable","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron,    dists = c(\"lnorm\", \"lnorm_lnorm\", \"burrIII3\") ) ssd_computable(fits$lnorm) #> [1] TRUE ssd_computable(fits$lnorm_lnorm) #> [1] TRUE ssd_computable(fits$burrIII3) #> [1] FALSE  fits <- ssd_fit_dists(ssddata::ccme_boron,    dists = c(\"lnorm\", \"lnorm_lnorm\", \"burrIII3\") ) ssd_computable(fits) #>       lnorm lnorm_lnorm    burrIII3  #>        TRUE        TRUE       FALSE"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from fitdists Object — ssd_data","title":"Data from fitdists Object — ssd_data","text":"Get tibble original data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from fitdists Object — ssd_data","text":"","code":"ssd_data(x)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data from fitdists Object — ssd_data","text":"x object.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data from fitdists Object — ssd_data","text":"tibble original data.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data from fitdists Object — ssd_data","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) ssd_data(fits) #> # A tibble: 28 × 5 #>    Chemical Species                  Conc Group        Units #>    <chr>    <chr>                   <dbl> <fct>        <chr> #>  1 Boron    Oncorhynchus mykiss       2.1 Fish         mg/L  #>  2 Boron    Ictalurus punctatus       2.4 Fish         mg/L  #>  3 Boron    Micropterus salmoides     4.1 Fish         mg/L  #>  4 Boron    Brachydanio rerio        10   Fish         mg/L  #>  5 Boron    Carassius auratus        15.6 Fish         mg/L  #>  6 Boron    Pimephales promelas      18.3 Fish         mg/L  #>  7 Boron    Daphnia magna             6   Invertebrate mg/L  #>  8 Boron    Opercularia bimarginata  10   Invertebrate mg/L  #>  9 Boron    Ceriodaphnia dubia       13.4 Invertebrate mg/L  #> 10 Boron    Entosiphon sulcatum      15   Invertebrate mg/L  #> # ℹ 18 more rows"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"Species Sensitivity Distributions — ssd_dists","title":"Species Sensitivity Distributions — ssd_dists","text":"Gets character vector names available distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Species Sensitivity Distributions — ssd_dists","text":"","code":"ssd_dists(bcanz = NULL, ..., tails = NULL, npars = 2:5, valid = TRUE)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Species Sensitivity Distributions — ssd_dists","text":"bcanz flag NULL specifying whether include distributions set approved BC, Canada, Australia New Zealand official guidelines. ... Unused. tails flag NULL specifying whether include distributions tails. npars whole numeric vector specifying distributions include based number parameters. valid flag NULL specifying whether include distributions valid likelihoods allows fit distributions modeling averaging.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Species Sensitivity Distributions — ssd_dists","text":"unique, sorted character vector distributions.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Species Sensitivity Distributions — ssd_dists","text":"","code":"ssd_dists() #> [1] \"burrIII3\"      \"gamma\"         \"gompertz\"      \"lgumbel\"       #> [5] \"llogis\"        \"llogis_llogis\" \"lnorm\"         \"lnorm_lnorm\"   #> [9] \"weibull\"       ssd_dists(bcanz = TRUE) #> [1] \"gamma\"       \"lgumbel\"     \"llogis\"      \"lnorm\"       \"lnorm_lnorm\" #> [6] \"weibull\"     ssd_dists(tails = FALSE) #> character(0) ssd_dists(npars = 5) #> [1] \"llogis_llogis\" \"lnorm_lnorm\""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_all.html","id":null,"dir":"Reference","previous_headings":"","what":"All Species Sensitivity Distributions — ssd_dists_all","title":"All Species Sensitivity Distributions — ssd_dists_all","text":"Gets character vector names available distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_all.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All Species Sensitivity Distributions — ssd_dists_all","text":"","code":"ssd_dists_all(valid = TRUE)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_all.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All Species Sensitivity Distributions — ssd_dists_all","text":"valid flag NULL specifying whether include distributions valid likelihoods allows fit distributions modeling averaging.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_all.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All Species Sensitivity Distributions — ssd_dists_all","text":"unique, sorted character vector distributions.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_all.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All Species Sensitivity Distributions — ssd_dists_all","text":"","code":"ssd_dists_all() #> [1] \"burrIII3\"      \"gamma\"         \"gompertz\"      \"lgumbel\"       #> [5] \"llogis\"        \"llogis_llogis\" \"lnorm\"         \"lnorm_lnorm\"   #> [9] \"weibull\""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_bcanz.html","id":null,"dir":"Reference","previous_headings":"","what":"BCANZ Distributions — ssd_dists_bcanz","title":"BCANZ Distributions — ssd_dists_bcanz","text":"Gets character vector names distributions adopted BC, Canada, Australia New Zealand official guidelines.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_bcanz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BCANZ Distributions — ssd_dists_bcanz","text":"","code":"ssd_dists_bcanz(npars = c(2L, 5L))"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_bcanz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BCANZ Distributions — ssd_dists_bcanz","text":"npars whole numeric vector specifying distributions include based number parameters.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_bcanz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BCANZ Distributions — ssd_dists_bcanz","text":"unique, sorted character vector distributions.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_bcanz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BCANZ Distributions — ssd_dists_bcanz","text":"","code":"ssd_dists_bcanz() #> [1] \"gamma\"       \"lgumbel\"     \"llogis\"      \"lnorm\"       \"lnorm_lnorm\" #> [6] \"weibull\"     ssd_dists_bcanz(npars = 2) #> [1] \"gamma\"   \"lgumbel\" \"llogis\"  \"lnorm\"   \"weibull\""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_shiny.html","id":null,"dir":"Reference","previous_headings":"","what":"All Shiny Species Sensitivity Distributions — ssd_dists_shiny","title":"All Shiny Species Sensitivity Distributions — ssd_dists_shiny","text":"Gets character vector names available distributions shinyssdtools.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_shiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All Shiny Species Sensitivity Distributions — ssd_dists_shiny","text":"","code":"ssd_dists_shiny()"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_shiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All Shiny Species Sensitivity Distributions — ssd_dists_shiny","text":"unique, sorted character vector distributions.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_dists_shiny.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All Shiny Species Sensitivity Distributions — ssd_dists_shiny","text":"","code":"ssd_dists_shiny() #> Warning: `ssd_dists_shiny()` was deprecated in ssdtools 2.3.0. #> ℹ Use `ssd_dists(tails = TRUE)` instead. #> [1] \"burrIII3\"      \"gamma\"         \"gompertz\"      \"lgumbel\"       #> [5] \"llogis\"        \"llogis_llogis\" \"lnorm\"         \"lnorm_lnorm\"   #> [9] \"weibull\""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_e.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Parameter Estimates — ssd_eburrIII3","title":"Default Parameter Estimates — ssd_eburrIII3","text":"Default Parameter Estimates","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Parameter Estimates — ssd_eburrIII3","text":"","code":"ssd_eburrIII3()  ssd_egamma()  ssd_egompertz()  ssd_einvpareto()  ssd_elgumbel()  ssd_elgumbel()  ssd_ellogis_llogis()  ssd_ellogis()  ssd_elnorm_lnorm()  ssd_elnorm()  ssd_emulti()  ssd_eweibull()"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_e.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Default Parameter Estimates — ssd_eburrIII3","text":"ssd_eburrIII3(): Default Parameter Values BurrIII Distribution ssd_egamma(): Default Parameter Values Gamma Distribution ssd_egompertz(): Default Parameter Values Gompertz Distribution ssd_einvpareto(): Default Parameter Values Inverse Pareto Distribution ssd_elgumbel(): Default Parameter Values Log-Gumbel Distribution ssd_elgumbel(): Default Parameter Values log-Gumbel Distribution ssd_ellogis_llogis(): Default Parameter Values Log-Logistic/Log-Logistic Mixture Distribution ssd_ellogis(): Default Parameter Values Log-Logistic Distribution ssd_elnorm_lnorm(): Default Parameter Values Log-Normal/Log-Normal Mixture Distribution ssd_elnorm(): Default Parameter Values Log-Normal Distribution ssd_emulti(): Default Parameter Values Multiple Distributions ssd_eweibull(): Default Parameter Values Log-Normal Distribution","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_e.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default Parameter Estimates — ssd_eburrIII3","text":"","code":"ssd_eburrIII3() #> $shape1 #> [1] 1 #>  #> $shape2 #> [1] 1 #>  #> $scale #> [1] 1 #>   ssd_egamma() #> $shape #> [1] 1 #>  #> $scale #> [1] 1 #>   ssd_egompertz() #> $location #> [1] 1 #>  #> $shape #> [1] 1 #>   ssd_einvpareto() #> $shape #> [1] 3 #>  #> $scale #> [1] 1 #>   ssd_einvpareto() #> $shape #> [1] 3 #>  #> $scale #> [1] 1 #>   ssd_elgumbel() #> $locationlog #> [1] 0 #>  #> $scalelog #> [1] 1 #>   ssd_ellogis_llogis() #> $locationlog1 #> [1] 0 #>  #> $scalelog1 #> [1] 1 #>  #> $locationlog2 #> [1] 1 #>  #> $scalelog2 #> [1] 1 #>  #> $pmix #> [1] 0.5 #>   ssd_ellogis() #> $locationlog #> [1] 0 #>  #> $scalelog #> [1] 1 #>   ssd_elnorm_lnorm() #> $meanlog1 #> [1] 0 #>  #> $sdlog1 #> [1] 1 #>  #> $meanlog2 #> [1] 1 #>  #> $sdlog2 #> [1] 1 #>  #> $pmix #> [1] 0.5 #>   ssd_elnorm() #> $meanlog #> [1] 0 #>  #> $sdlog #> [1] 1 #>   ssd_emulti() #> $burrIII3.weight #> [1] 0 #>  #> $burrIII3.shape1 #> [1] 1 #>  #> $burrIII3.shape2 #> [1] 1 #>  #> $burrIII3.scale #> [1] 1 #>  #> $gamma.weight #> [1] 0.1666667 #>  #> $gamma.shape #> [1] 1 #>  #> $gamma.scale #> [1] 1 #>  #> $gompertz.weight #> [1] 0 #>  #> $gompertz.location #> [1] 1 #>  #> $gompertz.shape #> [1] 1 #>  #> $lgumbel.weight #> [1] 0.1666667 #>  #> $lgumbel.locationlog #> [1] 0 #>  #> $lgumbel.scalelog #> [1] 1 #>  #> $llogis.weight #> [1] 0.1666667 #>  #> $llogis.locationlog #> [1] 0 #>  #> $llogis.scalelog #> [1] 1 #>  #> $llogis_llogis.weight #> [1] 0 #>  #> $llogis_llogis.locationlog1 #> [1] 0 #>  #> $llogis_llogis.scalelog1 #> [1] 1 #>  #> $llogis_llogis.locationlog2 #> [1] 1 #>  #> $llogis_llogis.scalelog2 #> [1] 1 #>  #> $llogis_llogis.pmix #> [1] 0.5 #>  #> $lnorm.weight #> [1] 0.1666667 #>  #> $lnorm.meanlog #> [1] 0 #>  #> $lnorm.sdlog #> [1] 1 #>  #> $lnorm_lnorm.weight #> [1] 0.1666667 #>  #> $lnorm_lnorm.meanlog1 #> [1] 0 #>  #> $lnorm_lnorm.sdlog1 #> [1] 1 #>  #> $lnorm_lnorm.meanlog2 #> [1] 1 #>  #> $lnorm_lnorm.sdlog2 #> [1] 1 #>  #> $lnorm_lnorm.pmix #> [1] 0.5 #>  #> $weibull.weight #> [1] 0.1666667 #>  #> $weibull.shape #> [1] 1 #>  #> $weibull.scale #> [1] 1 #>   ssd_eweibull() #> $shape #> [1] 1 #>  #> $scale #> [1] 1 #>"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Cumulative Density — ssd_ecd","title":"Empirical Cumulative Density — ssd_ecd","text":"Empirical Cumulative Density","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Cumulative Density — ssd_ecd","text":"","code":"ssd_ecd(x, ties.method = \"first\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Cumulative Density — ssd_ecd","text":"x numeric, complex, character logical vector. ties.method character string specifying ties treated,     see ‘Details’; can abbreviated.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Cumulative Density — ssd_ecd","text":"numeric vector empirical cumulative density.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Cumulative Density — ssd_ecd","text":"","code":"ssd_ecd(1:10) #>  [1] 0.06097561 0.15853659 0.25609756 0.35365854 0.45121951 0.54878049 #>  [7] 0.64634146 0.74390244 0.84146341 0.93902439"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Empirical Cumulative Density for Species Sensitivity Data — ssd_ecd_data","title":"Empirical Cumulative Density for Species Sensitivity Data — ssd_ecd_data","text":"Empirical Cumulative Density Species Sensitivity Data","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empirical Cumulative Density for Species Sensitivity Data — ssd_ecd_data","text":"","code":"ssd_ecd_data(   data,   left = \"Conc\",   right = left,   ...,   bounds = c(left = 1, right = 1) )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empirical Cumulative Density for Species Sensitivity Data — ssd_ecd_data","text":"data data frame. left string column data concentrations. right string column data right concentration values. ... Unused. bounds named non-negative numeric vector left right bounds uncensored missing (0 Inf) data terms orders magnitude relative extremes non-missing values.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empirical Cumulative Density for Species Sensitivity Data — ssd_ecd_data","text":"numeric vector empirical cumulative density rows data.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_ecd_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Empirical Cumulative Density for Species Sensitivity Data — ssd_ecd_data","text":"","code":"ssd_ecd_data(ssddata::ccme_boron) #>  [1] 0.12500000 0.16071429 0.23214286 0.33928571 0.51785714 0.55357143 #>  [7] 0.30357143 0.37500000 0.44642857 0.48214286 0.58928571 0.62500000 #> [13] 0.66071429 0.76785714 0.80357143 0.91071429 0.94642857 0.98214286 #> [19] 0.01785714 0.05357143 0.08928571 0.19642857 0.26785714 0.41071429 #> [25] 0.69642857 0.73214286 0.83928571 0.87500000"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_est_methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Methods for SSDs — ssd_est_methods","title":"Estimate Methods for SSDs — ssd_est_methods","text":"Returns character vector available non-deprecated methods getting model averaged estimates two distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_est_methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Methods for SSDs — ssd_est_methods","text":"","code":"ssd_est_methods()"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_est_methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Methods for SSDs — ssd_est_methods","text":"character vector available methods.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_est_methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Methods for SSDs — ssd_est_methods","text":"","code":"ssd_est_methods() #> [1] \"arithmetic\" \"geometric\"  \"multi\""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_exposure.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion Exposure — ssd_exposure","title":"Proportion Exposure — ssd_exposure","text":"Calculates average proportion exposed based log-normal distribution concentrations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_exposure.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion Exposure — ssd_exposure","text":"","code":"ssd_exposure(x, meanlog = 0, sdlog = 1, ..., nboot = 1000)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_exposure.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion Exposure — ssd_exposure","text":"x object. meanlog mean exposure concentrations log scale. sdlog standard deviation exposure concentrations log scale. ... Unused. nboot number samples use calculate exposure.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_exposure.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportion Exposure — ssd_exposure","text":"proportion exposed.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_exposure.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion Exposure — ssd_exposure","text":"","code":"if (FALSE) { # \\dontrun{ fits <- ssd_fit_dists(ssddata::ccme_boron, dists = \"lnorm\") withr::with_seed(50, {   ssd_exposure(fits)   ssd_exposure(fits, meanlog = 1)   ssd_exposure(fits, meanlog = 1, sdlog = 1) }) } # }"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_bcanz.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit BCANZ Distributions — ssd_fit_bcanz","title":"Fit BCANZ Distributions — ssd_fit_bcanz","text":"Fits distributions using settings adopted BC, Canada, Australia New Zealand official guidelines.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_bcanz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit BCANZ Distributions — ssd_fit_bcanz","text":"","code":"ssd_fit_bcanz(data, left = \"Conc\", ..., dists = ssd_dists_bcanz())"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_bcanz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit BCANZ Distributions — ssd_fit_bcanz","text":"data data frame. left string column data concentrations. ... Unused. dists character vector distribution names.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_bcanz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit BCANZ Distributions — ssd_fit_bcanz","text":"object class fitdists.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_bcanz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit BCANZ Distributions — ssd_fit_bcanz","text":"","code":"ssd_fit_bcanz(ssddata::ccme_boron) #> Distribution 'gamma' #>   scale 25.1268 #>   shape 0.950179 #>  #> Distribution 'lgumbel' #>   locationlog 1.92263 #>   scalelog 1.23224 #>  #> Distribution 'llogis' #>   locationlog 2.62628 #>   scalelog 0.740426 #>  #> Distribution 'lnorm' #>   meanlog 2.56165 #>   sdlog 1.24154 #>  #> Distribution 'lnorm_lnorm' #>   meanlog1 0.949483 #>   meanlog2 3.20102 #>   pmix 0.283968 #>   sdlog1 0.554465 #>   sdlog2 0.768862 #>  #> Distribution 'weibull' #>   scale 23.514 #>   shape 0.9661 #>  #> Parameters estimated from 28 rows of data."},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_burrlioz.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Burrlioz Distributions — ssd_fit_burrlioz","title":"Fit Burrlioz Distributions — ssd_fit_burrlioz","text":"Fits 'burrIII3' distribution. shape1 parameter boundary returns 'lgumbel' (equivalent inverse Weibull). Else shape2 parameter boundary returns 'invpareto'. Otherwise returns 'burrIII3'","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_burrlioz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Burrlioz Distributions — ssd_fit_burrlioz","text":"","code":"ssd_fit_burrlioz(   data,   left = \"Conc\",   ...,   rescale = FALSE,   control = list(),   silent = FALSE )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_burrlioz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Burrlioz Distributions — ssd_fit_burrlioz","text":"data data frame. left string column data concentrations. ... Unused. rescale string specifying whether leave values unchanged (\"\") rescale concentration values dividing geometric mean minimum maximum positive finite values (\"geomean\") logistically transform (\"odds\"). control list control parameters passed stats::optim(). silent flag indicating whether fits fail silently.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_burrlioz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Burrlioz Distributions — ssd_fit_burrlioz","text":"object class fitdists.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_burrlioz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Burrlioz Distributions — ssd_fit_burrlioz","text":"","code":"ssd_fit_burrlioz(ssddata::ccme_boron) #> Distribution 'invpareto' #>   scale 75.2608 #>   shape 0.568403 #>  #> Parameters estimated from 28 rows of data."},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_dists.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Distributions — ssd_fit_dists","title":"Fit Distributions — ssd_fit_dists","text":"Fits one distributions species sensitivity data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_dists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Distributions — ssd_fit_dists","text":"","code":"ssd_fit_dists(   data,   left = \"Conc\",   ...,   right = left,   weight = NULL,   dists = ssd_dists_bcanz(),   nrow = 6L,   rescale = FALSE,   odds_max = 0.999,   reweight = FALSE,   computable = FALSE,   at_boundary_ok = TRUE,   all_dists = FALSE,   min_pmix = ssd_min_pmix(nrow(data)),   range_shape1 = c(0.05, 20),   range_shape2 = range_shape1,   control = list(),   silent = FALSE )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_dists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Distributions — ssd_fit_dists","text":"data data frame. left string column data concentrations. ... Unused. right string column data right concentration values. weight string numeric column data positive weights less equal 1,000 NULL. dists character vector distribution names. nrow positive whole number minimum number non-missing rows. rescale string specifying whether leave values unchanged (\"\") rescale concentration values dividing geometric mean minimum maximum positive finite values (\"geomean\") logistically transform (\"odds\"). odds_max number specifying upper left value rescale = \"odds\". default left values exceed 0.999. reweight flag specifying whether reweight weights dividing largest weight. computable flag specifying whether return fits numerically computable standard errors. at_boundary_ok flag specifying whether model one parameters boundary considered converged (default = FALSE). all_dists flag specifying whether named distributions must fit successfully. min_pmix number 0 0.5 specifying minimum proportion mixture models. range_shape1 numeric vector length two lower upper bounds shape1 parameter. range_shape2 shape2 parameter. control list control parameters passed stats::optim(). silent flag indicating whether fits fail silently.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_dists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Distributions — ssd_fit_dists","text":"object class fitdists.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_dists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit Distributions — ssd_fit_dists","text":"default 'gamma', 'lgumbel', 'llogis', 'lnorm', 'lnorm_lnorm' 'weibull' distributions fitted data. complete list distributions currently implemented ssdtools see ssd_dists_all(). weight specifies column data frame positive numbers, weighted estimation occurs. However, currently resultant parameter estimates available. right argument different left argument data considered censored.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_fit_dists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit Distributions — ssd_fit_dists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) fits #> Distribution 'gamma' #>   scale 25.1268 #>   shape 0.950179 #>  #> Distribution 'lgumbel' #>   locationlog 1.92263 #>   scalelog 1.23224 #>  #> Distribution 'llogis' #>   locationlog 2.62628 #>   scalelog 0.740426 #>  #> Distribution 'lnorm' #>   meanlog 2.56165 #>   sdlog 1.24154 #>  #> Distribution 'lnorm_lnorm' #>   meanlog1 0.949483 #>   meanlog2 3.20102 #>   pmix 0.283968 #>   sdlog1 0.554465 #>   sdlog2 0.768862 #>  #> Distribution 'weibull' #>   scale 23.514 #>   shape 0.9661 #>  #> Parameters estimated from 28 rows of data. ssd_plot_cdf(fits)  ssd_hc(fits) #> # A tibble: 1 × 15 #>   dist    proportion   est    se   lcl   ucl    wt level est_method ci_method    #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>        #> 1 average       0.05  1.26    NA    NA    NA     1  0.95 multi      weighted_sa… #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_gof.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness of Fit — ssd_gof","title":"Goodness of Fit — ssd_gof","text":"Returns tbl data frame following columns dist distribution name (chr) aic Akaike's Information Criterion (dbl) bic Bayesian Information Criterion (dbl) at_bound Parameter(s) boundary (lgl) computable parameter computable standard errors (lgl) data non-censored aicc Akaike's Information Criterion corrected sample size (dbl) 8 samples ad Anderson-Darling statistic (dbl) ks Kolmogorov-Smirnov statistic (dbl) cvm Cramer-von Mises statistic (dbl) case object class fitdists function also returns delta Information Criterion differences (dbl) wt Information Criterion weights (dbl) delta wt based aic censored data aicc non-censored data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_gof.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness of Fit — ssd_gof","text":"","code":"ssd_gof(x, ...)  # S3 method for class 'fitdists' ssd_gof(x, ..., pvalue = FALSE, wt = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_gof.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness of Fit — ssd_gof","text":"x object. ... Unused. pvalue flag specifying whether return p-values statistics (default) various tests. wt flag specifying whether return Akaike weight \"wt\" instead \"weight\".","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_gof.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness of Fit — ssd_gof","text":"tbl data frame gof statistics.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_gof.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Goodness of Fit — ssd_gof","text":"ssd_gof(fitdists): Goodness Fit","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_gof.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness of Fit — ssd_gof","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) ssd_gof(fits) #> Warning: ssd_gof(wt = FALSE) was deprecated in ssdtools 2.3.1. #> ℹ Please use ssd_gof(wt = TRUE) instead. #> ℹ Please set the `wt` argument to `ssd_gof()` to be TRUE which will rename the #>   'weight' column to 'wt' and then update your downstream code accordingly. #> # A tibble: 6 × 14 #>   dist    npars  nobs log_lik   aic  aicc delta weight   bic    ad     ks    cvm #>   <chr>   <int> <int>   <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl>  <dbl>  <dbl> #> 1 gamma       2    28   -117.  238.  238. 0.005  0.357  240. 0.440 0.117  0.0554 #> 2 lgumbel     2    28   -120.  244.  245. 6.56   0.013  247. 0.829 0.158  0.134  #> 3 llogis      2    28   -119.  241.  241. 3.39   0.066  244. 0.487 0.0994 0.0595 #> 4 lnorm       2    28   -118.  239.  240. 1.40   0.177  242. 0.507 0.107  0.0703 #> 5 lnorm_…     5    28   -115.  240.  243. 4.98   0.03   247. 0.320 0.116  0.0414 #> 6 weibull     2    28   -117.  238.  238. 0      0.357  240. 0.434 0.117  0.0542 #> # ℹ 2 more variables: at_bound <lgl>, computable <lgl> ssd_gof(fits, pvalue = TRUE, wt = TRUE) #> # A tibble: 6 × 14 #>   dist       npars  nobs log_lik   aic  aicc delta    wt   bic    ad    ks   cvm #>   <chr>      <int> <int>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 gamma          2    28   -117.  238.  238. 0.005 0.357  240. 0.807 0.839 0.847 #> 2 lgumbel        2    28   -120.  244.  245. 6.56  0.013  247. 0.460 0.485 0.445 #> 3 llogis         2    28   -119.  241.  241. 3.39  0.066  244. 0.759 0.945 0.821 #> 4 lnorm          2    28   -118.  239.  240. 1.40  0.177  242. 0.738 0.908 0.754 #> 5 lnorm_lno…     5    28   -115.  240.  243. 4.98  0.03   247. 0.922 0.846 0.929 #> 6 weibull        2    28   -117.  238.  238. 0     0.357  240. 0.813 0.839 0.854 #> # ℹ 2 more variables: at_bound <lgl>, computable <lgl>"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"Calculates concentration(s) bootstrap confidence intervals protect specified proportion(s) species individual model-averaged distributions using parametric non-parametric bootstrapping.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"","code":"ssd_hc(x, ...)  # S3 method for class 'list' ssd_hc(x, percent, proportion = 0.05, ...)  # S3 method for class 'fitdists' ssd_hc(   x,   percent = deprecated(),   proportion = 0.05,   ...,   average = TRUE,   ci = FALSE,   level = 0.95,   nboot = 1000,   min_pboot = 0.95,   multi_est = deprecated(),   est_method = \"multi\",   ci_method = \"weighted_samples\",   parametric = TRUE,   delta = 9.21,   samples = FALSE,   save_to = NULL,   control = NULL )  # S3 method for class 'fitburrlioz' ssd_hc(   x,   percent,   proportion = 0.05,   ...,   ci = FALSE,   level = 0.95,   nboot = 1000,   min_pboot = 0.95,   parametric = FALSE,   samples = FALSE,   save_to = NULL )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"x object. ... Unused. percent numeric vector percent values estimate hazard concentrations . Deprecated proportion = 0.05. proportion numeric vector proportion values estimate hazard concentrations . average flag specifying whether provide model averaged values opposed value distribution. ci flag specifying whether estimate confidence intervals (bootstrapping). level number 0 1 confidence level interval. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals. multi_est flag specifying whether estimate directly model-averaged cumulative distribution function (multi_est = TRUE) take arithmetic mean estimates individual cumulative distribution functions weighted AICc derived weights  (multi_est = FALSE). est_method string specifying whether estimate directly model-averaged cumulative distribution function (est_method = 'multi') take arithmetic mean estimates individual cumulative distribution functions weighted AICc derived weights  (est_method = 'arithmetic') use geometric mean instead (est_method = 'geometric'). ci_method string specifying method use estimating standard error confidence limits bootstrap samples. Possible values include ci_method = \"multi_fixed\"  ci_method = \"multi_free\" generate bootstrap samples using model-averaged cumulative distribution function differ whether model weights fixed values original dataset re-estimated bootstrap sample dataset. value ci_method = \"weighted_samples\" takes bootstrap samples distribution proportional AICc based weights calculates confidence limits (SE) single set. value ci_method = \"weighted_arithmetic\" (ci_method = \"MACL\" soft-deprecated) included historical reasons takes weighted arithmetic mean confidence limits ci_method = MGCL included research paper takes weighted geometric mean confidence limits. values ci_method = \"MAW1\" ci_method = \"MAW2\" use two alternative equations Burnham Anderson model average weighted standard errors calculate confidence limits using Wald approach. Finally ci_method = \"arithmetic\" ci_method = \"geometric\" take weighted arithmetic geometric mean values bootstrap iteration across distributions calculate confidence limits (SE) single set samples. parametric flag specifying whether perform parametric bootstrapping opposed non-parametrically resampling original data replacement. delta non-negative number specifying maximum absolute AIC difference cutoff. Distributions absolute AIC difference greater delta excluded calculations. samples flag specfying whether include numeric vector bootstrap samples list column output. save_to NULL string specifying directory save bootstrap datasets parameter estimates (successfully converged) . control list control parameters passed stats::optim().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"tibble corresponding hazard concentrations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"Model-averaged estimates /confidence intervals (including standard error) can calculated  treating distributions constituting single mixture distribution versus 'taking mean'. calculating model averaged estimates treating distributions constituting single mixture distribution ensures ssd_hc() inverse ssd_hp(). Distributions absolute AIC difference greater delta default 7 considerably less support (wt < 0.01) excluded prior calculation hazard concentrations reduce run time.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"ssd_hc(list): Hazard Concentrations Distributional Estimates ssd_hc(fitdists): Hazard Concentrations fitdists Object ssd_hc(fitburrlioz): Hazard Concentrations fitburrlioz Object","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"Burnham, K.P., Anderson, D.R. 2002. Model Selection Multimodel Inference. Springer New York, New York, NY. doi:10.1007/b97636.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard Concentrations for Species Sensitivity Distributions — ssd_hc","text":"","code":"ssd_hc(ssd_match_moments()) #> # A tibble: 6 × 9 #>   dist        proportion   est    se   lcl   ucl    wt nboot pboot #>   <chr>            <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <int> <dbl> #> 1 gamma             0.05 0.439    NA    NA    NA     1     0    NA #> 2 lgumbel           0.05 0.739    NA    NA    NA     1     0    NA #> 3 llogis            0.05 0.562    NA    NA    NA     1     0    NA #> 4 lnorm             0.05 0.558    NA    NA    NA     1     0    NA #> 5 lnorm_lnorm       0.05 0.489    NA    NA    NA     1     0    NA #> 6 weibull           0.05 0.501    NA    NA    NA     1     0    NA  fits <- ssd_fit_dists(ssddata::ccme_boron) ssd_hc(fits) #> # A tibble: 1 × 15 #>   dist    proportion   est    se   lcl   ucl    wt level est_method ci_method    #>   <chr>        <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>        #> 1 average       0.05  1.26    NA    NA    NA     1  0.95 multi      weighted_sa… #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list>  fit <- ssd_fit_burrlioz(ssddata::ccme_boron) ssd_hc(fit) #> # A tibble: 1 × 15 #>   dist      proportion   est    se   lcl   ucl    wt level est_method ci_method  #>   <chr>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>      #> 1 invpareto       0.05 0.387    NA    NA    NA     1  0.95 cdf        percentile #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_bcanz.html","id":null,"dir":"Reference","previous_headings":"","what":"BCANZ Hazard Concentrations — ssd_hc_bcanz","title":"BCANZ Hazard Concentrations — ssd_hc_bcanz","text":"Gets hazard concentrations confidence intervals protect 1, 5, 10 20% species using settings adopted BC, Canada, Australia New Zealand official guidelines. function can take several minutes run recommended 10,000 iterations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_bcanz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BCANZ Hazard Concentrations — ssd_hc_bcanz","text":"","code":"ssd_hc_bcanz(x, ..., nboot = 10000, min_pboot = 0.95)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_bcanz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BCANZ Hazard Concentrations — ssd_hc_bcanz","text":"x object. ... Unused. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_bcanz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BCANZ Hazard Concentrations — ssd_hc_bcanz","text":"tibble corresponding hazard concentrations.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_bcanz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BCANZ Hazard Concentrations — ssd_hc_bcanz","text":"","code":"fits <- ssd_fit_bcanz(ssddata::ccme_boron) ssd_hc_bcanz(fits, nboot = 100) #> # A tibble: 4 × 15 #>   dist    proportion   est    se    lcl   ucl    wt level est_method ci_method   #>   <chr>        <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <chr>      <chr>       #> 1 average       0.01 0.267 0.322 0.0466  1.04     1  0.95 multi      weighted_s… #> 2 average       0.05 1.26  0.681 0.424   2.87     1  0.95 multi      weighted_s… #> 3 average       0.1  2.38  1.04  1.03    4.59     1  0.95 multi      weighted_s… #> 4 average       0.2  4.81  1.71  2.60    8.72     1  0.95 multi      weighted_s… #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_burrlioz.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard Concentrations for Burrlioz Fit  — ssd_hc_burrlioz","title":"Hazard Concentrations for Burrlioz Fit  — ssd_hc_burrlioz","text":"Deprecated ssd_hc().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_burrlioz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard Concentrations for Burrlioz Fit  — ssd_hc_burrlioz","text":"","code":"ssd_hc_burrlioz(   x,   percent,   proportion = 0.05,   ci = FALSE,   level = 0.95,   nboot = 1000,   min_pboot = 0.95,   parametric = FALSE )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_burrlioz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard Concentrations for Burrlioz Fit  — ssd_hc_burrlioz","text":"x object. percent numeric vector percent values estimate hazard concentrations . Deprecated proportion = 0.05. proportion numeric vector proportion values estimate hazard concentrations . ci flag specifying whether estimate confidence intervals (bootstrapping). level number 0 1 confidence level interval. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals. parametric flag specifying whether perform parametric bootstrapping opposed non-parametrically resampling original data replacement.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hc_burrlioz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard Concentrations for Burrlioz Fit  — ssd_hc_burrlioz","text":"tibble corresponding hazard concentrations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp.html","id":null,"dir":"Reference","previous_headings":"","what":"Hazard Proportion — ssd_hp","title":"Hazard Proportion — ssd_hp","text":"Calculates proportion species affected specified concentration(s) quantile based bootstrap confidence intervals individual model-averaged distributions using parametric non-parametric bootstrapping. information see inverse function ssd_hc().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hazard Proportion — ssd_hp","text":"","code":"ssd_hp(x, ...)  # S3 method for class 'fitdists' ssd_hp(   x,   conc = 1,   ...,   average = TRUE,   ci = FALSE,   level = 0.95,   nboot = 1000,   min_pboot = 0.95,   multi_est = deprecated(),   est_method = \"multi\",   ci_method = \"weighted_samples\",   parametric = TRUE,   delta = 9.21,   proportion = FALSE,   samples = FALSE,   save_to = NULL,   control = NULL )  # S3 method for class 'fitburrlioz' ssd_hp(   x,   conc = 1,   ...,   ci = FALSE,   level = 0.95,   nboot = 1000,   min_pboot = 0.95,   parametric = FALSE,   proportion = FALSE,   samples = FALSE,   save_to = NULL )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hazard Proportion — ssd_hp","text":"x object. ... Unused. conc numeric vector concentrations calculate hazard proportions . average flag specifying whether provide model averaged values opposed value distribution. ci flag specifying whether estimate confidence intervals (bootstrapping). level number 0 1 confidence level interval. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals. multi_est flag specifying whether estimate directly model-averaged cumulative distribution function (multi_est = TRUE) take arithmetic mean estimates individual cumulative distribution functions weighted AICc derived weights  (multi_est = FALSE). est_method string specifying whether estimate directly model-averaged cumulative distribution function (est_method = 'multi') take arithmetic mean estimates individual cumulative distribution functions weighted AICc derived weights  (est_method = 'arithmetic') use geometric mean instead (est_method = 'geometric'). ci_method string specifying method use estimating standard error confidence limits bootstrap samples. Possible values include ci_method = \"multi_fixed\"  ci_method = \"multi_free\" generate bootstrap samples using model-averaged cumulative distribution function differ whether model weights fixed values original dataset re-estimated bootstrap sample dataset. value ci_method = \"weighted_samples\" takes bootstrap samples distribution proportional AICc based weights calculates confidence limits (SE) single set. value ci_method = \"weighted_arithmetic\" (ci_method = \"MACL\" soft-deprecated) included historical reasons takes weighted arithmetic mean confidence limits ci_method = MGCL included research paper takes weighted geometric mean confidence limits. values ci_method = \"MAW1\" ci_method = \"MAW2\" use two alternative equations Burnham Anderson model average weighted standard errors calculate confidence limits using Wald approach. Finally ci_method = \"arithmetic\" ci_method = \"geometric\" take weighted arithmetic geometric mean values bootstrap iteration across distributions calculate confidence limits (SE) single set samples. parametric flag specifying whether perform parametric bootstrapping opposed non-parametrically resampling original data replacement. delta non-negative number specifying maximum absolute AIC difference cutoff. Distributions absolute AIC difference greater delta excluded calculations. proportion flag specifying whether return hazard proportions (proportion = TRUE) hazard percentages (proportion = FALSE). break existing code default value FALSE switching default TRUE future version. user recommended manually set TRUE now avoid unexpected changes future versions. samples flag specfying whether include numeric vector bootstrap samples list column output. save_to NULL string specifying directory save bootstrap datasets parameter estimates (successfully converged) . control list control parameters passed stats::optim().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hazard Proportion — ssd_hp","text":"tibble corresponding hazard proportions.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Hazard Proportion — ssd_hp","text":"ssd_hp(fitdists): Hazard Proportions fitdists Object ssd_hp(fitburrlioz): Hazard Proportions fitburrlioz Object","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hazard Proportion — ssd_hp","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) ssd_hp(fits, conc = 1) #> Warning: ssd_hp(proportion = FALSE) was deprecated in ssdtools 2.3.1. #> ℹ Please use ssd_hp(proportion = TRUE) instead. #> ℹ Please set the `proportion` argument to `ssd_hp()` to be TRUE which will #>   cause it to return hazard proportions instead of percentages then update your #>   downstream code accordingly. #> # A tibble: 1 × 15 #>   dist     conc   est    se   lcl   ucl    wt level est_method ci_method        #>   <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>            #> 1 average     1  3.90    NA    NA    NA     1  0.95 multi      weighted_samples #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list>  fit <- ssd_fit_burrlioz(ssddata::ccme_boron) ssd_hp(fit) #> # A tibble: 1 × 15 #>   dist       conc   est    se   lcl   ucl    wt level est_method ci_method  #>   <chr>     <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>      #> 1 invpareto     1  8.58    NA    NA    NA     1  0.95 cdf        percentile #> # ℹ 5 more variables: boot_method <chr>, nboot <int>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp_bcanz.html","id":null,"dir":"Reference","previous_headings":"","what":"BCANZ Hazard Proportion — ssd_hp_bcanz","title":"BCANZ Hazard Proportion — ssd_hp_bcanz","text":"Gets  proportion species affected specified concentration(s) using settings adopted BC, Canada, Australia New Zealand official guidelines. function can take several minutes run recommended 10,000 iterations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp_bcanz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BCANZ Hazard Proportion — ssd_hp_bcanz","text":"","code":"ssd_hp_bcanz(   x,   conc = 1,   ...,   nboot = 10000,   min_pboot = 0.95,   proportion = FALSE )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp_bcanz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"BCANZ Hazard Proportion — ssd_hp_bcanz","text":"x object. conc numeric vector concentrations calculate hazard proportions . ... Unused. nboot count number bootstrap samples use estimate confidence limits. value 10,000 recommended official guidelines. min_pboot number 0 1 minimum proportion bootstrap samples must successfully fit (return likelihood) report confidence intervals. proportion numeric vector proportion values estimate hazard concentrations .","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp_bcanz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"BCANZ Hazard Proportion — ssd_hp_bcanz","text":"tibble corresponding hazard concentrations.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_hp_bcanz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"BCANZ Hazard Proportion — ssd_hp_bcanz","text":"","code":"fits <- ssd_fit_bcanz(ssddata::ccme_boron) ssd_hp_bcanz(fits, nboot = 100) #> Warning: ssd_hp(proportion = FALSE) was deprecated in ssdtools 2.3.1. #> ℹ Please use ssd_hp(proportion = TRUE) instead. #> ℹ Please set the `proportion` argument to `ssd_hp_bcanz()` to be TRUE which #>   will cause it to return hazard proportions instead of percentages then update #>   your downstream code accordingly. #> # A tibble: 1 × 15 #>   dist     conc   est    se   lcl   ucl    wt level est_method ci_method        #>   <chr>   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>      <chr>            #> 1 average     1  3.90  2.21 0.123  7.83     1  0.95 multi      weighted_samples #> # ℹ 5 more variables: boot_method <chr>, nboot <dbl>, pboot <dbl>, #> #   dists <list>, samples <list>"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_is_censored.html","id":null,"dir":"Reference","previous_headings":"","what":"Is Censored — ssd_is_censored","title":"Is Censored — ssd_is_censored","text":"Tests object censored data. Test data frame censored. Test fitdists object censored.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_is_censored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is Censored — ssd_is_censored","text":"","code":"ssd_is_censored(x, ...)  # S3 method for class 'data.frame' ssd_is_censored(x, left = \"Conc\", right = left, ...)  # S3 method for class 'fitdists' ssd_is_censored(x, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_is_censored.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is Censored — ssd_is_censored","text":"x object. ... Unused. left string column data concentrations. right string column data right concentration values.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_is_censored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is Censored — ssd_is_censored","text":"flag indicating whether object censored.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_is_censored.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is Censored — ssd_is_censored","text":"","code":"ssd_is_censored(ssddata::ccme_boron) #> [1] FALSE ssd_is_censored(data.frame(Conc = 1, right = 2), right = \"right\") #> [1] TRUE  fits <- ssd_fit_dists(ssddata::ccme_boron) ssd_is_censored(fits) #> [1] FALSE"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma.html","id":null,"dir":"Reference","previous_headings":"","what":"Label numbers with significant digits and comma — ssd_label_comma","title":"Label numbers with significant digits and comma — ssd_label_comma","text":"Label numbers significant digits comma","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label numbers with significant digits and comma — ssd_label_comma","text":"","code":"ssd_label_comma(digits = 3, ..., big.mark = \",\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label numbers with significant digits and comma — ssd_label_comma","text":"digits whole number specifying number significant figures. ... Unused. big.mark string specifying used every 3 digits separate thousands x-axis.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label numbers with significant digits and comma — ssd_label_comma","text":"\"labelling\" function takes vector x returns character vector length(x) giving label input value.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label numbers with significant digits and comma — ssd_label_comma","text":"","code":"ggplot2::ggplot(data = ssddata::anon_e, ggplot2::aes(x = Conc / 10)) +   geom_ssdpoint() +   ggplot2::scale_x_log10(labels = ssd_label_comma())"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma_hc.html","id":null,"dir":"Reference","previous_headings":"","what":"Label numbers with significant digits and comma. If hc_value is present in breaks, put on new line and make bold. — ssd_label_comma_hc","title":"Label numbers with significant digits and comma. If hc_value is present in breaks, put on new line and make bold. — ssd_label_comma_hc","text":"Label numbers significant digits comma. hc_value present breaks, put new line make bold.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma_hc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Label numbers with significant digits and comma. If hc_value is present in breaks, put on new line and make bold. — ssd_label_comma_hc","text":"","code":"ssd_label_comma_hc(hc_value, digits = 3, ..., big.mark = \",\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma_hc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Label numbers with significant digits and comma. If hc_value is present in breaks, put on new line and make bold. — ssd_label_comma_hc","text":"hc_value number hazard concentration value offset. digits whole number specifying number significant figures. ... Unused. big.mark string specifying used every 3 digits separate thousands x-axis.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma_hc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Label numbers with significant digits and comma. If hc_value is present in breaks, put on new line and make bold. — ssd_label_comma_hc","text":"\"labelling\" function takes vector x returns character vector length(x) giving label input value.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_label_comma_hc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Label numbers with significant digits and comma. If hc_value is present in breaks, put on new line and make bold. — ssd_label_comma_hc","text":"","code":"ggplot2::ggplot(data = ssddata::anon_e, ggplot2::aes(x = Conc / 10)) +   geom_ssdpoint() +   ggplot2::scale_x_log10(labels = ssd_label_comma_hc(1.26))"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_licensing_md.html","id":null,"dir":"Reference","previous_headings":"","what":"Licensing Markdown — ssd_licensing_md","title":"Licensing Markdown — ssd_licensing_md","text":"string markdown code indicating licensing code documentation","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_licensing_md.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Licensing Markdown — ssd_licensing_md","text":"","code":"ssd_licensing_md()"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_licensing_md.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Licensing Markdown — ssd_licensing_md","text":"","code":"ssd_licensing_md() #> [1] \"## Licensing\\n  Copyright 2015-2023 Province of British Columbia\\\\\\n  Copyright 2021 Environment and Climate Change Canada\\\\\\n  Copyright 2023-2025 Australian Government Department of Climate Change, Energy, the Environment and Water\\n\\n  The documentation is released under the\\n  [CC BY 4.0 License](https://creativecommons.org/licenses/by/4.0/)\\n\\n  The code is released under the\\n  [Apache License 2.0](https://www.apache.org/licenses/LICENSE-2.0)\\n\""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_match_moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Match Moments — ssd_match_moments","title":"Match Moments — ssd_match_moments","text":"Gets named list values produce moment values (meanlog sdlog) distribution term.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_match_moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match Moments — ssd_match_moments","text":"","code":"ssd_match_moments(   dists = ssd_dists_bcanz(),   meanlog = 1,   sdlog = 1,   ...,   nsim = 1e+05 )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_match_moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match Moments — ssd_match_moments","text":"dists character vector distribution names. meanlog mean log scale. sdlog standard deviation log scale. ... Unused. nsim positive whole number number simulations generate.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_match_moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match Moments — ssd_match_moments","text":"named list values produce moment values distribution term.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_match_moments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Match Moments — ssd_match_moments","text":"","code":"moments <- ssd_match_moments() print(moments) #> $gamma #>   shape   scale  #> 1.62135 2.27616  #>  #> $lgumbel #> locationlog    scalelog  #>    0.534375    0.762500  #>  #> $llogis #> locationlog    scalelog  #>     0.96875     0.52500  #>  #> $lnorm #>  meanlog    sdlog  #> 1.091455 1.004492  #>  #> $lnorm_lnorm #>  meanlog1    sdlog1  meanlog2    sdlog2      pmix  #> 0.1409856 1.0659456 1.1849856 0.9799296 0.1487680  #>  #> $weibull #>    shape    scale  #> 1.352319 4.502075  #>  ssd_hc(moments) #> # A tibble: 6 × 9 #>   dist        proportion   est    se   lcl   ucl    wt nboot pboot #>   <chr>            <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <int> <dbl> #> 1 gamma             0.05 0.490    NA    NA    NA     1     0    NA #> 2 lgumbel           0.05 0.739    NA    NA    NA     1     0    NA #> 3 llogis            0.05 0.562    NA    NA    NA     1     0    NA #> 4 lnorm             0.05 0.571    NA    NA    NA     1     0    NA #> 5 lnorm_lnorm       0.05 0.469    NA    NA    NA     1     0    NA #> 6 weibull           0.05 0.501    NA    NA    NA     1     0    NA ssd_plot_cdf(moments)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_min_pmix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Minimum Proportion in Mixture Models — ssd_min_pmix","title":"Calculate Minimum Proportion in Mixture Models — ssd_min_pmix","text":"Calculate Minimum Proportion Mixture Models","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_min_pmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Minimum Proportion in Mixture Models — ssd_min_pmix","text":"","code":"ssd_min_pmix(n)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_min_pmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Minimum Proportion in Mixture Models — ssd_min_pmix","text":"n positive number observations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_min_pmix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Minimum Proportion in Mixture Models — ssd_min_pmix","text":"number 0 0.5 minimum proportion mixture models.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_min_pmix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Minimum Proportion in Mixture Models — ssd_min_pmix","text":"","code":"ssd_min_pmix(6) #> [1] 0.5 ssd_min_pmix(50) #> [1] 0.1"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_p.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative Distribution Function — ssd_pburrIII3","title":"Cumulative Distribution Function — ssd_pburrIII3","text":"Cumulative Distribution Function","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative Distribution Function — ssd_pburrIII3","text":"","code":"ssd_pburrIII3(   q,   shape1 = 1,   shape2 = 1,   scale = 1,   lower.tail = TRUE,   log.p = FALSE )  ssd_pgamma(q, shape = 1, scale = 1, lower.tail = TRUE, log.p = FALSE)  ssd_pgompertz(q, location = 1, shape = 1, lower.tail = TRUE, log.p = FALSE)  ssd_pinvpareto(q, shape = 3, scale = 1, lower.tail = TRUE, log.p = FALSE)  ssd_plgumbel(   q,   locationlog = 0,   scalelog = 1,   lower.tail = TRUE,   log.p = FALSE )  ssd_pllogis_llogis(   q,   locationlog1 = 0,   scalelog1 = 1,   locationlog2 = 1,   scalelog2 = 1,   pmix = 0.5,   lower.tail = TRUE,   log.p = FALSE )  ssd_pllogis(q, locationlog = 0, scalelog = 1, lower.tail = TRUE, log.p = FALSE)  ssd_plnorm_lnorm(   q,   meanlog1 = 0,   sdlog1 = 1,   meanlog2 = 1,   sdlog2 = 1,   pmix = 0.5,   lower.tail = TRUE,   log.p = FALSE )  ssd_plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)  ssd_pmulti(   q,   burrIII3.weight = 0,   burrIII3.shape1 = 1,   burrIII3.shape2 = 1,   burrIII3.scale = 1,   gamma.weight = 0,   gamma.shape = 1,   gamma.scale = 1,   gompertz.weight = 0,   gompertz.location = 1,   gompertz.shape = 1,   lgumbel.weight = 0,   lgumbel.locationlog = 0,   lgumbel.scalelog = 1,   llogis.weight = 0,   llogis.locationlog = 0,   llogis.scalelog = 1,   llogis_llogis.weight = 0,   llogis_llogis.locationlog1 = 0,   llogis_llogis.scalelog1 = 1,   llogis_llogis.locationlog2 = 1,   llogis_llogis.scalelog2 = 1,   llogis_llogis.pmix = 0.5,   lnorm.weight = 0,   lnorm.meanlog = 0,   lnorm.sdlog = 1,   lnorm_lnorm.weight = 0,   lnorm_lnorm.meanlog1 = 0,   lnorm_lnorm.sdlog1 = 1,   lnorm_lnorm.meanlog2 = 1,   lnorm_lnorm.sdlog2 = 1,   lnorm_lnorm.pmix = 0.5,   weibull.weight = 0,   weibull.shape = 1,   weibull.scale = 1,   lower.tail = TRUE,   log.p = FALSE )  ssd_pmulti_fitdists(q, fitdists, lower.tail = TRUE, log.p = FALSE)  ssd_pweibull(q, shape = 1, scale = 1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_p.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative Distribution Function — ssd_pburrIII3","text":"q vector quantiles. shape1 shape1 parameter. shape2 shape2 parameter. scale scale parameter. lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. log.p logical; TRUE, probabilities p given log(p). shape shape parameter. location location parameter. locationlog location log scale parameter. scalelog scale log scale parameter. locationlog1 locationlog1 parameter. scalelog1 scalelog1 parameter. locationlog2 locationlog2 parameter. scalelog2 scalelog2 parameter. pmix Proportion mixture parameter. meanlog1 mean log scale parameter. sdlog1 standard deviation log scale parameter. meanlog2 mean log scale parameter. sdlog2 standard deviation log scale parameter. meanlog mean log scale parameter. sdlog standard deviation log scale parameter. burrIII3.weight weight parameter Burr III distribution. burrIII3.shape1 shape1 parameter Burr III distribution. burrIII3.shape2 shape2 parameter Burr III distribution. burrIII3.scale scale parameter Burr III distribution. gamma.weight weight parameter gamma distribution. gamma.shape shape parameter gamma distribution. gamma.scale scale parameter gamma distribution. gompertz.weight weight parameter Gompertz distribution. gompertz.location location parameter Gompertz distribution. gompertz.shape shape parameter Gompertz distribution. lgumbel.weight weight parameter log-Gumbel distribution. lgumbel.locationlog location parameter log-Gumbel distribution. lgumbel.scalelog scale parameter log-Gumbel distribution. llogis.weight weight parameter log-logistic distribution. llogis.locationlog location parameter log-logistic distribution. llogis.scalelog scale parameter log-logistic distribution. llogis_llogis.weight weight parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog1 locationlog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog1 scalelog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog2 locationlog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog2 scalelog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.pmix pmix parameter log-logistic log-logistic mixture distribution. lnorm.weight weight parameter log-normal distribution. lnorm.meanlog meanlog parameter log-normal distribution. lnorm.sdlog sdlog parameter log-normal distribution. lnorm_lnorm.weight weight parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog1 meanlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog1 sdlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog2 meanlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog2 sdlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.pmix pmix parameter log-normal log-normal mixture distribution. weibull.weight weight parameter Weibull distribution. weibull.shape shape parameter Weibull distribution. weibull.scale scale parameter Weibull distribution. fitdists object class fitdists.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_p.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Cumulative Distribution Function — ssd_pburrIII3","text":"ssd_pburrIII3(): Cumulative Distribution Function BurrIII Distribution ssd_pgamma(): Cumulative Distribution Function Gamma Distribution ssd_pgompertz(): Cumulative Distribution Function Gompertz Distribution ssd_pinvpareto(): Cumulative Distribution Function Inverse Pareto Distribution ssd_plgumbel(): Cumulative Distribution Function Log-Gumbel Distribution ssd_pllogis_llogis(): Cumulative Distribution Function Log-Logistic/Log-Logistic Mixture Distribution ssd_pllogis(): Cumulative Distribution Function Log-Logistic Distribution ssd_plnorm_lnorm(): Cumulative Distribution Function Log-Normal/Log-Normal Mixture Distribution ssd_plnorm(): Cumulative Distribution Function Log-Normal Distribution ssd_pmulti(): Cumulative Distribution Function Multiple Distributions ssd_pmulti_fitdists(): Cumulative Distribution Function Multiple Distributions ssd_pweibull(): Cumulative Distribution Function Weibull Distribution","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative Distribution Function — ssd_pburrIII3","text":"","code":"ssd_pburrIII3(1) #> [1] 0.5  ssd_pgamma(1) #> [1] 0.6321206  ssd_pgompertz(1) #> [1] 0.8206259  ssd_pinvpareto(1) #> [1] 1  ssd_plgumbel(1) #> [1] 0.3678794  ssd_pllogis_llogis(1) #> [1] 0.3844707  ssd_pllogis(1) #> [1] 0.5  ssd_plnorm_lnorm(1) #> [1] 0.3293276  ssd_plnorm(1) #> [1] 0.5  # multi ssd_pmulti(1, gamma.weight = 0.5, lnorm.weight = 0.5) #> [1] 0.5660603  # multi fitdists fit <- ssd_fit_dists(ssddata::ccme_boron) ssd_pmulti_fitdists(1, fit) #> [1] 0.03898781  ssd_pweibull(1) #> [1] 0.6321206"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_pal.html","id":null,"dir":"Reference","previous_headings":"","what":"Color-blind Palette for SSD Plots — ssd_pal","title":"Color-blind Palette for SSD Plots — ssd_pal","text":"Color-blind Palette SSD Plots","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_pal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Color-blind Palette for SSD Plots — ssd_pal","text":"","code":"ssd_pal()"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_pal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Color-blind Palette for SSD Plots — ssd_pal","text":"character vector color blind palette 8 colors.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_pal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Color-blind Palette for SSD Plots — ssd_pal","text":"","code":"ssd_pal() #> function (n)  #> { #>     n_values <- length(values) #>     if (n > n_values) { #>         cli::cli_warn(\"This manual palette can handle a maximum of {n_values} values. You have supplied {n}\") #>     } #>     unname(values[seq_len(n)]) #> } #> <bytecode: 0x556bd73a5740> #> <environment: 0x556bd3db1278> #> attr(,\"class\") #> [1] \"pal_discrete\" \"scales_pal\"   \"function\"     #> attr(,\"type\") #> [1] \"colour\" #> attr(,\"nlevels\") #> [1] 8 #> attr(,\"max_n\") #> [1] 8"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Species Sensitivity Data and Distributions — ssd_plot","title":"Plot Species Sensitivity Data and Distributions — ssd_plot","text":"Plots species sensitivity data distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Species Sensitivity Data and Distributions — ssd_plot","text":"","code":"ssd_plot(   data,   pred,   left = \"Conc\",   right = left,   ...,   label = NULL,   shape = NULL,   color = NULL,   size,   linetype = NULL,   linecolor = NULL,   xlab = \"Concentration\",   ylab = \"Species Affected\",   ci = TRUE,   ribbon = TRUE,   hc = 0.05,   shift_x = 3,   add_x = 0,   bounds = c(left = 1, right = 1),   big.mark = \",\",   suffix = \"%\",   trans = \"log10\",   xbreaks = waiver(),   xlimits = NULL,   text_size = 11,   label_size = 2.5,   theme_classic = FALSE )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Species Sensitivity Data and Distributions — ssd_plot","text":"data data frame. pred data frame predictions. left string column data concentrations. right string column data right concentration values. ... Unused. label string column data labels. shape string column data shape aesthetic. color string column data color aesthetic. size number size labels. Deprecated label_size. #' linetype string column pred use linetype. linecolor string column pred use line color. xlab string x-axis label. ylab string x-axis label. ci flag specifying whether estimate confidence intervals (bootstrapping). ribbon flag indicating whether plot confidence interval grey ribbon opposed green solid lines. hc value 0 1 indicating proportion hazard concentration (NULL). shift_x value multiply label x values (adding add_x). add_x value add label x values (multiplying shift_x). bounds named non-negative numeric vector left right bounds uncensored missing (0 Inf) data terms orders magnitude relative extremes non-missing values. big.mark string specifying used every 3 digits separate thousands x-axis. suffix Additional text display number y-axis. trans string transformation use. Accepted values include \"log10\", \"log\", \"identity\" (\"log10\" default). xbreaks x-axis breaks one : NULL breaks waiver() default breaks numeric vector positions xlimits x-axis limits one : NULL use default scale range numeric vector length two providing limits. Use NA refer existing minimum maximum limits. text_size number text size. label_size number size labels. theme_classic flag specifying whether use classic theme default.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Species Sensitivity Data and Distributions — ssd_plot","text":"","code":"ssd_plot(ssddata::ccme_boron, boron_pred, label = \"Species\", shape = \"Group\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Cumulative Distribution Function (CDF) — ssd_plot_cdf","title":"Plot Cumulative Distribution Function (CDF) — ssd_plot_cdf","text":"Generic function plots cumulative distribution function (CDF).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Cumulative Distribution Function (CDF) — ssd_plot_cdf","text":"","code":"ssd_plot_cdf(x, ...)  # S3 method for class 'fitdists' ssd_plot_cdf(x, average = FALSE, delta = 9.21, ...)  # S3 method for class 'list' ssd_plot_cdf(x, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Cumulative Distribution Function (CDF) — ssd_plot_cdf","text":"x object. ... Additional arguments passed ssd_plot(). average flag specifying whether provide model averaged values opposed value distribution NA provides model averaged individual values. delta non-negative number specifying maximum absolute AIC difference cutoff. Distributions absolute AIC difference greater delta excluded calculations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cdf.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Plot Cumulative Distribution Function (CDF) — ssd_plot_cdf","text":"ssd_plot_cdf(fitdists): Plot CDF fitdists object ssd_plot_cdf(list): Plot CDF named list distributional parameter values","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Cumulative Distribution Function (CDF) — ssd_plot_cdf","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) ssd_plot_cdf(fits)  ssd_plot_cdf(fits, average = NA)   ssd_plot_cdf(list(   llogis = c(locationlog = 2, scalelog = 1),   lnorm = c(meanlog = 2, sdlog = 2) ))"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cullen and Frey Plot  — ssd_plot_cf","title":"Cullen and Frey Plot  — ssd_plot_cf","text":"Plots Cullen Frey graph skewness kurtosis non-censored data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cullen and Frey Plot  — ssd_plot_cf","text":"","code":"ssd_plot_cf(data, left = \"Conc\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cullen and Frey Plot  — ssd_plot_cf","text":"data data frame. left string column data concentrations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_cf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Cullen and Frey Plot  — ssd_plot_cf","text":"Deprecated fitdistrplus::descdist().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Species Sensitivity Data — ssd_plot_data","title":"Plot Species Sensitivity Data — ssd_plot_data","text":"Plots species sensitivity data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Species Sensitivity Data — ssd_plot_data","text":"","code":"ssd_plot_data(   data,   left = \"Conc\",   right = left,   ...,   label = NULL,   shape = NULL,   color = NULL,   size = 2.5,   xlab = \"Concentration\",   ylab = \"Species Affected\",   shift_x = 3,   add_x = 0,   big.mark = \",\",   suffix = \"%\",   bounds = c(left = 1, right = 1),   trans = \"log10\",   xbreaks = waiver() )"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Species Sensitivity Data — ssd_plot_data","text":"data data frame. left string column data concentrations. right string column data right concentration values. ... Unused. label string column data labels. shape string column data shape aesthetic. color string column data color aesthetic. size number size labels. Deprecated label_size. #' xlab string x-axis label. ylab string x-axis label. shift_x value multiply label x values (adding add_x). add_x value add label x values (multiplying shift_x). big.mark string specifying used every 3 digits separate thousands x-axis. suffix Additional text display number y-axis. bounds named non-negative numeric vector left right bounds uncensored missing (0 Inf) data terms orders magnitude relative extremes non-missing values. trans string transformation use. Accepted values include \"log10\", \"log\", \"identity\" (\"log10\" default). xbreaks x-axis breaks one : NULL breaks waiver() default breaks numeric vector positions","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_plot_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Species Sensitivity Data — ssd_plot_data","text":"","code":"ssd_plot_data(ssddata::ccme_boron, label = \"Species\", shape = \"Group\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_q.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile Function — ssd_qburrIII3","title":"Quantile Function — ssd_qburrIII3","text":"Quantile Function","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_q.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile Function — ssd_qburrIII3","text":"","code":"ssd_qburrIII3(   p,   shape1 = 1,   shape2 = 1,   scale = 1,   lower.tail = TRUE,   log.p = FALSE )  ssd_qgamma(p, shape = 1, scale = 1, lower.tail = TRUE, log.p = FALSE)  ssd_qgompertz(p, location = 1, shape = 1, lower.tail = TRUE, log.p = FALSE)  ssd_qinvpareto(p, shape = 3, scale = 1, lower.tail = TRUE, log.p = FALSE)  ssd_qlgumbel(   p,   locationlog = 0,   scalelog = 1,   lower.tail = TRUE,   log.p = FALSE )  ssd_qllogis_llogis(   p,   locationlog1 = 0,   scalelog1 = 1,   locationlog2 = 1,   scalelog2 = 1,   pmix = 0.5,   lower.tail = TRUE,   log.p = FALSE )  ssd_qllogis(p, locationlog = 0, scalelog = 1, lower.tail = TRUE, log.p = FALSE)  ssd_qlnorm_lnorm(   p,   meanlog1 = 0,   sdlog1 = 1,   meanlog2 = 1,   sdlog2 = 1,   pmix = 0.5,   lower.tail = TRUE,   log.p = FALSE )  ssd_qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE)  ssd_qmulti(   p,   burrIII3.weight = 0,   burrIII3.shape1 = 1,   burrIII3.shape2 = 1,   burrIII3.scale = 1,   gamma.weight = 0,   gamma.shape = 1,   gamma.scale = 1,   gompertz.weight = 0,   gompertz.location = 1,   gompertz.shape = 1,   lgumbel.weight = 0,   lgumbel.locationlog = 0,   lgumbel.scalelog = 1,   llogis.weight = 0,   llogis.locationlog = 0,   llogis.scalelog = 1,   llogis_llogis.weight = 0,   llogis_llogis.locationlog1 = 0,   llogis_llogis.scalelog1 = 1,   llogis_llogis.locationlog2 = 1,   llogis_llogis.scalelog2 = 1,   llogis_llogis.pmix = 0.5,   lnorm.weight = 0,   lnorm.meanlog = 0,   lnorm.sdlog = 1,   lnorm_lnorm.weight = 0,   lnorm_lnorm.meanlog1 = 0,   lnorm_lnorm.sdlog1 = 1,   lnorm_lnorm.meanlog2 = 1,   lnorm_lnorm.sdlog2 = 1,   lnorm_lnorm.pmix = 0.5,   weibull.weight = 0,   weibull.shape = 1,   weibull.scale = 1,   lower.tail = TRUE,   log.p = FALSE )  ssd_qmulti_fitdists(p, fitdists, lower.tail = TRUE, log.p = FALSE)  ssd_qweibull(p, shape = 1, scale = 1, lower.tail = TRUE, log.p = FALSE)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_q.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile Function — ssd_qburrIII3","text":"p vector probabilities. shape1 shape1 parameter. shape2 shape2 parameter. scale scale parameter. lower.tail logical; TRUE (default), probabilities P[X <= x], otherwise, P[X > x]. log.p logical; TRUE, probabilities p given log(p). shape shape parameter. location location parameter. locationlog location log scale parameter. scalelog scale log scale parameter. locationlog1 locationlog1 parameter. scalelog1 scalelog1 parameter. locationlog2 locationlog2 parameter. scalelog2 scalelog2 parameter. pmix Proportion mixture parameter. meanlog1 mean log scale parameter. sdlog1 standard deviation log scale parameter. meanlog2 mean log scale parameter. sdlog2 standard deviation log scale parameter. meanlog mean log scale parameter. sdlog standard deviation log scale parameter. burrIII3.weight weight parameter Burr III distribution. burrIII3.shape1 shape1 parameter Burr III distribution. burrIII3.shape2 shape2 parameter Burr III distribution. burrIII3.scale scale parameter Burr III distribution. gamma.weight weight parameter gamma distribution. gamma.shape shape parameter gamma distribution. gamma.scale scale parameter gamma distribution. gompertz.weight weight parameter Gompertz distribution. gompertz.location location parameter Gompertz distribution. gompertz.shape shape parameter Gompertz distribution. lgumbel.weight weight parameter log-Gumbel distribution. lgumbel.locationlog location parameter log-Gumbel distribution. lgumbel.scalelog scale parameter log-Gumbel distribution. llogis.weight weight parameter log-logistic distribution. llogis.locationlog location parameter log-logistic distribution. llogis.scalelog scale parameter log-logistic distribution. llogis_llogis.weight weight parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog1 locationlog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog1 scalelog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog2 locationlog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog2 scalelog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.pmix pmix parameter log-logistic log-logistic mixture distribution. lnorm.weight weight parameter log-normal distribution. lnorm.meanlog meanlog parameter log-normal distribution. lnorm.sdlog sdlog parameter log-normal distribution. lnorm_lnorm.weight weight parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog1 meanlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog1 sdlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog2 meanlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog2 sdlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.pmix pmix parameter log-normal log-normal mixture distribution. weibull.weight weight parameter Weibull distribution. weibull.shape shape parameter Weibull distribution. weibull.scale scale parameter Weibull distribution. fitdists object class fitdists.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_q.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Quantile Function — ssd_qburrIII3","text":"ssd_qburrIII3(): Quantile Function BurrIII Distribution ssd_qgamma(): Quantile Function Gamma Distribution ssd_qgompertz(): Quantile Function Gompertz Distribution ssd_qinvpareto(): Quantile Function Inverse Pareto Distribution ssd_qlgumbel(): Quantile Function Log-Gumbel Distribution ssd_qllogis_llogis(): Cumulative Distribution Function Log-Logistic/Log-Logistic Mixture Distribution ssd_qllogis(): Cumulative Distribution Function Log-Logistic Distribution ssd_qlnorm_lnorm(): Cumulative Distribution Function Log-Normal/Log-Normal Mixture Distribution ssd_qlnorm(): Cumulative Distribution Function Log-Normal Distribution ssd_qmulti(): Quantile Function Multiple Distributions ssd_qmulti_fitdists(): Quantile Function Multiple Distributions ssd_qweibull(): Cumulative Distribution Function Weibull Distribution","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_q.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile Function — ssd_qburrIII3","text":"","code":"ssd_qburrIII3(0.5) #> [1] 1  ssd_qgamma(0.5) #> [1] 0.6931472  ssd_qgompertz(0.5) #> [1] 0.526589  ssd_qinvpareto(0.5) #> [1] 0.7937005  ssd_qlgumbel(0.5) #> [1] 1.442695  ssd_qllogis_llogis(0.5) #> [1] 1.648721  ssd_qllogis(0.5) #> [1] 1  ssd_qlnorm_lnorm(0.5) #> [1] 1.648721  ssd_qlnorm(0.5) #> [1] 1  # multi ssd_qmulti(0.5, gamma.weight = 0.5, lnorm.weight = 0.5) #> [1] 0.8410196  # multi fitdists fit <- ssd_fit_dists(ssddata::ccme_boron) ssd_qmulti_fitdists(0.5, fit) #> [1] 15.32579  ssd_qweibull(0.5) #> [1] 0.6931472"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_r.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Number Generation — ssd_rburrIII3","title":"Random Number Generation — ssd_rburrIII3","text":"Random Number Generation","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_r.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Number Generation — ssd_rburrIII3","text":"","code":"ssd_rburrIII3(n, shape1 = 1, shape2 = 1, scale = 1, chk = TRUE)  ssd_rgamma(n, shape = 1, scale = 1, chk = TRUE)  ssd_rgompertz(n, location = 1, shape = 1, chk = TRUE)  ssd_rinvpareto(n, shape = 3, scale = 1, chk = TRUE)  ssd_rlgumbel(n, locationlog = 0, scalelog = 1, chk = TRUE)  ssd_rllogis_llogis(   n,   locationlog1 = 0,   scalelog1 = 1,   locationlog2 = 1,   scalelog2 = 1,   pmix = 0.5,   chk = TRUE )  ssd_rllogis(n, locationlog = 0, scalelog = 1, chk = TRUE)  ssd_rlnorm_lnorm(   n,   meanlog1 = 0,   sdlog1 = 1,   meanlog2 = 1,   sdlog2 = 1,   pmix = 0.5,   chk = TRUE )  ssd_rlnorm(n, meanlog = 0, sdlog = 1, chk = TRUE)  ssd_rmulti(   n,   burrIII3.weight = 0,   burrIII3.shape1 = 1,   burrIII3.shape2 = 1,   burrIII3.scale = 1,   gamma.weight = 0,   gamma.shape = 1,   gamma.scale = 1,   gompertz.weight = 0,   gompertz.location = 1,   gompertz.shape = 1,   lgumbel.weight = 0,   lgumbel.locationlog = 0,   lgumbel.scalelog = 1,   llogis.weight = 0,   llogis.locationlog = 0,   llogis.scalelog = 1,   llogis_llogis.weight = 0,   llogis_llogis.locationlog1 = 0,   llogis_llogis.scalelog1 = 1,   llogis_llogis.locationlog2 = 1,   llogis_llogis.scalelog2 = 1,   llogis_llogis.pmix = 0.5,   lnorm.weight = 0,   lnorm.meanlog = 0,   lnorm.sdlog = 1,   lnorm_lnorm.weight = 0,   lnorm_lnorm.meanlog1 = 0,   lnorm_lnorm.sdlog1 = 1,   lnorm_lnorm.meanlog2 = 1,   lnorm_lnorm.sdlog2 = 1,   lnorm_lnorm.pmix = 0.5,   weibull.weight = 0,   weibull.shape = 1,   weibull.scale = 1,   chk = TRUE )  ssd_rmulti_fitdists(n, fitdists, chk = TRUE)  ssd_rweibull(n, shape = 1, scale = 1, chk = TRUE)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_r.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Number Generation — ssd_rburrIII3","text":"n positive number observations. shape1 shape1 parameter. shape2 shape2 parameter. scale scale parameter. chk flag specifying whether check arguments. shape shape parameter. location location parameter. locationlog location log scale parameter. scalelog scale log scale parameter. locationlog1 locationlog1 parameter. scalelog1 scalelog1 parameter. locationlog2 locationlog2 parameter. scalelog2 scalelog2 parameter. pmix Proportion mixture parameter. meanlog1 mean log scale parameter. sdlog1 standard deviation log scale parameter. meanlog2 mean log scale parameter. sdlog2 standard deviation log scale parameter. meanlog mean log scale parameter. sdlog standard deviation log scale parameter. burrIII3.weight weight parameter Burr III distribution. burrIII3.shape1 shape1 parameter Burr III distribution. burrIII3.shape2 shape2 parameter Burr III distribution. burrIII3.scale scale parameter Burr III distribution. gamma.weight weight parameter gamma distribution. gamma.shape shape parameter gamma distribution. gamma.scale scale parameter gamma distribution. gompertz.weight weight parameter Gompertz distribution. gompertz.location location parameter Gompertz distribution. gompertz.shape shape parameter Gompertz distribution. lgumbel.weight weight parameter log-Gumbel distribution. lgumbel.locationlog location parameter log-Gumbel distribution. lgumbel.scalelog scale parameter log-Gumbel distribution. llogis.weight weight parameter log-logistic distribution. llogis.locationlog location parameter log-logistic distribution. llogis.scalelog scale parameter log-logistic distribution. llogis_llogis.weight weight parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog1 locationlog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog1 scalelog1 parameter log-logistic log-logistic mixture distribution. llogis_llogis.locationlog2 locationlog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.scalelog2 scalelog2 parameter log-logistic log-logistic mixture distribution. llogis_llogis.pmix pmix parameter log-logistic log-logistic mixture distribution. lnorm.weight weight parameter log-normal distribution. lnorm.meanlog meanlog parameter log-normal distribution. lnorm.sdlog sdlog parameter log-normal distribution. lnorm_lnorm.weight weight parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog1 meanlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog1 sdlog1 parameter log-normal log-normal mixture distribution. lnorm_lnorm.meanlog2 meanlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.sdlog2 sdlog2 parameter log-normal log-normal mixture distribution. lnorm_lnorm.pmix pmix parameter log-normal log-normal mixture distribution. weibull.weight weight parameter Weibull distribution. weibull.shape shape parameter Weibull distribution. weibull.scale scale parameter Weibull distribution. fitdists object class fitdists.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_r.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Random Number Generation — ssd_rburrIII3","text":"ssd_rburrIII3(): Random Generation BurrIII Distribution ssd_rgamma(): Random Generation Gamma Distribution ssd_rgompertz(): Random Generation Gompertz Distribution ssd_rinvpareto(): Random Generation Inverse Pareto Distribution ssd_rlgumbel(): Random Generation log-Gumbel Distribution ssd_rllogis_llogis(): Random Generation Log-Logistic/Log-Logistic Mixture Distribution ssd_rllogis(): Random Generation Log-Logistic Distribution ssd_rlnorm_lnorm(): Random Generation Log-Normal/Log-Normal Mixture Distribution ssd_rlnorm(): Random Generation Log-Normal Distribution ssd_rmulti(): Random Generation Multiple Distributions ssd_rmulti_fitdists(): Random Generation Multiple Distributions ssd_rweibull(): Random Generation Weibull Distribution","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_r.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Number Generation — ssd_rburrIII3","text":"","code":"withr::with_seed(50, { x <- ssd_rburrIII3(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, { x <- ssd_rgamma(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, { x <- ssd_rgompertz(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, { x <- ssd_rinvpareto(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, {   x <- ssd_rlgumbel(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, {   x <- ssd_rllogis_llogis(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, {   x <- ssd_rllogis(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, {   x <- ssd_rlnorm_lnorm(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, {   x <- ssd_rlnorm(10000) }) hist(x, breaks = 1000)   withr::with_seed(50, {   x <- ssd_rmulti(1000, gamma.weight = 0.5, lnorm.weight = 0.5) }) hist(x, breaks = 100)   # multi fitdists fit <- ssd_fit_dists(ssddata::ccme_boron) ssd_rmulti_fitdists(2, fit) #> [1] 0.9414309 7.3397086  withr::with_seed(50, {   x <- ssd_rweibull(10000) }) hist(x, breaks = 1000)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_sort_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort Species Sensitivity Data — ssd_sort_data","title":"Sort Species Sensitivity Data — ssd_sort_data","text":"Sorts Species Sensitivity Data empirical cumulative density (ECD).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_sort_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort Species Sensitivity Data — ssd_sort_data","text":"","code":"ssd_sort_data(data, left = \"Conc\", right = left)"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_sort_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort Species Sensitivity Data — ssd_sort_data","text":"data data frame. left string column data concentrations. right string column data right concentration values.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_sort_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort Species Sensitivity Data — ssd_sort_data","text":"data sorted empirical cumulative density.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_sort_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sort Species Sensitivity Data — ssd_sort_data","text":"Useful sorting data using geom_ssdpoint() geom_ssdsegment() construct plots censored data stat = identity ensure order various components.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_sort_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort Species Sensitivity Data — ssd_sort_data","text":"","code":"ssd_sort_data(ssddata::ccme_boron) #> # A tibble: 28 × 5 #>    Chemical Species                Conc Group        Units #>    <chr>    <chr>                 <dbl> <fct>        <chr> #>  1 Boron    Elodea canadensis       1   Plant        mg/L  #>  2 Boron    Spirodella polyrrhiza   1.8 Plant        mg/L  #>  3 Boron    Chlorella pyrenoidosa   2   Plant        mg/L  #>  4 Boron    Oncorhynchus mykiss     2.1 Fish         mg/L  #>  5 Boron    Ictalurus punctatus     2.4 Fish         mg/L  #>  6 Boron    Phragmites australis    4   Plant        mg/L  #>  7 Boron    Micropterus salmoides   4.1 Fish         mg/L  #>  8 Boron    Chlorella vulgaris      5.2 Plant        mg/L  #>  9 Boron    Daphnia magna           6   Invertebrate mg/L  #> 10 Boron    Brachydanio rerio      10   Fish         mg/L  #> # ℹ 18 more rows"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_bc.html","id":null,"dir":"Reference","previous_headings":"","what":"Water Quality Guideline for British Columbia  — ssd_wqg_bc","title":"Water Quality Guideline for British Columbia  — ssd_wqg_bc","text":"Calculates 5% Hazard Concentration using ssd_fit_bcanz() ssd_hc().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_bc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Water Quality Guideline for British Columbia  — ssd_wqg_bc","text":"","code":"ssd_wqg_bc(data, left = \"Conc\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_bc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Water Quality Guideline for British Columbia  — ssd_wqg_bc","text":"data data frame. left string column data concentrations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_bc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Water Quality Guideline for British Columbia  — ssd_wqg_bc","text":"tibble 5% hazard concentration 95% confidence intervals.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_bc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Water Quality Guideline for British Columbia  — ssd_wqg_bc","text":"","code":"if (FALSE) { # \\dontrun{ ssd_wqg_bc(ssddata::ccme_boron) } # }"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_burrlioz.html","id":null,"dir":"Reference","previous_headings":"","what":"Water Quality Guideline for Burrlioz  — ssd_wqg_burrlioz","title":"Water Quality Guideline for Burrlioz  — ssd_wqg_burrlioz","text":"Calculates 5% Hazard Concentration using ssd_fit_burrlioz() ssd_hc().","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_burrlioz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Water Quality Guideline for Burrlioz  — ssd_wqg_burrlioz","text":"","code":"ssd_wqg_burrlioz(data, left = \"Conc\")"},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_burrlioz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Water Quality Guideline for Burrlioz  — ssd_wqg_burrlioz","text":"data data frame. left string column data concentrations.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_burrlioz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Water Quality Guideline for Burrlioz  — ssd_wqg_burrlioz","text":"tibble 5% hazard concentration 95% confidence intervals.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssd_wqg_burrlioz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Water Quality Guideline for Burrlioz  — ssd_wqg_burrlioz","text":"","code":"if (FALSE) { # \\dontrun{ ssd_wqg_burrlioz(ssddata::ccme_boron) } # }"},{"path":"https://bcgov.github.io/ssdtools/reference/ssdtools-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"ggproto Classes for Plotting Species Sensitivity Data and Distributions — ssdtools-ggproto","title":"ggproto Classes for Plotting Species Sensitivity Data and Distributions — ssdtools-ggproto","text":"ggproto Classes Plotting Species Sensitivity Data Distributions","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/ssdtools-ggproto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ggproto Classes for Plotting Species Sensitivity Data and Distributions — ssdtools-ggproto","text":"","code":"StatSsdpoint  StatSsdsegment  GeomSsdpoint  GeomSsdsegment  GeomHcintersect  GeomXribbon"},{"path":"https://bcgov.github.io/ssdtools/reference/ssdtools-ggproto.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"ggproto Classes for Plotting Species Sensitivity Data and Distributions — ssdtools-ggproto","text":"object class StatSsdpoint (inherits Stat, ggproto, gg) length 4. object class StatSsdsegment (inherits Stat, ggproto, gg) length 4. object class GeomSsdpoint (inherits GeomPoint, Geom, ggproto, gg) length 1. object class GeomSsdsegment (inherits GeomSegment, Geom, ggproto, gg) length 1. object class GeomHcintersect (inherits Geom, ggproto, gg) length 5. object class GeomXribbon (inherits Geom, ggproto, gg) length 6.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssdtools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ssdtools: Species Sensitivity Distributions — ssdtools-package","title":"ssdtools: Species Sensitivity Distributions — ssdtools-package","text":"Species sensitivity distributions cumulative probability distributions fitted toxicity concentrations different species described Posthuma et al.(2001) <isbn:9781566705783>. ssdtools package uses Maximum Likelihood fit distributions gamma, log-logistic, log-normal log-normal log-normal mixture. Multiple distributions can averaged using Akaike Information Criteria. Confidence intervals hazard concentrations proportions produced bootstrapping.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/ssdtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ssdtools: Species Sensitivity Distributions — ssdtools-package","text":"Maintainer: Joe Thorley joe@poissonconsulting.ca (ORCID) Authors: Rebecca Fisher R.Fisher@aims.gov.au David Fox david.fox@environmetrics.net.au Carl Schwarz contributors: Angeline Tillmanns [contributor] Seb Dalgarno seb@poissonconsulting.ca (ORCID) [contributor] Kathleen McTavish [contributor] Heather Thompson [contributor] Doug Spry [contributor] Rick van Dam [contributor] Graham Batley [contributor] Ali Azizishirazi [contributor] Nadine Hussein nadine@poissonconsulting.ca (ORCID) [contributor] Sarah Lyons sarah@poissonconsulting.ca (ORCID) [contributor] Duncan Kennedy duncan@poissonconsulting.ca (ORCID) [contributor] Stephanie Hazlitt [contributor] Hadley Wickham [contributor] Sergio Ibarra Espinosa [contributor] Andy Teucher [contributor] Emilie Doussantousse [contributor] Nan-Hung Hsieh [contributor] Florencia D'Andrea [contributor] Eduard Szöcs (ORCID) [contributor] Province British Columbia [funder, copyright holder] Environment Climate Change Canada [funder, copyright holder] Australian Government Department Climate Change, Energy, Environment Water [funder, copyright holder]","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/stat_ssd.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Species Sensitivity Data  — stat_ssd","title":"Plot Species Sensitivity Data  — stat_ssd","text":"Uses empirical cumulative density/distribution visualize species sensitivity data.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/stat_ssd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Species Sensitivity Data  — stat_ssd","text":"","code":"stat_ssd(   mapping = NULL,   data = NULL,   geom = \"point\",   position = \"identity\",   ...,   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"https://bcgov.github.io/ssdtools/reference/stat_ssd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Species Sensitivity Data  — stat_ssd","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geometric object use display data layer. using stat_*() function construct layer, geom argument can used override default coupling stats geoms. geom argument accepts following: Geom ggproto subclass, example GeomPoint. string naming geom. give geom string, strip function name geom_ prefix. example, use geom_point(), give geom \"point\". information ways specify geom, see layer geom documentation. position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/subset.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Subset fitdists Object — subset.fitdists","title":"Subset fitdists Object — subset.fitdists","text":"Select subset distributions fitdists object. Akaike Information-theoretic Criterion differences calculated selecting distributions named select.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/subset.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subset fitdists Object — subset.fitdists","text":"","code":"# S3 method for class 'fitdists' subset(x, select = names(x), ..., delta = Inf, strict = TRUE)"},{"path":"https://bcgov.github.io/ssdtools/reference/subset.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subset fitdists Object — subset.fitdists","text":"x object. select character vector distributions select. ... Unused. delta non-negative number specifying maximum absolute AIC difference cutoff. Distributions absolute AIC difference greater delta excluded calculations. strict flag indicating whether elements select must present.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/subset.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subset fitdists Object — subset.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) subset(fits, c(\"gamma\", \"lnorm\")) #> Distribution 'gamma' #>   scale 25.1268 #>   shape 0.950179 #>  #> Distribution 'lnorm' #>   meanlog 2.56165 #>   sdlog 1.24154 #>  #> Parameters estimated from 28 rows of data."},{"path":"https://bcgov.github.io/ssdtools/reference/tidy.fitdists.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a fitdists Object into a Tibble — tidy.fitdists","title":"Turn a fitdists Object into a Tibble — tidy.fitdists","text":"Turns fitdists object tidy tibble estimates (est) standard errors (se) terms (term) distributions (dist).","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/tidy.fitdists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a fitdists Object into a Tibble — tidy.fitdists","text":"","code":"# S3 method for class 'fitdists' tidy(x, all = FALSE, ...)"},{"path":"https://bcgov.github.io/ssdtools/reference/tidy.fitdists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a fitdists Object into a Tibble — tidy.fitdists","text":"x object. flag specifying whether also return transformed parameters. ... Unused.","code":""},{"path":"https://bcgov.github.io/ssdtools/reference/tidy.fitdists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a fitdists Object into a Tibble — tidy.fitdists","text":"tidy tibble estimates standard errors.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/reference/tidy.fitdists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a fitdists Object into a Tibble — tidy.fitdists","text":"","code":"fits <- ssd_fit_dists(ssddata::ccme_boron) tidy(fits) #> # A tibble: 15 × 4 #>    dist        term           est    se #>    <chr>       <chr>        <dbl> <dbl> #>  1 gamma       scale       25.1   7.64  #>  2 gamma       shape        0.950 0.223 #>  3 lgumbel     locationlog  1.92  0.247 #>  4 lgumbel     scalelog     1.23  0.173 #>  5 llogis      locationlog  2.63  0.248 #>  6 llogis      scalelog     0.740 0.114 #>  7 lnorm       meanlog      2.56  0.235 #>  8 lnorm       sdlog        1.24  0.166 #>  9 lnorm_lnorm meanlog1     0.949 0.318 #> 10 lnorm_lnorm meanlog2     3.20  0.253 #> 11 lnorm_lnorm pmix         0.284 0.123 #> 12 lnorm_lnorm sdlog1       0.554 0.212 #> 13 lnorm_lnorm sdlog2       0.769 0.194 #> 14 weibull     scale       23.5   4.86  #> 15 weibull     shape        0.966 0.145 tidy(fits, all = TRUE) #> # A tibble: 24 × 4 #>    dist    term             est    se #>    <chr>   <chr>          <dbl> <dbl> #>  1 gamma   log_scale     3.22   0.304 #>  2 gamma   log_shape    -0.0511 0.234 #>  3 gamma   scale        25.1    7.64  #>  4 gamma   shape         0.950  0.223 #>  5 lgumbel locationlog   1.92   0.247 #>  6 lgumbel log_scalelog  0.209  0.140 #>  7 lgumbel scalelog      1.23   0.173 #>  8 llogis  locationlog   2.63   0.248 #>  9 llogis  log_scalelog -0.301  0.154 #> 10 llogis  scalelog      0.740  0.114 #> # ℹ 14 more rows"},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"features-2-4-0","dir":"Changelog","previous_headings":"","what":"Features","title":"ssdtools 2.4.0","text":"Add model fitting right censoring distributions (@eduardszoecs). Added following ci_methods ssd_hc(), ssd_hp() predict(): \"GMACL\", \"MAW1\", \"MAW2\", \"GMAW1\", \"GMAW2\", \"arithmetic_samples\" \"geometric_samples\". Added rescale = \"odds\" option ssd_fit_dists() allow fitting dilution data including odds_max = 0.999 argument handle values 1. Improved method calculate ssd_ecd() ensures symmetric 0.5. Ensures weighted_samples sum nboot. ssd_hc(), ssd_hp() predict() now return missing values se, lcl ucl nboot = 0.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"functions-2-4-0","dir":"Changelog","previous_headings":"","what":"Functions","title":"ssdtools 2.4.0","text":"Added ssd_ci_methods() ssd_est_methods() get character vector methods. Added ssd_at_boundary() ssd_computable(). Added class attribute preserving [[ [ operators.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"arguments-2-4-0","dir":"Changelog","previous_headings":"","what":"Arguments","title":"ssdtools 2.4.0","text":"Added strict = TRUE argument subset() allow subsetting distributions missing (strict = FALSE).","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"output-columns-2-4-0","dir":"Changelog","previous_headings":"","what":"Output Columns","title":"ssdtools 2.4.0","text":"Added column \"dists\" ssd_hc(), ssd_hp() predict() list distributions. Added \"est_method\" \"ci_method\" columns tibble output ssd_hc(), ssd_hp() predict(). Added \"level\" column tibble output ssd_hc(), ssd_hp() predict(). Added \"at_bound\" \"computable\" columns tibble output gof(). Renamed \"method\" column \"boot_method\" tibble output ssd_hc(), ssd_hp() predict().","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"error-checking-2-4-0","dir":"Changelog","previous_headings":"","what":"Error Checking","title":"ssdtools 2.4.0","text":"Added … check unused ensure matching names subsequent arguments. Fixed error message Inf weights. ssd_fit_bcanz() now checks dists subset ssd_dists_bcanz().","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"deprecated-2-4-0","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"ssdtools 2.4.0","text":"Deprecated ssd_dists_shiny(). Deprecated ties.method = \"first\" argument ssd_ecd(). Soft-deprecated est_method = \"multi\" argument multi_est = TRUE ssd_hc(), ssd_hp() predict(). Soft-deprecated proportion = FALSE proportion = TRUE argument ssd_hp() switches output percentages proportions. Soft-deprecated wt = FALSE wt = TRUE argument ssd_gof() glance() replaces column \"weight\" \"wt\" output. Soft-deprecated ci_method = \"weighted_arithmetic\" ci_method = \"MACL\".","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-230","dir":"Changelog","previous_headings":"","what":"ssdtools 2.3.0","title":"ssdtools 2.3.0","text":"CRAN release: 2025-02-20 Added valid column dist_data indicate “invpareto” invalid likelihood. Modified ssd_fit_dists() fits distributions invalid likelihoods isolation. Modified ssd_hc() ssd_hp() average just one distribution. Updated citations Thorley et al. (2025).","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-220","dir":"Changelog","previous_headings":"","what":"ssdtools 2.2.0","title":"ssdtools 2.2.0","text":"CRAN release: 2025-01-14 Added ssd_label_comma_hc() function label numbers significant digits comma offset hazard concentration value present breaks. Added ssd_dists_shiny() define distributions use shiny app. Added x_limits = NULL allow setting x-axis limits. Added hc_value = NULL pass hazard concentration value. Restricted trans argument \"identity\", \"log10\" “log”. Added text_size argument. Added theme_classic = FALSE argument switch classic theme. Soft-deprecated size argument label_size. Turned x-axis minor breaks plots (consistency) HC major break causing multiple minor breaks ssd_plot().","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-210","dir":"Changelog","previous_headings":"","what":"ssdtools 2.1.0","title":"ssdtools 2.1.0","text":"CRAN release: 2024-10-21 Added ssd_xxmulti_fitdists() family functions (ssd_rmulti_fitdists(), ssd_pmulti_fitdists() ssd_qmulti_fitdists()) accept object class fitdists. Set lnorm.weight = 1 instead 1 ssd_xxmulti() family functions (ssd_rmulti(), ssd_pmulti() ssd_qmulti) avoid incorrect values .call(\"ssd_xxmulti\", c(..., estimates(fits)) fits include log-normal distribution.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-200","dir":"Changelog","previous_headings":"","what":"ssdtools 2.0.0","title":"ssdtools 2.0.0","text":"CRAN release: 2024-10-09 ssdtools v2.0.0, now includes David Fox Rebecca Fisher co-authors, second major release ssdtools.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"major-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"ssdtools 2.0.0","text":"following changes major sense alter previous hazard concentrations break code.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"modifications-2-0-0","dir":"Changelog","previous_headings":"Major Changes > Model Fitting and Averaging","what":"Modifications","title":"ssdtools 2.0.0","text":"following arguments added ssd_hc() ssd_hp() multi_est = TRUE calculate model averaged estimates treating distributions constituting single mixture distribution (previously effectively FALSE). method_ci = \"weighted_samples\" specify whether use \"weighted_samples\", \"weighted_arithmetic\", \"multi_free\" \"multi_fixed\" methods generate confidence intervals (previously effectively \"weighted_arithmetic\"). addition data frame returned ssd_hc() predict() now includes column proportion values 0 1 opposed column percentage 0 100. Finally, censored data confidence intervals can now estimated non-parametric bootstrapping methods parametrically bootstrapping censored data require review.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"minor-changes-2-0-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"ssdtools 2.0.0","text":"remaining changes minor.","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"modifications-2-0-0-1","dir":"Changelog","previous_headings":"Minor Changes > Model Fitting","what":"Modifications","title":"ssdtools 2.0.0","text":"following arguments ssd_fit_dists() changed reduce chances lnorm_lnorm bimodal distribution dropped default set: min_pmix = ssd_min_pmix(nrow(data)) default min_pmix 0.1 3/nrow(data) greater. at_boundary_ok = TRUE. computable = TRUE. changes also allowed min_pboot = 0.95 argument changed 0.80 bootstrapping functions. worth noting second two changes also reduce chances BurrIII distribution dropped. addition rescale = TRUE now divides geometric mean minimum maximum positive finite values opposed dividing geometric mean maximum finite value improve chances convergence although ssd_fit_bcanz() longer rescales default. minor modifications model fitting functions include estimates.fitdists() now includes weights returned parameters well all_estimates = FALSE argument allow parameter values implemented distributions included. delta = 7 instead delta = 9.21 ensure weight included models least 0.01. seeds now allocated bootstrap samples opposed distributions (results speed gain cores number distributions). lnorm gompertz initial values offset maximum likelihood estimates avoid errors optim(). following functions arguments also added: ssd_hp_bcanz() ssd_hp.fitburrlioz() get hazard proportions. ssd_pmulti(), ssd_qmulti() ssd_rmulti() combined mixture distributions. ssd_exx() family functions (.e. ssd_elnorm(), ssd_egamma() etc) get default parameter estimates distributions. ssd_censor_data() censor data. npars = c(2L, 5L) argument ssd_dists_bcanz() specify number parameters. dists = ssd_dists_bcanz() ssd_fit_bcanz() allow packages modify. samples = FALSE ssd_hc() ssd_hp() include bootstrap samples list numeric vector(s). save_to = NULL ssd_hc() ssd_hp() specify directory save bootstrap datasets csv files parameter estimates .rds files.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"fixes-2-0-0","dir":"Changelog","previous_headings":"Minor Changes > Model Fitting","what":"Fixes","title":"ssdtools 2.0.0","text":"ssd_hc() ssd_hp() now return data frame parametric column. ssd_hp() now return data frame wt column.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"deprecations-2-0-0","dir":"Changelog","previous_headings":"Minor Changes > Model Fitting","what":"Deprecations","title":"ssdtools 2.0.0","text":"following functions arguments deprecated: ssd_wqg_bc() ssd_wqg_burrlioz() deprecated. percent = 5 ssd_hc() predict() soft-deprecated proportion = 0.05. is_censored() now defunct.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"plotting-2-0-0","dir":"Changelog","previous_headings":"Minor Changes","what":"Plotting","title":"ssdtools 2.0.0","text":"Perhaps biggest plotting change ssd_plot_cdf() now plots average SSD together individual distributions average = NA. addition, following functions arguments added. scale_fill_ssd() color-blind fill scale. ssd_label_comma() formatting x-axis labels. trans = \"log10\" add_x = 0 ssd_plot() ssd_plot_data() control x-axis scale. big.mark = \",\" x-axis labels suffix = \"%\" y-axis labels plotting functions. following functions deprecated comma_signif() soft-deprecated. is_censored(), plot.fitdists(), ssd_plot_cf() geom_ssd() stat_ssd() now defunct.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"data-2-0-0","dir":"Changelog","previous_headings":"Minor Changes","what":"Data","title":"ssdtools 2.0.0","text":"following data sets removed ccme_data ccme_boron (available ssddata package). pearson1000 data set.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-106","dir":"Changelog","previous_headings":"","what":"ssdtools 1.0.6","title":"ssdtools 1.0.6","text":"CRAN release: 2023-09-07 Fix CRAN ATLAS error","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-105","dir":"Changelog","previous_headings":"","what":"ssdtools 1.0.5","title":"ssdtools 1.0.5","text":"CRAN release: 2023-08-29 Stopped predict hc/hp test errors linux.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-104","dir":"Changelog","previous_headings":"","what":"ssdtools 1.0.4","title":"ssdtools 1.0.4","text":"CRAN release: 2023-05-17 Added contributors. Now tests table values 6 significant figures. Fixed bug preserving NaN (returning NA_real_) cumulative distribution quantile functions.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-103","dir":"Changelog","previous_headings":"","what":"ssdtools 1.0.3","title":"ssdtools 1.0.3","text":"CRAN release: 2023-04-12 Replaced size = 0.5 linewidth = 0.5 geom_hcintersect() geom_xribbon(). Replaced aes_string() aes() examples (internally). Removed use tidyverse package. Now tests values 12 significant digits. Fixed description ssd_hp() percent affected rather percent protected.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-102","dir":"Changelog","previous_headings":"","what":"ssdtools 1.0.2","title":"ssdtools 1.0.2","text":"CRAN release: 2022-05-14 Fixed bug producing estimates 0 lower HCx values log-normal mixture model rescaled data spanning many orders magnitude.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-101","dir":"Changelog","previous_headings":"","what":"ssdtools 1.0.1","title":"ssdtools 1.0.1","text":"CRAN release: 2022-04-10 Added delta = 7 argument ssd_plot_cdf().","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-100","dir":"Changelog","previous_headings":"","what":"ssdtools 1.0.0","title":"ssdtools 1.0.0","text":"CRAN release: 2022-04-01 ssdtools version 1.0.0 first major release ssdtools important improvements breaking changes.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"fitting-1-0-0","dir":"Changelog","previous_headings":"","what":"Fitting","title":"ssdtools 1.0.0","text":"important change functionality ssd_fit_dists() switch model fitting using fitdistrplus TMB allow full control model specification well improved handling censored data. change internal directly affect user interface. Although hoped model fitting faster currently case. result change fitdists objects returned ssd_fit_dists() previous versions ssdtools compatible major release regenerated.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"bcanz-1-0-0","dir":"Changelog","previous_headings":"","what":"BCANZ","title":"ssdtools 1.0.0","text":"result international collaboration British Columbia Canada Australia New Zealand selected set recommended distributions model averaging settings generating final guidelines. distributions {r} > ssd_dists_bcanz() [1] \"gamma\"       \"lgumbel\"     \"llogis\"      \"lnorm\"       \"lnorm_lnorm\" \"weibull\" ssd_fit_bcanz() ssd_hc_bcanz() functions added package facilitate fitting distributions estimation hazard concentrations using recommended settings.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"convergence-1-0-0","dir":"Changelog","previous_headings":"BCANZ","what":"Convergence","title":"ssdtools 1.0.0","text":"previous version ssdtools distribution considered converged following condition met stats::optim() returns code 0 (indicating successful completion). new version additional two conditions must also met Bounded parameters boundary (condition can turned setting at_boundary_ok = TRUE user can specify different boundary values - see ) Standard errors computable parameter values (condition can turned setting computable = FALSE)","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"censored-data-1-0-0","dir":"Changelog","previous_headings":"BCANZ","what":"Censored Data","title":"ssdtools 1.0.0","text":"Censoring can now specified providing data set one rows finite value left column smaller finite value right column (interval censored) zero missing value left column finite value right column (left censored) currently possible fit distributions data sets infinite missing value right column finite value left column (right censored) Rows zero missing value left column infinite missing value right column (fully censored) uninformative result error.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"akaike-weights-1-0-0","dir":"Changelog","previous_headings":"BCANZ > Censored Data","what":"Akaike Weights","title":"ssdtools 1.0.0","text":"uncensored data, Akaike Weights calculated using AICc (corrects small sample size). case censored data, Akaike Weights calculated using AIC (sample size estimated) distributions number parameters (ensure weights valid).","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"weighted-data-1-0-0","dir":"Changelog","previous_headings":"BCANZ","what":"Weighted Data","title":"ssdtools 1.0.0","text":"Weighting must positive values <= 1000.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"distributions-1-0-0","dir":"Changelog","previous_headings":"BCANZ","what":"Distributions","title":"ssdtools 1.0.0","text":"Previously density functions available distributions exported R functions make accessible fitdistrplus. meant ssdtools loaded fit distributions. density functions now defined C++ TMB templates longer exported. distribution, quantile random generation functions generally useful still exported now prefixed ssd_ prevent clashes existing functions packages. Thus example plnorm(), qlnorm() rlnorm() renamed ssd_plnorm(), ssd_qlnorm() ssd_rlnorm(). following distributions added (case burrIII3 readded) new version burrIII3 - burrIII three parameter distribution invpareto - inverse pareto (bias correction scale order statistic) lnorm_lnorm log-normal/log-normal mixture distribution llogis_llogis log-logistic/log-logistic mixture distribution following arguments added ssd_fit_dists() rescale (default FALSE) specify whether rescale concentrations values dividing largest (finite) value. alters parameter estimates, can help distributions converge, estimates hazard concentrations/protections. reweight (default FALSE) specify whether reweight data points dividing largest weight. at_boundary_ok (default FALSE) specifying whether distribution one parameters boundary converged. min_pmix (default 0) specify boundary minimum proportion mixture distribution. range_shape1 (default c(0.05, 20)) specify lower upper boundaries shape1 parameter burrIII3 distribution. range_shape2 (default range_shape2) specify lower upper boundaries shape2 parameter burrIII3 distribution. control (default empty list) pass list control parameters stats::optim(). also worth noting default value computable argument switched FALSE TRUE enforce stricter requirements convergence (see ).","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"subsets-of-distributions-1-0-0","dir":"Changelog","previous_headings":"BCANZ > Distributions","what":"Subsets of Distributions","title":"ssdtools 1.0.0","text":"following added handle multiple distributions ssd_dists() specify subsets available distributions. delta argument (default 7) subset() generic keep distributions within specified AIC(c) difference best supported distribution.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"burrlioz-1-0-0","dir":"Changelog","previous_headings":"BCANZ","what":"Burrlioz","title":"ssdtools 1.0.0","text":"function ssd_fit_burrlioz() added approximate behaviour Burrlioz.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"hazard-concentrationprotection-estimation-1-0-0","dir":"Changelog","previous_headings":"","what":"Hazard Concentration/Protection Estimation","title":"ssdtools 1.0.0","text":"Hazard concentration estimation performed ssd_hc() (wrapped predict()) hazard protection estimation ssd_hp(). default confidence intervals estimated parametric bootstrapping. reduce time required bootstrapping, parallelization implemented using future package. following arguments added ssd_hc() ssd_hp() delta (default 7) keep distributions within specified AIC difference best supported distribution. min_pboot (default 0.90) specify minimum proportion bootstrap samples must successfully fit. parametric (default TRUE) allow non-parametric bootstrapping. control (default empty list) pass list control parameters stats::optim(). following columns added output data frame wt specify Akaike weight. method indicate whether parametric non-parametric bootstrap used. nboot indicate many bootstrap samples used. pboot indicate proportion bootstrap samples fitted. also worth noting dist column moved last first position output data frame.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"censored-data-1-0-0-1","dir":"Changelog","previous_headings":"Hazard Concentration/Protection Estimation","what":"Censored Data","title":"ssdtools 1.0.0","text":"Confidence intervals estimated interval censored data.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"weighted-data-1-0-0-1","dir":"Changelog","previous_headings":"Hazard Concentration/Protection Estimation","what":"Weighted Data","title":"ssdtools 1.0.0","text":"Confidence intervals estimated unequally weighted data.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"goodness-of-fit-1-0-0","dir":"Changelog","previous_headings":"","what":"Goodness of Fit","title":"ssdtools 1.0.0","text":"pvalue argument (default FALSE) added ssd_gof() specify whether return p-values test statistics opposed test statistics .","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"plotting-1-0-0","dir":"Changelog","previous_headings":"","what":"Plotting","title":"ssdtools 1.0.0","text":"also substantive changes plotting functionality. Added following functions ssd_plot_data() plot censored uncensored data calling geom_ssdpoint() left right column (alpha parameter values adjusted accordingly) geom_ssdsegment() allow plotting range censored data points using segments. scale_colour_ssd() (scale_color_ssd()) provide 8 color-blind scale. Made following changes ssd_plot() added bounds (default c(left = 1, right = 1)) argument specify many orders magnitude extend plot beyond minimum maximum (non-missing) values. added linetype (default NULL) argument specify line type. added linecolor (default NULL) argument specify line color. changed default value ylab “Percent Species Affected” “Species Affected”. Renamed - GeomSsd GeomSsdpoint. - StatSsd StatSsdpoint Soft-deprecated - geom_ssd() geom_ssdpoint(). - stat_ssd(). - ssd_plot_cf() fitdistrplus::descdist().","code":""},{"path":[]},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssddata-1-0-0","dir":"Changelog","previous_headings":"Data","what":"ssddata","title":"ssdtools 1.0.0","text":"dataset boron_data renamed ccme_boron moved ssddata R package together CCME datasets. ssddata package provides suite datasets testing comparing species sensitivity distribution fitting software.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"data-handling-functions-1-0-0","dir":"Changelog","previous_headings":"Data","what":"Data Handling Functions","title":"ssdtools 1.0.0","text":"Added ssd_data() return original data fitdists object. ssd_ecd_data() get empirical cumulative density data. ssd_sort_data() sort data empirical cumulative density.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"miscellaneous-1-0-0","dir":"Changelog","previous_headings":"","what":"Miscellaneous","title":"ssdtools 1.0.0","text":"npars() now orders distribution name. functions arguments soft-deprecated prior v0.3.0 now warn unconditionally.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"generics-1-0-0","dir":"Changelog","previous_headings":"Miscellaneous","what":"Generics","title":"ssdtools 1.0.0","text":"Implemented following generics fitdists objects glance() get model likelihoods, information-theoretic criteria etc. augment() return original data set. logLik() return log-likelihood. summary.fitdists() summarize.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-0379000","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.7.9000","title":"ssdtools 0.3.7.9000","text":"previous version.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-037","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.7","title":"ssdtools 0.3.7","text":"CRAN release: 2021-10-27 fix unequal indentation Rmd ```","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-036","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.6","title":"ssdtools 0.3.6","text":"CRAN release: 2021-09-22 Added wt (Akaike weight) column predict(), ssd_hc() ssd_hp() Deprecated argument ic predict(), ssd_hc() ssd_hp() unused. Silenced output ssd_fit_dists().","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-035","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.5","title":"ssdtools 0.3.5","text":"CRAN release: 2021-09-03 Bump requirement R >= 4.1 actuar package.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-034","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.4","title":"ssdtools 0.3.4","text":"CRAN release: 2021-05-14 Update Apache License url https.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-033","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.3","title":"ssdtools 0.3.3","text":"CRAN release: 2021-02-19 Increased requirement R >= 3.5 due VGAM. Modified comma_signif() now rounds 3 significant digits default applies scales::comma() values >= 1000. Soft-deprecated ... argument comma_signif().","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-032","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.2","title":"ssdtools 0.3.2","text":"CRAN release: 2020-09-02 Fix moved URLs.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-031","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.1","title":"ssdtools 0.3.1","text":"CRAN release: 2020-09-01 Internal changes .","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-030","dir":"Changelog","previous_headings":"","what":"ssdtools 0.3.0","title":"ssdtools 0.3.0","text":"CRAN release: 2020-07-09","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ssdtools 0.3.0","text":"Soft-deprecated ‘burrIII3’ distribution poorly defined. Soft-deprecated ‘pareto’ distribution poor fit SSD data.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"major-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"ssdtools 0.3.0","text":"Reparameterized ‘llogis’ distribution terms locationlog scalelog. Reparameterized ‘burrIII3’ distribution terms lshape1, lshape2 lscale. Reparamaterized ‘burrIII2’ distribution terms locationlog scalelog. Reparamaterized ‘lgumbel’ distribution terms locationlog scalelog. Reparamaterized ‘gompertz’ distribution terms llocation lshape. Standardized handling arguments d,p,q,r s functions distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"minor-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"ssdtools 0.3.0","text":"rdist() functions now use length n length(n) > 1. Added slnorm() get starting values ‘dlnorm’ distribution.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"internal-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Internal Changes","title":"ssdtools 0.3.0","text":"Switch C++ implementation distributions.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-020","dir":"Changelog","previous_headings":"","what":"ssdtools 0.2.0","title":"ssdtools 0.2.0","text":"CRAN release: 2020-04-15","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ssdtools 0.2.0","text":"Changed computable (whether standard errors must computable considered converged) FALSE default. Enforces one ‘llogis’, ‘llog’ ‘burrIII2’ sets (identical).","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"major-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Major Changes","title":"ssdtools 0.2.0","text":"Deprecated ‘burrIII2’ ‘llogis’ identical. Replaced ‘burrIII2’ (identical) ‘llogis’ default set. Fixed bug rllog() causing error. Fixed parameterisation ‘lgumbel’ causing fail fit data.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"minor-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"ssdtools 0.2.0","text":"Provides warning message change default ci argument predict function. gives warning standard errors computable computable = TRUE. Uses tibble package create tibbles. Removed dependency checkr.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-011","dir":"Changelog","previous_headings":"","what":"ssdtools 0.1.1","title":"ssdtools 0.1.1","text":"CRAN release: 2020-01-24 Fix test CRAN R 3.5","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-010","dir":"Changelog","previous_headings":"","what":"ssdtools 0.1.0","title":"ssdtools 0.1.0","text":"CRAN release: 2020-01-13","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"breaking-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ssdtools 0.1.0","text":"Default distributions changed ‘burrIII2’, ‘gamma’ ‘lnorm’ ‘gamma’, ‘gompertz’, ‘lgumbel’, ‘llog’, ‘lnorm’ ‘weibull’. Changed implicit behaviour ssd_hc() predict() ci = TRUE explicit ssd_hc(ci = FALSE) predict(ci = FALSE). Replaced shape scale arguments llog() lshape lscale. Replaced location scale arguments lgumbel() llocation lscale.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"major-features-0-1-0","dir":"Changelog","previous_headings":"","what":"Major Features","title":"ssdtools 0.1.0","text":"Added Burr Type-III Two-Parameter Distribution (burrIII2). Added ssd_hp() calculate hazard percent specific concentrations. Added ssd_exposure() calculate proportion exposed based distribution concentrations. Optimized predict() added parallel argument. Tidyverse style error warning messages.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"minor-features-0-1-0","dir":"Changelog","previous_headings":"","what":"Minor Features","title":"ssdtools 0.1.0","text":"ssd_fit_dists() now checks standard errors computable. Added Burr Type-III Three-Parameter Distribution (burrIII3). Added sdist(x) functionality set starting values distributions. Added ssd_plot_cdf() plot cumulative distribution function (equivalent autoplot()) nobs() censored data now returns missing value. Default ssd_fit_dists() distributions now ordered alphabetically.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"deprecated-0-1-0","dir":"Changelog","previous_headings":"","what":"Deprecated","title":"ssdtools 0.1.0","text":"Deprecated ssd_hc() argument hc = 5L percent = 5L. Deprecated dllog() etc dllogis(). Deprecated ssd_cfplot() ssd_plot_cf().","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"bug-fixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"ssdtools 0.1.0","text":"Fixed llog distribution small concentrations. Ensured concentrations 1 1 significant figure plots.","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-003","dir":"Changelog","previous_headings":"","what":"ssdtools 0.0.3","title":"ssdtools 0.0.3","text":"CRAN release: 2018-11-25 added citation Added ssdtools-manual vignette Changed predict() ssd_hc() nboot argument 1001 1000 Added hc5_boron data object longer export ssd_fit_dist() ssd_fit_dists() renders redundant geom_hcintersect() now takes multiple values information DESCRIPTION Added CRAN badge Removed dependencies: dplyr, magrittr, plyr, purrr Moved depends imports: VGAM, fitdistrplus, graphics, ggplot, stats Moved imports suggests: tibble","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-002","dir":"Changelog","previous_headings":"","what":"ssdtools 0.0.2","title":"ssdtools 0.0.2","text":"CRAN release: 2018-10-14 Added contributors Added hex","code":""},{"path":"https://bcgov.github.io/ssdtools/news/index.html","id":"ssdtools-001","dir":"Changelog","previous_headings":"","what":"ssdtools 0.0.1","title":"ssdtools 0.0.1","text":"Initial Release","code":""}]
